dbrp "telegraf"."autogen"
var measurement = 'cpu'
var groupBy = []
var whereFilter = lambda: ("cpu" == 'cpu-total')
var name = 'cpu_alert'
var idVar = name
var message = 'cpu->cpu-total->usage-user'
var idTag = 'alertID'
var levelTag = 'level'
var messageField = 'message'
var durationField = 'duration'
var outputDB = 'chronograf'
var outputRP = 'autogen'
var outputMeasurement = 'alerts'
var triggerType = 'threshold'
var crit = 2
var data = stream
    |from()
        .measurement(measurement)
        .groupBy(groupBy)
        .where(whereFilter)
    |eval(lambda: "usage_user")
        .as('value')
var trigger = data
    |alert()
        .crit(lambda: "value" > crit)
        .id(idVar)
        .idTag(idTag)
        .levelTag(levelTag)
		.details('CPU Usage is beyond the limit. Please check') 
		.message(message)
        .messageField(messageField)
        .durationField(durationField)
        .stateChangesOnly()
		.email()
        .post('http://localhost:5000/api/v1.0/alert')

trigger
    |eval(lambda: float("value"))
        .as('value')
        .keep()
    |influxDBOut()
        .create()
        .database(outputDB)
        .retentionPolicy(outputRP)
        .measurement(outputMeasurement)
        .tag('alertName', name)
        .tag('triggerType', triggerType)

trigger
    |httpOut('output')
