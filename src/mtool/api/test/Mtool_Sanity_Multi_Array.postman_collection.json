{
	"info": {
		"_postman_id": "f6381618-d947-4b8d-9f3c-7cad7cd441bd",
		"name": "Mtool_Sanity_Multi_Array copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "623866a0-2b8c-483b-a39c-c3ca6133b34e",
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"// retrieve the token value from the response\r",
							"let token = response[\"token\"];\r",
							"\r",
							"// save the token value to variables so that it can used in subsequent APIs\r",
							"pm.variables.set('token', token);\r",
							"postman.setEnvironmentVariable(\"token\", token);\r",
							"//pm.environment.set('token', token);\r",
							"\r",
							"// console.log(token);\r",
							"\r",
							"pm.test(\"Logged in as admin...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin\",\"password\":\"admin\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/login/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"login",
						""
					]
				},
				"description": "login to MTool"
			},
			"response": []
		},
		{
			"name": "Stop ibofos",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "127683d1-1162-4f12-a623-a0ce1e7e3b45",
						"exec": [
							"let res = pm.response.json();\r",
							"\r",
							"pm.test(\"DAgent reponse is... \" +  res[\"response\"], function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"if (responseCode.code === 200 || responseCode.code === 500) {\r",
							"    console.log(\" in if \")\r",
							"    setTimeout(function () {\r",
							"        console.log(\" in timeout \")\r",
							"    }, 20000);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "99581eea-d7d7-4304-92a8-b08358e71a16",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/stop_ibofos",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"stop_ibofos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start ibofos",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "33a7aac6-17c1-4250-bef5-0b190e47838e",
						"exec": [
							"if (responseCode.code === 200 || responseCode.code === 500) {\r",
							"    setTimeout(function () {\r",
							"    }, 10000);\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"DAgent reponse is... \" + jsonData[\"response\"], function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 500]);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/start_ibofos",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"start_ibofos"
					]
				}
			},
			"response": []
		},
		{
			"name": "IsPOS-Running",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cff50531-442b-4c21-af9f-eb07808c4f94",
						"exec": [
							"pm.test(\"POS is Running...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Verify Json values\", function () {\r",
							"    try {\r",
							"       pm.expect(jsonData.RESULT.result.status.description).is.to.equal(\"Success\");\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Could not start POS\") });\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "139411e2-2f55-4c32-8c6d-cd80c20fe4ee",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/get_Is_Ibof_OS_Running/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"get_Is_Ibof_OS_Running",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get devices",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0dd05851-464d-4fad-9b02-b7766d3be2cc",
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"console.log(response);\r",
							"let deviceCount = 0;\r",
							"/*\r",
							"try {\r",
							"    let devices = response.devices.map(d => d.name)\r",
							"    deviceCount = devices.length;\r",
							"    console.log(\"devices-> \", devices)\r",
							"    // save the token value to variables so that it can used in subsequent APIs\r",
							"    pm.variables.set('device', devices[0]);\r",
							"    console.log('device is....', devices[0]);\r",
							"    postman.setEnvironmentVariable(\"device\", devices[0]);\r",
							"}\r",
							"catch (err) {\r",
							"    console.log('err....', err);\r",
							"}\r",
							"pm.test(\"Get device info...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"if (deviceCount > 0) {\r",
							"    //Devices.. Create or use existing array\r",
							"    console.log(deviceCount, ' device found.... Creating array or using existing array now...');\r",
							"   // postman.setNextRequest(\"Delete Array\");\r",
							"    // postman.setNextRequest(\"Create Array\")\r",
							"\r",
							"} else {\r",
							"    //no devices.. logout \r",
							"    console.log('No Device found...... Exiting now...');\r",
							"    //postman.setNextRequest(\"logout\");\r",
							"}\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b2e1831a-c9be-43d4-aee6-4f16671ae9f6",
						"exec": [
							"//setTimeout( function() {}, 2000)\r",
							"//pm.Wait(5000);\r",
							"\r",
							"let temp_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiJhZG1pbiIsImV4cCI6MTU5NzQwMDc3Mn0.u2dTsSz6OKOHQKLt2XjpRPFLRCJmzlC7dafmrq_VcWc'\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/get_devices/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"get_devices",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d2feb57-8928-4892-9cd8-06982b4344a1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f84e3588-1677-45bd-a117-d471db539ac9",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "ARRAY RESET",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3c471f7f-fd74-4094-9a49-6d258fde90bd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8019a09d-0c2e-4eb6-b835-73741536c245",
						"exec": [
							"pm.test(\"LIST ARRAY DEVICE\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{$guid}}"
					},
					{
						"key": "ts",
						"value": "{{$timestamp}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{basic_auth}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/api/ibofos/v1/arrays/reset",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ibofos",
						"v1",
						"arrays",
						"reset"
					]
				}
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-Id",
								"value": "{{$guid}}"
							},
							{
								"key": "ts",
								"value": "{{$timestamp}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{basic_auth}}"
							}
						],
						"url": {
							"raw": "http://{{host}}/mtool/api/ibofos/v1/array/device",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"mtool",
								"api",
								"ibofos",
								"v1",
								"array",
								"device"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "X-Request-Id",
							"value": "6e787e27-1964-44da-bcdf-b5f44ffbd1a3"
						},
						{
							"key": "Date",
							"value": "Fri, 08 May 2020 06:51:22 GMT"
						},
						{
							"key": "Content-Length",
							"value": "437"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"rid\": \"6e787e27-1964-44da-bcdf-b5f44ffbd1a3\",\n    \"lastSuccessTime\": 1588920682,\n    \"result\": {\n        \"status\": {\n            \"module\": \"\",\n            \"code\": 0,\n            \"description\": \"DONE\"\n        },\n        \"data\": {\n            \"devicelist\": [\n                {\n                    \"name\": \"uram0\",\n                    \"type\": \"BUFFER\"\n                },\n                {\n                    \"name\": \"unvme-ns-0\",\n                    \"type\": \"DATA\"\n                },\n                {\n                    \"name\": \"unvme-ns-1\",\n                    \"type\": \"DATA\"\n                },\n                {\n                    \"name\": \"unvme-ns-2\",\n                    \"type\": \"DATA\"\n                },\n                {\n                    \"name\": \"unvme-ns-3\",\n                    \"type\": \"SPARE\"\n                }\n            ]\n        }\n    },\n    \"info\": {\n        \"state\": \"OFFLINE\",\n        \"situation\": \"DEFAULT\",\n        \"rebulidingProgress\": 0,\n        \"capacity\": 0,\n        \"used\": 0\n    }\n}"
				}
			]
		},
		{
			"name": "Delete 1st Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7500ee3b-5cbe-4e20-94f0-2309387d07e3",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    try {\r",
							"        response = jsonData.result.description\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"if (responseCode.code === 200) {\r",
							"    // Delay for 12 Seconds (set in milliseconds)\r",
							"    setTimeout(function () {\r",
							"    }, 500);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"arrayname\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/delete_array/{{arrayName1}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"delete_array",
						"{{arrayName1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete 2nd Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a7ee6ca-eb6e-4975-8396-0964e65ec1a7",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    try {\r",
							"        response = jsonData.result.description\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"if (responseCode.code === 200) {\r",
							"    // Delay for 12 Seconds (set in milliseconds)\r",
							"    setTimeout(function () {\r",
							"    }, 500);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"arrayname\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/delete_array/{{arrayName2}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"delete_array",
						"{{arrayName2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 1st Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da55612e-d0e0-48a3-a5fd-03e0bf9e7e99",
						"exec": [
							"//pm.test(\"Created an array...\", function () {\r",
							"//   pm.response.to.have.status(200);\r",
							"//});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData.result.status.description);\r",
							"let status = \"Code: \" + jsonData.result.status.code + \" Level: \" + jsonData.result.status.level + \" Description: \" + jsonData.result.status.description;\r",
							"console.log(jsonData.result);\r",
							"//let description = jsonData.result.status;\r",
							"pm.test(\"DAgent response is... \" + status, function () {\r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"Success\");\r",
							"});\r",
							"/*\r",
							"let statusDesc = jsonData.result.status.description;\r",
							"\r",
							"if (statusDesc.toLowerCase() == \"success\") {\r",
							"    setTimeout(function () {\r",
							"    }, 2000);\r",
							"\r",
							"    // Create Volume\r",
							"    postman.setNextRequest(\"Create Volume\")\r",
							"} else {\r",
							"\r",
							"    console.log('Array creating failed .... exiting..');\r",
							"\r",
							"    // try restarting POS\r",
							"    let restartCount = pm.environment.get(\"posRestartCount\");\r",
							"    if (restartCount <= 3) {\r",
							"        // increment restart count \r",
							"        pm.environment.set(\"posRestartCount\", (restartCount + 1));\r",
							"        // Try restart \r",
							"        postman.setNextRequest(\"Stop ibofos\");\r",
							"\r",
							"    } else {\r",
							"        // Fail and logout\r",
							"        postman.setNextRequest(\"logout\");\r",
							"    }\r",
							"\r",
							"\r",
							"}\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"size\":\"01600321314816160032131481616003213148161600321314816\",\"arrayname\":\"{{arrayName1}}\",\"raidtype\":\"raid5\",\"storageDisks\":[{\"deviceName\":\"{{storageDisk1}}\"},{\"deviceName\":\"{{storageDisk2}}\"},{\"deviceName\":\"{{storageDisk3}}\"}],\"spareDisks\":[{\"deviceName\":\"{{spareDisk1}}\"}],\"writeBufferDisk\":[],\"metaDisk\":\"{{WBPDisk1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/create_arrays/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"create_arrays",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 2nd Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "361b7f1b-8bcd-495f-a6de-f5563d488ec4",
						"exec": [
							"//pm.test(\"Created an array...\", function () {\r",
							"//   pm.response.to.have.status(200);\r",
							"//});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData.result.status.description);\r",
							"let status = \"Code: \" + jsonData.result.status.code + \" Level: \" + jsonData.result.status.level + \" Description: \" + jsonData.result.status.description;\r",
							"console.log(jsonData.result);\r",
							"//let description = jsonData.result.status;\r",
							"pm.test(\"DAgent response is... \" + status, function () {\r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"Success\");\r",
							"});\r",
							"\r",
							"/*\r",
							"let statusDesc = jsonData.result.status.description;\r",
							"\r",
							"if (statusDesc.toLowerCase() == \"success\") {\r",
							"    setTimeout(function () {\r",
							"    }, 2000);\r",
							"\r",
							"    // Create Volume\r",
							"    postman.setNextRequest(\"Create Volume\")\r",
							"} else {\r",
							"\r",
							"    console.log('Array creating failed .... exiting..');\r",
							"\r",
							"    // try restarting POS\r",
							"    let restartCount = pm.environment.get(\"posRestartCount\");\r",
							"    if (restartCount <= 3) {\r",
							"        // increment restart count \r",
							"        pm.environment.set(\"posRestartCount\", (restartCount + 1));\r",
							"        // Try restart \r",
							"        postman.setNextRequest(\"Stop ibofos\");\r",
							"\r",
							"    } else {\r",
							"        // Fail and logout\r",
							"        postman.setNextRequest(\"logout\");\r",
							"    }\r",
							"}\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"size\":\"01600321314816160032131481616003213148161600321314816\",\"arrayname\":\"{{arrayName2}}\",\"raidtype\":\"raid5\",\"storageDisks\":[{\"deviceName\":\"{{storageDisk4}}\"},{\"deviceName\":\"{{storageDisk5}}\"},{\"deviceName\":\"{{storageDisk6}}\"}],\"spareDisks\":[{\"deviceName\":\"{{spareDisk2}}\"}],\"writeBufferDisk\":[],\"metaDisk\":\"{{WBPDisk2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/create_arrays/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"create_arrays",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Arrays",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "17578b2e-6604-4221-af45-f022181c030e",
						"exec": [
							"\r",
							"pm.test(\"Array Info is retrieved...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"if (jsonData.length == 0) {\r",
							"    console.log('Creating new array....');\r",
							"} else {\r",
							"    console.log('Array exists.... Creating volume.');\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "853d5e29-d74e-4bdb-81dc-353b9a4435ea",
						"exec": [
							"let temp_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiJhZG1pbiIsImV4cCI6MTU5NzQwMDc3Mn0.u2dTsSz6OKOHQKLt2XjpRPFLRCJmzlC7dafmrq_VcWc'"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/get_arrays/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"get_arrays",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "remove spare disk in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed44beb0-b5d0-42ee-8ba6-0f3ee59ec5f4",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk1}}\", \"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/remove_spare_device/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"remove_spare_device",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "remove spare disk in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ab5ad89f-f397-4c95-8444-d34c1635c6e6",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk2}}\", \"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/remove_spare_device/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"remove_spare_device",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "add spare disk in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "362ed41a-5737-47c0-bfdd-7896366b8903",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk1}}\", \"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/add_spare_device/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"add_spare_device",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "add spare disk in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb64ff6a-13bb-4d53-8c00-b971fe75e3d3",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk2}}\", \"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/add_spare_device/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"add_spare_device",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 3 Volume in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "576819ce-9f46-429d-8286-0a42dbef970c",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function () {\r",
							"        console.log(\" in timeout \")\r",
							"    }, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{volNameArr1}}\",\"size\":\"20\",\"description\":\"\",\"unit\":\"GB\",\"arrayname\":\"{{arrayName1}}\",\"maxbw\":0,\"maxiops\":0,\"count\":\"3\",\"suffix\":0,\"stop_on_error\":false,\"mount_vol\":true,\"array\":\"{{arrayName1}}\",\"max_available_size\": \"{{globals.totalsize}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/save-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"save-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create single Volume in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9241e54a-6821-4509-983e-65ca318c14a2",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{volNameArr1_1}}\",\"size\":\"20\",\"description\":\"\",\"unit\":\"GB\",\"arrayname\":\"{{arrayName1}}\",\"maxbw\":0,\"maxiops\":0,\"count\":\"1\",\"suffix\":0,\"stop_on_error\":false,\"mount_vol\":true,\"array\":\"{{arrayName1}}\",\"max_available_size\": \"{{globals.totalsize}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/save-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"save-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "QOS CREATE VOLUME POLICIES in one volume",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36ef2092-0d8b-4e3f-9635-f12f69115219",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"array\": \"{{arrayName}}\",\r\n\t\t\"volumes\":[{\"volumeName\":\"vol_arr1_0\"}],\r\n\t\t\"maxbw\": 40,\r\n        \"maxiops\":30\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/qos",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "QOS RESET VOLUME POLICIES of one volume",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1b4966ad-8c89-4dd4-a1af-a3029404b77d",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"array\": \"{{arrayName}}\",\r\n\t\t\"volumes\":[{\"volumeName\":\"vol_arr1_0\"}]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/qos/reset",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"qos",
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "QOS LIST VOLUME POLICIES of one volume",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c8111c14-3a21-4152-ad8c-da2cadf628a6",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"array\": \"{{arrayName}}\",\r\n\t\t\"volumes\":[{\"volumeName\":\"vol_arr1_0\"}]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/qos/policies",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"qos",
						"policies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Volumes of 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f7920fdc-34f6-4beb-ad4d-3789a89bc077",
						"exec": [
							"pm.test(\"Get Volume data is successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify volume count\", function () {\r",
							"    // console.log(\"len \",volArr.length)\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    var count = jsonData.length;\r",
							"    console.log(\"count \", count)\r",
							"\r",
							"    pm.expect(count).to.be.above(0);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c22526a2-309d-473b-a361-c0a8e852bcc0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/{{arrayName1}}/get_volumes/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"{{arrayName1}}",
						"get_volumes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "cpu_graph",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d046bb9b-09dc-4596-bf92-1b9f50ecfc81",
						"exec": [
							"pm.test(\"Data received \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6ec7be1f-d865-4cae-a28f-f65c053af46a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/usage_user/1m",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"usage_user",
						"1m"
					]
				}
			},
			"response": []
		},
		{
			"name": "array_bw_read",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b46ab00-46bb-47ff-8c82-3ddf092f09c6",
						"exec": [
							"pm.test(\"Data received\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*\r",
							"var jsonData = pm.response.json();\r",
							"data = jsonData.res\r",
							"bw_sum = 0\r",
							"for (i = 0; i < data.length; i++) {\r",
							"    bw_sum = bw_sum + data[i].bw\r",
							"}\r",
							"console.log(\"bw_sum  \", bw_sum)\r",
							"pm.test(\"Verify Json values\", function () {\r",
							"    pm.expect(bw_sum).to.be.above(0);\r",
							"});\r",
							"\r",
							"Fio will not be running in CI/CD setup\r",
							"\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/readbw/arrays?arrayids=0&time=5m",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"readbw",
						"arrays"
					],
					"query": [
						{
							"key": "arrayids",
							"value": "0"
						},
						{
							"key": "time",
							"value": "5m"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Custom Admin User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e55691b2-ae38-4dee-add9-3c5855f6e90f",
						"exec": [
							"\r",
							"// reset \r",
							"pm.variables.set('token', '');\r",
							"\r",
							"if (responseCode.code === 200 || responseCode.code === 400) {\r",
							"    // Delay for 15 Seconds (set in milliseconds)\r",
							"    setTimeout(function () {\r",
							"    }, 15000);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"pkadmin\",\"password\":\"pkadmin\",\"confirmpassword\":\"pkadmin\",\"user_role\":\"Admin\",\"mobilenumber\":\"+82 123 1231 234\",\"emailid\":\"pk@pk.com\",\"phone_number\":\"+82\",\"error\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/add_new_user/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"add_new_user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login as Custom Admin user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d804be67-c6ae-472f-a100-a4f8c545ca86",
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"// retrieve the token value from the response\r",
							"let token =  response[\"token\"];\r",
							"\r",
							"// reset \r",
							"pm.variables.set('token', '');\r",
							"\r",
							"// save the token value to variables so that it can used in subsequent APIs\r",
							"pm.variables.set('token', token);\r",
							"//pm.environment.set('token', token);\r",
							"\r",
							"// console.log(token);\r",
							"\r",
							"pm.test(\"PKAdmin logged in as admin...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"pkadmin\",\"password\":\"pkadmin\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/login/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Array Based Perf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f9661b69-83d3-4b78-83f8-4e0524b148fb",
						"exec": [
							"pm.test(\"Array Based Perf...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/latency/arrays?arrayids=0&time=5m",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"latency",
						"arrays"
					],
					"query": [
						{
							"key": "arrayids",
							"value": "0"
						},
						{
							"key": "time",
							"value": "5m"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Smart Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e533eca0-57bb-444f-b31a-b17cdd5bf6a1",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b2e76f26-2a57-4eb7-ad06-b574d76d1934",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/device/smart/{{storageDisk1}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"device",
						"smart",
						"{{storageDisk1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 3 Volume in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4bb7304-78be-44ab-84ad-0042bce8d022",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function () {\r",
							"        console.log(\" in timeout \")\r",
							"    }, 5000);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{volNameArr2}}\",\"size\":\"20\",\"description\":\"\",\"unit\":\"GB\",\"arrayname\":\"{{arrayName2}}\",\"maxbw\":0,\"maxiops\":0,\"count\":\"3\",\"suffix\":0,\"stop_on_error\":false,\"mount_vol\":true,\"array\":\"{{arrayName2}}\",\"max_available_size\": \"{{globals.totalsize}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/save-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"save-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create single Volume in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ecf24d3-b997-4b64-b259-e497196131ae",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{volNameArr2_1}}\",\"size\":\"20\",\"description\":\"\",\"unit\":\"GB\",\"arrayname\":\"{{arrayName2}}\",\"maxbw\":0,\"maxiops\":0,\"count\":\"1\",\"suffix\":0,\"stop_on_error\":false,\"mount_vol\":true,\"array\":\"{{arrayName2}}\",\"max_available_size\": \"{{globals.totalsize}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/save-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"save-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Volumes of 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41f3748d-6d3b-4195-b171-c45d0be7becc",
						"exec": [
							"pm.test(\"Get Volume data is successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify volume count\", function () {\r",
							"    // console.log(\"len \",volArr.length)\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    var count = jsonData.length;\r",
							"    console.log(\"count \", count)\r",
							"\r",
							"    pm.expect(count).to.be.above(0);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3507901c-8dbe-4545-88b1-d4ef806bf810",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/{{arrayName2}}/get_volumes/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"{{arrayName2}}",
						"get_volumes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62cf64e1-780d-44d8-b911-e8e2f8e31a86",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\" + response, function () {\r",
							"    pm.expect(response).is.to.equal(\"Success\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"maxiops\":10,\"maxbw\":20,\"name\":\"{{volNameArr1}}0\",\"array\":\"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/update-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"update-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update vol_arr2_0in 2nd  array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0c69a78-27cf-4831-a498-234faa935d7d",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\" + response, function () {\r",
							"    pm.expect(response).is.to.equal(\"Success\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"maxiops\":10,\"maxbw\":20,\"name\":\"{{volNameArr2}}0\",\"array\":\"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/update-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"update-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "rename vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e0a0b491-94dc-42bb-9299-46a390305047",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr1}}0\", \"newname\": \"{{volNameArr1}}0_renamed\", \"array\": \"{{arrayName1}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr1}}0",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volumes",
						"{{volNameArr1}}0"
					]
				}
			},
			"response": []
		},
		{
			"name": "rename vol_arr2_0 in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2d5ebec-a9ec-49cb-aa34-f76c606e5edf",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr2}}0\", \"newname\": \"{{volNameArr2}}0_renamed\", \"array\": \"{{arrayName2}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr2}}0",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volumes",
						"{{volNameArr2}}0"
					]
				}
			},
			"response": []
		},
		{
			"name": "rename vol_arr1_0 Back in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6272a0ce-4ff8-41ae-9fed-d29495b43d4e",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr1}}0_renamed\", \"newname\": \"{{volNameArr1}}0\", \"array\": \"{{arrayName1}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr1}}0_renamed",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volumes",
						"{{volNameArr1}}0_renamed"
					]
				}
			},
			"response": []
		},
		{
			"name": "rename vol_arr2_0 Back in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "473f6ed2-7e3a-4fd8-b063-7ddff2258d46",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr2}}0_renamed\", \"newname\": \"{{volNameArr2}}0\", \"array\": \"{{arrayName2}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr2}}0_renamed",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volumes",
						"{{volNameArr2}}0_renamed"
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a10050c4-6cd8-486c-be4e-8c863cbf48d1",
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Volume updated...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json(); \r",
							"console.log(jsonData.result.status.description)\r",
							"pm.test(\"Verify Json values\", function () { \r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"Success\"); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr1}}0\", \"array\": \"{{arrayName1}}\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volume/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volume",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount vol_arr2_0 in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7159cd3-18d1-450e-b336-68e63986699d",
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Volume updated...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json(); \r",
							"console.log(jsonData.result.status.description)\r",
							"pm.test(\"Verify Json values\", function () { \r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"Success\"); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr2}}0\", \"array\": \"{{arrayName2}}\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volume/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volume",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "mount vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a35ebb2b-6a55-4bc2-99c1-d22fcb903cbb",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr1}}0\", \"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volume/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volume",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "mount vol_arr2_0 in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2355df5b-e4ae-4300-b386-457a28deba98",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr2}}0\", \"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volume/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volume",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Volume in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "be307d0d-c525-44bf-9307-59c4bef4ebc4",
						"exec": [
							"pm.test(\"Delete volume successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"volumes\": [\"{{volNameArr1}}0\"]}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/delete_volumes/{{arrayName1}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"delete_volumes",
						"{{arrayName1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Volume in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1643863b-70c0-4288-98ac-fc0f31b57b8c",
						"exec": [
							"pm.test(\"Delete volume successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"volumes\": [\"{{volNameArr2}}0\"]}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/delete_volumes/{{arrayName2}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"delete_volumes",
						"{{arrayName2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get get_all_volumes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22b6fd3d-e512-4152-ba28-5a65f6dbca8e",
						"exec": [
							"pm.test(\"Get Volume data is successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6f7ae73d-fb96-4158-b5cc-0f4483e94f52",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/get_all_volumes/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"get_all_volumes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d6b847c8-c032-408b-80e4-ac3971642246",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07e81fb8-d476-44c8-a545-6a741ae1f9e8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "mount 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ee9991c5-9e03-47bb-8606-0196aae32938",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "mount 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a49ea3f-66ef-48bc-8b71-f4e70e7b76c8",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a81351ce-67da-458c-ad36-47af9ede5ee5",
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"// retrieve the token value from the response\r",
							"let token =  response[\"token\"];\r",
							"\r",
							"// save the token value to variables so that it can used in subsequent APIs\r",
							"pm.variables.set('token', '');\r",
							"\r",
							"pm.test(\"Logout complete...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin\",\"password\":\"admin\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/login/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"login",
						""
					]
				},
				"description": "login to MTool"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f973c8b2-373d-44af-ac33-17d89a91aa1b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b1890923-8573-46ea-bb19-46ae09f64216",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}