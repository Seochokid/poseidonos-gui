{
	"info": {
		"_postman_id": "08fb735e-61ab-4e00-8dc0-fad82c2fbb04",
		"name": "Mtool_Sanity_Multi_Array",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2febd36e-1c9a-4674-a1d7-f3cf284a5645",
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"// retrieve the token value from the response\r",
							"let token = response[\"token\"];\r",
							"\r",
							"// save the token value to variables so that it can used in subsequent APIs\r",
							"pm.variables.set('token', token);\r",
							"postman.setEnvironmentVariable(\"token\", token);\r",
							"//pm.environment.set('token', token);\r",
							"\r",
							"// console.log(token);\r",
							"\r",
							"pm.test(\"Logged in as admin...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin\",\"password\":\"admin\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/login/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"login",
						""
					]
				},
				"description": "login to MTool"
			},
			"response": []
		},
		{
			"name": "Stop ibofos",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36d0c7eb-18bb-449c-9546-ee663e9259bd",
						"exec": [
							"let res = pm.response.json();\r",
							"\r",
							"pm.test(\"DAgent reponse is... \" +  res[\"response\"], function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"if (responseCode.code === 200 || responseCode.code === 500) {\r",
							"    console.log(\" in if \")\r",
							"    setTimeout(function () {\r",
							"        console.log(\" in timeout \")\r",
							"    }, 20000);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d5ae0345-52f5-449d-ad9d-14a14882a211",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/stop_ibofos",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"stop_ibofos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start ibofos",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5394278e-4be5-47e1-8db2-1b31b1b0705a",
						"exec": [
							"if (responseCode.code === 200 || responseCode.code === 500) {\r",
							"    setTimeout(function () {\r",
							"    }, 10000);\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"DAgent reponse is... \" + jsonData[\"response\"], function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 500]);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/start_ibofos",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"start_ibofos"
					]
				}
			},
			"response": []
		},
		{
			"name": "IsPOS-Running",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6d82a393-9198-453b-b1a2-8e9f934ce4ee",
						"exec": [
							"pm.test(\"POS is Running...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Verify Json values\", function () {\r",
							"    try {\r",
							"       pm.expect(jsonData.RESULT.result.status.description).is.to.equal(\"Success\");\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Could not start POS\") });\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d5c68053-9c7a-475a-b59e-40f008f9c214",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/get_Is_Ibof_OS_Running/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"get_Is_Ibof_OS_Running",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get devices",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90ee109c-5e4d-4e11-a91a-2107087a35d2",
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"console.log(response);\r",
							"let deviceCount = 0;\r",
							"/*\r",
							"try {\r",
							"    let devices = response.devices.map(d => d.name)\r",
							"    deviceCount = devices.length;\r",
							"    console.log(\"devices-> \", devices)\r",
							"    // save the token value to variables so that it can used in subsequent APIs\r",
							"    pm.variables.set('device', devices[0]);\r",
							"    console.log('device is....', devices[0]);\r",
							"    postman.setEnvironmentVariable(\"device\", devices[0]);\r",
							"}\r",
							"catch (err) {\r",
							"    console.log('err....', err);\r",
							"}\r",
							"pm.test(\"Get device info...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"if (deviceCount > 0) {\r",
							"    //Devices.. Create or use existing array\r",
							"    console.log(deviceCount, ' device found.... Creating array or using existing array now...');\r",
							"   // postman.setNextRequest(\"Delete Array\");\r",
							"    // postman.setNextRequest(\"Create Array\")\r",
							"\r",
							"} else {\r",
							"    //no devices.. logout \r",
							"    console.log('No Device found...... Exiting now...');\r",
							"    //postman.setNextRequest(\"logout\");\r",
							"}\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "83516a53-f708-44ba-ab7e-f93187a25117",
						"exec": [
							"//setTimeout( function() {}, 2000)\r",
							"//pm.Wait(5000);\r",
							"\r",
							"let temp_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiJhZG1pbiIsImV4cCI6MTU5NzQwMDc3Mn0.u2dTsSz6OKOHQKLt2XjpRPFLRCJmzlC7dafmrq_VcWc'\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/get_devices/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"get_devices",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca2bd2d0-b673-4002-a041-d8a4d98d7a68",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc9b23d6-b1d3-473d-8bd9-842317e0a527",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "ARRAY RESET",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e25a5fd7-cfe1-4978-9cd8-96d02a154e03",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8bb66b45-7181-4e9f-bb45-ad689ad90a22",
						"exec": [
							"pm.test(\"LIST ARRAY DEVICE\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Request-Id",
						"value": "{{$guid}}"
					},
					{
						"key": "ts",
						"value": "{{$timestamp}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{basic_auth}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}/api/ibofos/v1/arrays/reset",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"ibofos",
						"v1",
						"arrays",
						"reset"
					]
				}
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "X-Request-Id",
								"value": "{{$guid}}"
							},
							{
								"key": "ts",
								"value": "{{$timestamp}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{basic_auth}}"
							}
						],
						"url": {
							"raw": "http://{{host}}/mtool/api/ibofos/v1/array/device",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"path": [
								"mtool",
								"api",
								"ibofos",
								"v1",
								"array",
								"device"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "X-Request-Id",
							"value": "6e787e27-1964-44da-bcdf-b5f44ffbd1a3"
						},
						{
							"key": "Date",
							"value": "Fri, 08 May 2020 06:51:22 GMT"
						},
						{
							"key": "Content-Length",
							"value": "437"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"rid\": \"6e787e27-1964-44da-bcdf-b5f44ffbd1a3\",\n    \"lastSuccessTime\": 1588920682,\n    \"result\": {\n        \"status\": {\n            \"module\": \"\",\n            \"code\": 0,\n            \"description\": \"DONE\"\n        },\n        \"data\": {\n            \"devicelist\": [\n                {\n                    \"name\": \"uram0\",\n                    \"type\": \"BUFFER\"\n                },\n                {\n                    \"name\": \"unvme-ns-0\",\n                    \"type\": \"DATA\"\n                },\n                {\n                    \"name\": \"unvme-ns-1\",\n                    \"type\": \"DATA\"\n                },\n                {\n                    \"name\": \"unvme-ns-2\",\n                    \"type\": \"DATA\"\n                },\n                {\n                    \"name\": \"unvme-ns-3\",\n                    \"type\": \"SPARE\"\n                }\n            ]\n        }\n    },\n    \"info\": {\n        \"state\": \"OFFLINE\",\n        \"situation\": \"DEFAULT\",\n        \"rebulidingProgress\": 0,\n        \"capacity\": 0,\n        \"used\": 0\n    }\n}"
				}
			]
		},
		{
			"name": "Delete 1st Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3e0e11b-6a31-44e1-9614-033b2a867e3b",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    try {\r",
							"        response = jsonData.result.description\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"if (responseCode.code === 200) {\r",
							"    // Delay for 12 Seconds (set in milliseconds)\r",
							"    setTimeout(function () {\r",
							"    }, 500);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"arrayname\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/delete_array/{{arrayName1}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"delete_array",
						"{{arrayName1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete 2nd Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd1ba383-f1da-4bf4-b282-7e51b1ce795c",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    try {\r",
							"        response = jsonData.result.description\r",
							"    }\r",
							"    catch (err) {\r",
							"        pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"if (responseCode.code === 200) {\r",
							"    // Delay for 12 Seconds (set in milliseconds)\r",
							"    setTimeout(function () {\r",
							"    }, 500);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"arrayname\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/delete_array/{{arrayName2}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"delete_array",
						"{{arrayName2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 1st Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9cc9391f-d219-4b49-80b0-aabd9e39dccf",
						"exec": [
							"//pm.test(\"Created an array...\", function () {\r",
							"//   pm.response.to.have.status(200);\r",
							"//});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData.result.status.description);\r",
							"let status = \"Code: \" + jsonData.result.status.code + \" Level: \" + jsonData.result.status.level + \" Description: \" + jsonData.result.status.description;\r",
							"console.log(jsonData.result);\r",
							"//let description = jsonData.result.status;\r",
							"pm.test(\"DAgent response is... \" + status, function () {\r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"Success\");\r",
							"});\r",
							"/*\r",
							"let statusDesc = jsonData.result.status.description;\r",
							"\r",
							"if (statusDesc.toLowerCase() == \"success\") {\r",
							"    setTimeout(function () {\r",
							"    }, 2000);\r",
							"\r",
							"    // Create Volume\r",
							"    postman.setNextRequest(\"Create Volume\")\r",
							"} else {\r",
							"\r",
							"    console.log('Array creating failed .... exiting..');\r",
							"\r",
							"    // try restarting POS\r",
							"    let restartCount = pm.environment.get(\"posRestartCount\");\r",
							"    if (restartCount <= 3) {\r",
							"        // increment restart count \r",
							"        pm.environment.set(\"posRestartCount\", (restartCount + 1));\r",
							"        // Try restart \r",
							"        postman.setNextRequest(\"Stop ibofos\");\r",
							"\r",
							"    } else {\r",
							"        // Fail and logout\r",
							"        postman.setNextRequest(\"logout\");\r",
							"    }\r",
							"\r",
							"\r",
							"}\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"size\":\"01600321314816160032131481616003213148161600321314816\",\"arrayname\":\"{{arrayName1}}\",\"raidtype\":\"raid5\",\"storageDisks\":[{\"deviceName\":\"{{storageDisk1}}\"},{\"deviceName\":\"{{storageDisk2}}\"},{\"deviceName\":\"{{storageDisk3}}\"}],\"spareDisks\":[{\"deviceName\":\"{{spareDisk1}}\"}],\"writeBufferDisk\":[],\"metaDisk\":\"{{WBPDisk1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/create_arrays/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"create_arrays",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 2nd Array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a92140b-f359-4da3-9683-796857e0c548",
						"exec": [
							"//pm.test(\"Created an array...\", function () {\r",
							"//   pm.response.to.have.status(200);\r",
							"//});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData.result.status.description);\r",
							"let status = \"Code: \" + jsonData.result.status.code + \" Level: \" + jsonData.result.status.level + \" Description: \" + jsonData.result.status.description;\r",
							"console.log(jsonData.result);\r",
							"//let description = jsonData.result.status;\r",
							"pm.test(\"DAgent response is... \" + status, function () {\r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"Success\");\r",
							"});\r",
							"\r",
							"/*\r",
							"let statusDesc = jsonData.result.status.description;\r",
							"\r",
							"if (statusDesc.toLowerCase() == \"success\") {\r",
							"    setTimeout(function () {\r",
							"    }, 2000);\r",
							"\r",
							"    // Create Volume\r",
							"    postman.setNextRequest(\"Create Volume\")\r",
							"} else {\r",
							"\r",
							"    console.log('Array creating failed .... exiting..');\r",
							"\r",
							"    // try restarting POS\r",
							"    let restartCount = pm.environment.get(\"posRestartCount\");\r",
							"    if (restartCount <= 3) {\r",
							"        // increment restart count \r",
							"        pm.environment.set(\"posRestartCount\", (restartCount + 1));\r",
							"        // Try restart \r",
							"        postman.setNextRequest(\"Stop ibofos\");\r",
							"\r",
							"    } else {\r",
							"        // Fail and logout\r",
							"        postman.setNextRequest(\"logout\");\r",
							"    }\r",
							"}\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"size\":\"01600321314816160032131481616003213148161600321314816\",\"arrayname\":\"{{arrayName2}}\",\"raidtype\":\"raid5\",\"storageDisks\":[{\"deviceName\":\"{{storageDisk4}}\"},{\"deviceName\":\"{{storageDisk5}}\"},{\"deviceName\":\"{{storageDisk6}}\"}],\"spareDisks\":[{\"deviceName\":\"{{spareDisk2}}\"}],\"writeBufferDisk\":[],\"metaDisk\":\"{{WBPDisk2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/create_arrays/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"create_arrays",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Arrays",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b85fe14-6775-4fab-874b-62491901fe4a",
						"exec": [
							"\r",
							"pm.test(\"Array Info is retrieved...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"if (jsonData.length == 0) {\r",
							"    console.log('Creating new array....');\r",
							"} else {\r",
							"    console.log('Array exists.... Creating volume.');\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4b9a3b7d-0ccd-47f8-80be-a72cc36da9a9",
						"exec": [
							"let temp_token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJfaWQiOiJhZG1pbiIsImV4cCI6MTU5NzQwMDc3Mn0.u2dTsSz6OKOHQKLt2XjpRPFLRCJmzlC7dafmrq_VcWc'"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/get_arrays/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"get_arrays",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "remove spare disk in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65a9a8d6-8cd2-4d2a-a06d-d26792be65d1",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk1}}\", \"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/remove_spare_device/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"remove_spare_device",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "remove spare disk in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07c3092c-0afc-43cc-af93-fbcadcb9f530",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk2}}\", \"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/remove_spare_device/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"remove_spare_device",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "add spare disk in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0860a9b0-af39-4e97-8235-f2ff3f453bae",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk1}}\", \"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/add_spare_device/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"add_spare_device",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "add spare disk in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21864afc-0382-448c-a9e0-5321f584fbfa",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{spareDisk2}}\", \"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/add_spare_device/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"add_spare_device",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 3 Volume in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "04dc30ae-9fd4-4675-a73d-2959851c303a",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function () {\r",
							"        console.log(\" in timeout \")\r",
							"    }, 5000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{volNameArr1}}\",\"size\":\"20\",\"description\":\"\",\"unit\":\"GB\",\"arrayname\":\"{{arrayName1}}\",\"maxbw\":0,\"maxiops\":0,\"count\":\"3\",\"suffix\":0,\"stop_on_error\":false,\"mount_vol\":true,\"array\":\"{{arrayName1}}\",\"max_available_size\": \"{{globals.totalsize}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/save-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"save-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create single Volume in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c057445-e66d-4381-92fd-a5cc6787198f",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{volNameArr1_1}}\",\"size\":\"20\",\"description\":\"\",\"unit\":\"GB\",\"arrayname\":\"{{arrayName1}}\",\"maxbw\":0,\"maxiops\":0,\"count\":\"1\",\"suffix\":0,\"stop_on_error\":false,\"mount_vol\":true,\"array\":\"{{arrayName1}}\",\"max_available_size\": \"{{globals.totalsize}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/save-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"save-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "QOS CREATE VOLUME POLICIES in one volume",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6320042b-d846-4f5f-9cb8-ad9b94aa4630",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"array\": \"{{arrayName}}\",\r\n\t\t\"volumes\":[{\"volumeName\":\"vol_arr1_0\"}],\r\n\t\t\"maxbw\": 40,\r\n        \"maxiops\":30\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/qos",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "QOS RESET VOLUME POLICIES of one volume",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8040b73b-0975-4c3f-b2f2-c4c7c8a69153",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"array\": \"{{arrayName}}\",\r\n\t\t\"volumes\":[{\"volumeName\":\"vol_arr1_0\"}]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/qos/reset",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"qos",
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "QOS CREATE VOLUME POLICIES in one volume again",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7c08cb6f-4f0c-4ef5-a77b-b605a1be810c",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"array\": \"{{arrayName}}\",\r\n\t\t\"volumes\":[{\"volumeName\":\"vol_arr1_0\"}],\r\n\t\t\"maxbw\": 40,\r\n        \"maxiops\":30\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/qos",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"qos"
					]
				}
			},
			"response": []
		},
		{
			"name": "QOS LIST VOLUME POLICIES of one volume",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c38f4e0-7bb1-427c-b0f2-4cc0e6d40f63",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"array\": \"{{arrayName}}\",\r\n\t\t\"volumes\":[{\"volumeName\":\"vol_arr1_0\"}]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/qos/policies",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"qos",
						"policies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Volumes of 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ff785de-b196-4ffa-b4ec-267bd256f4d4",
						"exec": [
							"pm.test(\"Get Volume data is successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify volume count\", function () {\r",
							"    // console.log(\"len \",volArr.length)\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    var count = jsonData.length;\r",
							"    console.log(\"count \", count)\r",
							"\r",
							"    pm.expect(count).to.be.above(0);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "dc8396ea-a183-4073-8fe6-80dedf446911",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/{{arrayName1}}/get_volumes/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"{{arrayName1}}",
						"get_volumes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "cpu_graph",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8a092d3a-17e2-402f-bf17-423e54f4b17c",
						"exec": [
							"pm.test(\"Data received \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "abbfb188-ebcb-49ac-b16a-b2b7e11189fe",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/usage_user/1m",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"usage_user",
						"1m"
					]
				}
			},
			"response": []
		},
		{
			"name": "array_bw_read",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5063dac2-c919-40f7-9e89-16fe05804eff",
						"exec": [
							"pm.test(\"Data received\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*\r",
							"var jsonData = pm.response.json();\r",
							"data = jsonData.res\r",
							"bw_sum = 0\r",
							"for (i = 0; i < data.length; i++) {\r",
							"    bw_sum = bw_sum + data[i].bw\r",
							"}\r",
							"console.log(\"bw_sum  \", bw_sum)\r",
							"pm.test(\"Verify Json values\", function () {\r",
							"    pm.expect(bw_sum).to.be.above(0);\r",
							"});\r",
							"\r",
							"Fio will not be running in CI/CD setup\r",
							"\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/readbw/arrays?arrayids=0&time=5m",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"readbw",
						"arrays"
					],
					"query": [
						{
							"key": "arrayids",
							"value": "0"
						},
						{
							"key": "time",
							"value": "5m"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a36e30f8-c387-4457-bef6-6698e2e5ee38",
						"exec": [
							"pm.test(\"User deleted\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"ids\": [\"pkadmin\"]}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/delete_users/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"delete_users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Custom Admin User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e27f9fcf-274d-412f-9a6d-c8896fbca196",
						"exec": [
							"\r",
							"// reset \r",
							"pm.variables.set('token', '');\r",
							"\r",
							"if (responseCode.code === 200 || responseCode.code === 400) {\r",
							"    // Delay for 15 Seconds (set in milliseconds)\r",
							"    setTimeout(function () {\r",
							"    }, 15000);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"pkadmin\",\"password\":\"pkadmin@123\",\"confirmpassword\":\"pkadmin\",\"user_role\":\"Admin\",\"mobilenumber\":\"+82 123 1231 234\",\"emailid\":\"pk@pk.com\",\"phone_number\":\"+82\",\"error\":\"\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/add_new_user/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"add_new_user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a2ffbed-ca17-457d-af07-76f8be4a9c46",
						"exec": [
							"pm.test(\"User updated \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"_id\": \"pkadmin\", \"password\": \"pkadmin@123\",\"oldid\": \"pk@pk.com\", \"email\": \"pk@test.commm\", \"phone_number\": \"8298989898\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/update_user/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"update_user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login as Custom Admin user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "599ecb96-eeb9-454d-a2c8-3b7687091d94",
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"// retrieve the token value from the response\r",
							"let token =  response[\"token\"];\r",
							"\r",
							"// reset \r",
							"pm.variables.set('token', '');\r",
							"\r",
							"// save the token value to variables so that it can used in subsequent APIs\r",
							"pm.variables.set('token', token);\r",
							"//pm.environment.set('token', token);\r",
							"\r",
							"// console.log(token);\r",
							"\r",
							"pm.test(\"PKAdmin logged in as admin...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"pkadmin\",\"password\":\"pkadmin@123\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/login/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4e71da95-d9cc-40d6-a909-43ea1d28c5b4",
						"exec": [
							"pm.test(\"Received Users\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Verify user count\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var count = jsonData.length;\r",
							"    console.log(\"count \", count)\r",
							"\r",
							"    pm.expect(count).to.be.above(0);\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e524e100-7b40-445d-a8f3-73a82db34a82",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/get_users/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"get_users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Array Based Perf",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "055daf5e-683f-4409-ba9c-78278cacda04",
						"exec": [
							"pm.test(\"Array Based Perf...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/latency/arrays?arrayids=0&time=5m",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"latency",
						"arrays"
					],
					"query": [
						{
							"key": "arrayids",
							"value": "0"
						},
						{
							"key": "time",
							"value": "5m"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Smart Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b1f730e-b461-4c30-88da-89cee6cbbbfc",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b2798e77-4a92-46d5-95ab-6ef72659f1d3",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/device/smart/{{storageDisk1}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"device",
						"smart",
						"{{storageDisk1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create 3 Volume in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a9de869-e80b-428c-83cd-46e2bb881b7f",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"setTimeout(function () {\r",
							"        console.log(\" in timeout \")\r",
							"    }, 5000);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{volNameArr2}}\",\"size\":\"20\",\"description\":\"\",\"unit\":\"GB\",\"arrayname\":\"{{arrayName2}}\",\"maxbw\":0,\"maxiops\":0,\"count\":\"3\",\"suffix\":0,\"stop_on_error\":false,\"mount_vol\":true,\"array\":\"{{arrayName2}}\",\"max_available_size\": \"{{globals.totalsize}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/save-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"save-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create single Volume in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7ed63e6a-f9cb-45d4-8942-22f73e8ebd4e",
						"exec": [
							"pm.test(\"Volume created...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{volNameArr2_1}}\",\"size\":\"20\",\"description\":\"\",\"unit\":\"GB\",\"arrayname\":\"{{arrayName2}}\",\"maxbw\":0,\"maxiops\":0,\"count\":\"1\",\"suffix\":0,\"stop_on_error\":false,\"mount_vol\":true,\"array\":\"{{arrayName2}}\",\"max_available_size\": \"{{globals.totalsize}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/save-volume/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"save-volume",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Volumes of 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "99fb0b01-0687-44ac-91e2-3a9821c5d2e4",
						"exec": [
							"pm.test(\"Get Volume data is successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify volume count\", function () {\r",
							"    // console.log(\"len \",volArr.length)\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    var count = jsonData.length;\r",
							"    console.log(\"count \", count)\r",
							"\r",
							"    pm.expect(count).to.be.above(0);\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6404d2ab-fe9a-4ab1-b822-1ac2c7f09dcb",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/{{arrayName2}}/get_volumes/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"{{arrayName2}}",
						"get_volumes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "rename vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7ac9b6e4-fcd3-4b81-a646-a5cc93a1a24f",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr1}}0\", \"newname\": \"{{volNameArr1}}0_renamed\", \"array\": \"{{arrayName1}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr1}}0",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volumes",
						"{{volNameArr1}}0"
					]
				}
			},
			"response": []
		},
		{
			"name": "rename vol_arr2_0 in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "17cdf51a-94a9-4041-bd4e-f8c6cfb80dbd",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr2}}0\", \"newname\": \"{{volNameArr2}}0_renamed\", \"array\": \"{{arrayName2}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr2}}0",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volumes",
						"{{volNameArr2}}0"
					]
				}
			},
			"response": []
		},
		{
			"name": "rename vol_arr1_0 Back in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28a57350-973a-4fe1-8cf1-fae85663c2e7",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr1}}0_renamed\", \"newname\": \"{{volNameArr1}}0\", \"array\": \"{{arrayName1}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr1}}0_renamed",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volumes",
						"{{volNameArr1}}0_renamed"
					]
				}
			},
			"response": []
		},
		{
			"name": "rename vol_arr2_0 Back in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3cc31443-1362-4abf-b9d7-ba4464b8cb05",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"param\": {\"name\": \"{{volNameArr2}}0_renamed\", \"newname\": \"{{volNameArr2}}0\", \"array\": \"{{arrayName2}}\"}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volumes/{{volNameArr2}}0_renamed",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volumes",
						"{{volNameArr2}}0_renamed"
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "be35220f-5b76-441a-890e-d50623f73de5",
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Volume updated...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json(); \r",
							"console.log(jsonData.result.status.description)\r",
							"pm.test(\"Verify Json values\", function () { \r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"Success\"); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr1}}0\", \"array\": \"{{arrayName1}}\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volume/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volume",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount vol_arr2_0 in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7f0de89-4a7e-4e61-a90c-ecec139e1b38",
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Volume updated...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json(); \r",
							"console.log(jsonData.result.status.description)\r",
							"pm.test(\"Verify Json values\", function () { \r",
							"    pm.expect(jsonData.result.status.description).is.to.equal(\"Success\"); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr2}}0\", \"array\": \"{{arrayName2}}\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volume/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volume",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "mount vol_arr1_0 in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "04c297fb-bd5c-4373-a9c6-bc8589e002f2",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr1}}0\", \"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volume/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volume",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "mount vol_arr2_0 in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "714e4cab-51c3-47e8-a203-a4fb198d0bd4",
						"exec": [
							"pm.test(\"Response code \", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"try {\r",
							"    response = jsonData.result.status.description\r",
							"}\r",
							"catch (err) {\r",
							"    pm.test(\"FAIL: \", () => { throw new Error(\"Exception in parsing response\") });\r",
							"}\r",
							"\r",
							"pm.test(\"DAgent reponse is...\"+response, function () {\r",
							"       pm.expect(response).is.to.equal(\"Success\");\r",
							"    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"{{volNameArr2}}0\", \"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/volume/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"volume",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Volume in 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7cbc4d21-0b13-4b38-93bc-631cd44e4656",
						"exec": [
							"pm.test(\"Delete volume successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volumes\": [{\"name\": \"{{volNameArr1}}0\", \"isMounted\": true}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/delete_volumes/{{arrayName1}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"delete_volumes",
						"{{arrayName1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Volume in 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "051216cd-5c00-4faa-9b9f-cc9215564b0e",
						"exec": [
							"pm.test(\"Delete volume successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volumes\": [{\"name\": \"{{volNameArr2}}0\", \"isMounted\": true}]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/delete_volumes/{{arrayName2}}",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"delete_volumes",
						"{{arrayName2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get get_all_volumes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "351649c7-b4d9-471b-8db0-b1f007153d39",
						"exec": [
							"pm.test(\"Get Volume data is successful...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "561afe39-fde3-4627-bd3e-072d541c3837",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/get_all_volumes/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"get_all_volumes",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "867f0d47-ed7e-45e1-b99e-96be257cdfde",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "unmount 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ffd45050-8399-4624-b518-ea8c97be9d3b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "mount 1st array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63868d40-edc5-4c03-a92a-cd3effd9a2f1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName1}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "mount 2nd array",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9a7c9ef-1bc3-4572-b417-5b8ff819fd3e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-access-token",
						"type": "text",
						"value": "{{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"array\": \"{{arrayName2}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1/array/mount",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1",
						"array",
						"mount"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f34a39f-be07-45e7-97dc-75ce2f84d3b4",
						"exec": [
							"// save the response into a local variable so that we can access it later in the script\r",
							"let response = pm.response.json();\r",
							"\r",
							"// retrieve the token value from the response\r",
							"let token =  response[\"token\"];\r",
							"\r",
							"// save the token value to variables so that it can used in subsequent APIs\r",
							"pm.variables.set('token', '');\r",
							"\r",
							"pm.test(\"Logout complete...\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin\",\"password\":\"admin\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{host}}:{{port}}/api/v1.0/login/",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"v1.0",
						"login",
						""
					]
				},
				"description": "login to MTool"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8a6b2c39-1a74-4418-a3e0-a5728908477f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a8af6f26-cdda-4d09-879b-336fcfe62660",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}