d3ef70d92354d46a22d3e1fc75b1db7d
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

require("react-dropdown/style.css");

var _Tooltip = _interopRequireDefault(require("@material-ui/core/Tooltip"));

var _styles = require("@material-ui/core/styles");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _core = require("@material-ui/core");

var _formatBytes = _interopRequireDefault(require("../../../utils/format-bytes"));

var _Dialog = _interopRequireDefault(require("../../Dialog"));

var _DiskDetails = _interopRequireDefault(require("../../DiskDetails"));

require("../ArrayCreate/ArrayCreate.css");

var _theme = require("../../../theme");

var _Legend = _interopRequireDefault(require("../../Legend"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/ArrayManagement/ArrayShow/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => ({
  root: {
    display: 'flex',
    flexWrap: 'wrap',
    width: '100%',
    padding: theme.spacing(0, 3),
    [theme.breakpoints.down('sm')]: {
      padding: theme.spacing(0, 1)
    }
  },
  tooltip: {
    backgroundColor: '#f5f5f9',
    opacity: 1,
    color: 'rgba(0, 0, 0, 1)',
    maxWidth: 220,
    fontSize: theme.typography.pxToRem(12),
    border: '1px solid #dadde9',
    '& b': {
      fontWeight: theme.typography.fontWeightMedium
    }
  },
  formControl: {
    margin: theme.spacing(0.5, 2),
    minWidth: 170,
    [theme.breakpoints.down('xs')]: {
      margin: theme.spacing(1, 0)
    }
  },
  gridList: {
    flexWrap: 'nowrap',
    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.
    transform: 'translateZ(0)',
    flexGrow: 1,
    padding: theme.spacing(1, 0)
  },
  gridTile: {
    width: 200,
    minWidth: 35,
    border: '2px solid lightgray',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
    flexDirection: 'column',
    '&>div': {
      height: 'auto'
    }
  },
  gridTileDisabled: {
    backgroundColor: '#e2e1e1'
  },
  diskGridContainer: {
    width: '100%',
    overflowX: 'auto',
    [theme.breakpoints.down('xs')]: {
      width: 'calc(100% - 32px)'
    }
  },
  diskContainer: {
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-around',
    overflow: 'hidden',
    backgroundColor: theme.palette.background.paper,
    padding: theme.spacing(2, 2, 0, 2),
    minWidth: 800
  },
  legendButtonGrid: {
    marginBottom: theme.spacing(1)
  },
  legendContainer: {
    padding: theme.spacing(0, 2)
  },
  buttonContainer: {
    justifyContent: 'flex-end',
    padding: theme.spacing(0, 2),
    marginTop: theme.spacing(0.5),
    [theme.breakpoints.down('xs')]: {
      justifyContent: 'center'
    }
  },
  button: {
    height: '1.8rem',
    lineHeight: '0px'
  },
  legendItem: {
    display: 'flex',
    alignItems: 'center',
    marginTop: theme.spacing(0.5)
  },
  inputGrid: {
    [theme.breakpoints.down('xs')]: {
      display: 'flex',
      justifyContent: 'center'
    }
  },
  storagedisk: {
    backgroundColor: 'rgb(236,219,87)',
    cursor: 'default'
  },
  writebufferdisk: {
    backgroundColor: 'rgb(232,114,114)',
    cursor: 'default'
  },
  sparedisk: {
    backgroundColor: '#339EFF',
    cursor: 'default'
  },
  freedisk: {
    backgroundColor: 'rgb(137,163,196)',
    cursor: 'default'
  },
  partOfArray: {
    backgroundColor: 'rgb(236, 219, 87)'
  },
  notSelectedShow: {
    backgroundColor: 'rgb(137, 163, 196)'
  },
  corrupted: {
    backgroundColor: 'rgb(232, 114, 114)'
  },
  detachBtn: {
    bottom: '-3px',
    width: '80%',
    position: 'absolute',
    fontSize: '0.6rem'
  },
  diskNo: {
    position: 'absolute'
  }
});

const defaultDiskDetails = {
  DevicePath: 'NA',
  SerialNumber: 'NA',
  Model: 'NA',
  PhysicalSize: 'NA',
  UsedBytes: 'NA',
  Firmware: 'NA',
  critical_warning: 'NA',
  temperature: 'NA',
  avail_spare: 'NA',
  spare_thresh: 'NA',
  precent_used: 'NA',
  data_units_read: 'NA',
  data_units_written: 'NA',
  critical_comp_time: 'NA',
  warning_temp_time: 'NA',
  percent_used: 'NA'
};

const findDisk = diskName => {
  return d => {
    return d.deviceName === diskName;
  };
};

class ArrayShow extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      open: false,
      diskDetails: _objectSpread({}, defaultDiskDetails),
      popupOpen: false,
      messageDescription: '',
      messageOpen: '',
      messageTitle: '',
      selectedSlot: null,
      onConfirm: null
    };
    this.handleClick = this.handleClick.bind(this);
    this.handleClose = this.handleClose.bind(this);
    this.showPopup = this.showPopup.bind(this);
    this.closePopup = this.closePopup.bind(this);
    this.deleteArray = this.deleteArray.bind(this);
    this.getDiskDetails = this.getDiskDetails.bind(this);
    this.attachDisk = this.attachDisk.bind(this);
    this.detachDisk = this.detachDisk.bind(this);
    this.addSpareDisk = this.addSpareDisk.bind(this);
    this.removeSpareDisk = this.removeSpareDisk.bind(this);
  }

  getDiskDetails(name) {
    this.props.getDiskDetails({
      name
    });
  }

  handleClick(event) {
    event.preventDefault();
    this.setState({
      open: true
    });
  }

  handleClose() {
    this.setState({
      open: false,
      popupOpen: false,
      messageOpen: false,
      diskDetails: _objectSpread({}, defaultDiskDetails)
    });
  }

  showPopup(name) {
    this.getDiskDetails(name);
    this.setState(_objectSpread({}, this.state, {
      popupOpen: true
    }));
  }

  closePopup() {
    this.setState(_objectSpread({}, this.state, {
      popupOpen: false
    }));
  }

  deleteArray() {
    this.setState({
      open: false
    });
    this.props.deleteArray();
  }

  attachDisk(slot) {
    this.setState({
      selectedSlot: slot,
      messageOpen: true,
      messageDescription: 'Are you sure you want to Attach Disk?',
      messageTitle: 'Attach Disk',
      onConfirm: () => {
        this.props.attachDisk(this.state.selectedSlot);
        this.setState({
          messageOpen: false
        });
      }
    });
  }

  addSpareDisk(slot) {
    this.setState({
      selectedSlot: slot,
      messageOpen: true,
      messageDescription: 'Are you sure you want to Add the Disk?',
      messageTitle: 'Add Spare Disk',
      onConfirm: () => {
        this.props.addSpareDisk(this.state.selectedSlot);
        this.setState({
          messageOpen: false
        });
      }
    });
  }

  detachDisk(slot) {
    this.setState({
      selectedSlot: slot,
      messageOpen: true,
      messageDescription: 'Are you sure you want to Detach Disk?',
      messageTitle: 'Detach Disk',
      onConfirm: () => {
        this.props.detachDisk(this.state.selectedSlot);
        this.setState({
          messageOpen: false
        });
      }
    });
  }

  removeSpareDisk(slot) {
    this.setState({
      selectedSlot: slot,
      messageOpen: true,
      messageDescription: 'Are you sure you want to Remove the Disk?',
      messageTitle: 'Remove Spare Disk',
      onConfirm: () => {
        this.props.removeSpareDisk(this.state.selectedSlot);
        this.setState({
          messageOpen: false
        });
      }
    });
  }

  render() {
    const classes = this.props.classes;
    const freeSlots = [];

    if (this.props.slots) {
      for (let i = this.props.slots.length; i < 32; i += 1) {
        freeSlots.push(_react.default.createElement(_core.Grid, {
          className: `${classes.gridTile} ${classes.gridTileDisabled}`,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 344
          },
          __self: this
        }, _react.default.createElement(_core.Typography, {
          color: "secondary",
          className: classes.diskNo,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 345
          },
          __self: this
        }, i + 1)));
      }
    }

    const getClass = disk => {
      if (this.props.storagedisks.find(findDisk(disk.name))) {
        return classes.storagedisk;
      } // Required only if Buffer disks can be one of the Nvme disk
      // if (this.props.writebufferdisks.find(findDisk(disk.name))) {
      //   return classes.writebufferdisk;
      // }


      if (this.props.sparedisks.find(findDisk(disk.name))) {
        return classes.sparedisk;
      }

      return classes.freedisk;
    };

    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 364
      },
      __self: this
    }, _react.default.createElement("form", {
      className: classes.root,
      "data-testid": "arrayshow",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 365
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      sm: 6,
      className: classes.inputGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 366
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 367
      },
      __self: this
    }, _react.default.createElement(_core.InputLabel, {
      htmlFor: "raid",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 368
      },
      __self: this
    }, "Fault tolerance Level"), _react.default.createElement(_core.Select, {
      value: this.props.RAIDLevel,
      inputProps: {
        name: 'Fault Tolerance Type',
        id: 'raid'
      },
      disabled: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 369
      },
      __self: this
    }, _react.default.createElement(_core.MenuItem, {
      value: this.props.RAIDLevel,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 377
      },
      __self: this
    }, "RAID ", this.props.RAIDLevel)))), _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      sm: 6,
      className: classes.inputGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 381
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 382
      },
      __self: this
    }, _react.default.createElement(_core.InputLabel, {
      htmlFor: "writebuffer",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 383
      },
      __self: this
    }, "Write Buffer Path"), _react.default.createElement(_core.Select, {
      value: this.props.metadiskpath[0].deviceName,
      inputProps: {
        name: 'Write Buffer Path',
        id: 'writebuffer'
      },
      disabled: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 384
      },
      __self: this
    }, _react.default.createElement(_core.MenuItem, {
      value: this.props.metadiskpath[0].deviceName,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 392
      },
      __self: this
    }, this.props.metadiskpath[0].deviceName)))), _react.default.createElement("div", {
      className: classes.diskGridContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 396
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      className: classes.diskContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 397
      },
      __self: this
    }, _react.default.createElement(_core.GridList, {
      cellHeight: 110,
      className: classes.gridList,
      cols: 32,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 398
      },
      __self: this
    }, this.props.slots ? this.props.slots.map((slot, index) => {
      return _react.default.createElement(_Tooltip.default, {
        classes: {
          tooltip: classes.tooltip
        },
        title: _react.default.createElement(_react.default.Fragment, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 407
          },
          __self: this
        }, _react.default.createElement("div", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 408
          },
          __self: this
        }, "Name:", slot.name), _react.default.createElement("div", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 412
          },
          __self: this
        }, "Size:", (0, _formatBytes.default)(slot.size * 4 * 1024)), _react.default.createElement("div", {
          onClick: () => this.showPopup(slot.name),
          "aria-hidden": "true",
          style: {
            cursor: 'pointer',
            textAlign: 'right',
            margin: '10px'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 416
          },
          __self: this
        }, _react.default.createElement("u", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 425
          },
          __self: this
        }, "More Details"))),
        interactive: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 402
        },
        __self: this
      }, _react.default.createElement(_core.Grid, {
        className: `${classes.gridTile} ${getClass(slot)}`,
        id: index,
        "data-testid": `diskshow-${index}`,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 431
        },
        __self: this
      }, _react.default.createElement(_core.Typography, {
        color: "secondary",
        className: classes.diskNo,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 436
        },
        __self: this
      }, index + 1), getClass(slot) === classes.freedisk ? _react.default.createElement(_core.Button, {
        className: classes.detachBtn,
        "data-testid": `attachdisk-${index}`,
        onClick: () => this.addSpareDisk(slot),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 438
        },
        __self: this
      }, "Add Spare Disk") : getClass(slot) === classes.sparedisk ? _react.default.createElement(_core.Button, {
        className: classes.detachBtn,
        "data-testid": `detachdisk-${index}`,
        onClick: () => this.removeSpareDisk(slot),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 447
        },
        __self: this
      }, "Remove Spare Disk") : null));
    }) : null, freeSlots))), _react.default.createElement(_core.Grid, {
      container: true,
      xs: 12,
      className: classes.legendButtonGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 481
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      sm: 8,
      xs: 12,
      wrap: "wrap",
      className: classes.legendContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 482
      },
      __self: this
    }, _react.default.createElement(_Legend.default, {
      bgColor: "rgba(236, 219, 87,0.6)",
      title: "Storage disk",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 483
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "rgba(51, 158, 255, 0.6)",
      title: "Spare disk",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 484
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "rgba(137, 163, 196, 0.6)",
      title: "Not Selected",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 485
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "rgba(226, 225, 225, 0.6)",
      title: "Empty Slot",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 486
      },
      __self: this
    })), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      sm: 4,
      xs: 12,
      className: classes.buttonContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 488
      },
      __self: this
    }, _react.default.createElement(_core.Button, {
      onClick: this.handleClick,
      variant: "contained",
      color: "primary",
      className: classes.button,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 489
      },
      __self: this
    }, "Delete Array"))), _react.default.createElement(_Dialog.default, {
      title: "Delete Array",
      description: "Are you sure you want to delete?",
      open: this.state.open,
      handleClose: this.handleClose,
      onConfirm: this.deleteArray,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 499
      },
      __self: this
    }), _react.default.createElement(_Dialog.default, {
      title: this.state.messageTitle,
      description: this.state.messageDescription,
      open: this.state.messageOpen,
      handleClose: this.handleClose,
      onConfirm: this.state.onConfirm,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 506
      },
      __self: this
    }), _react.default.createElement(_DiskDetails.default, {
      title: "Disk Details",
      details: this.props.diskDetails,
      open: this.state.popupOpen,
      onConfirm: this.closePopup,
      note_msg: "Note: Currently SPDK NVME cli cannot retrieve disk details while iBoF is running. Details will be displayed at a later stage.",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 513
      },
      __self: this
    })));
  }

}

var _default = (0, _styles.withStyles)(styles)(ArrayShow);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,