12be25a5b7489591c6671659ec63ec01
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchPowerSummary = fetchPowerSummary;
exports.setCurrentPowerMode = setCurrentPowerMode;
exports.changeCurrentPowerState = changeCurrentPowerState;
exports.hardwarePowerManagementWatcher = hardwarePowerManagementWatcher;

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

var _hardwareOverviewSaga = require("./hardwareOverviewSaga");

/* -------------------------------------------------------------------------------------/
                                                                                    /
/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /
/                          ALL RIGHTS RESERVED                                        /
/                                                                                     /
/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /
/   products to use or abstract this computer program for the sole purpose of         /
/   implementing a product based on Samsung Electronics Co., Ltd. products.           /
/   No other rights to reproduce, use, or disseminate this computer program,          /
/   whether in part or in whole, are granted.                                         / 
/                                                                                     /
/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /
/   respect to the performance of this computer program, and specifically disclaims   /
/   any responsibility for any damages, special or consequential, connected           /
/   with the use of this program.                                                     /
/                                                                                     /
/-------------------------------------------------------------------------------------/

DESCRIPTION: <Contains Generator Functions for hardware container> *
@NAME : hardwarePowerManagementSaga.js
@AUTHORS: Jay Sanghavi 
@Version : 1.0 *
@REVISION HISTORY
[03/11/2019] [Jay] : Prototyping..........////////////////////
*/
function* fetchPowerSummary() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_power_summary/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchPowerSummary(result)); // Get Current Power Mode

      if (result.currentpowermode && result.currentpowermode === "Manual") yield (0, _hardwareOverviewSaga.fetchChassisFrontInfo)();
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.fetchPowerSummary({}));
  } finally {
    ;
  }
}

function* setCurrentPowerMode(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/set_current_power_mode/', action.param, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield (0, _effects.put)(actionCreators.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        alerttitle: 'Power Mode',
        alertdescription: 'Power Mode Changed Successfully'
      }));
    } else if (response === 400) yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Power Mode',
      alertdescription: "Couldn't Change Power Mode"
    }));else yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Power Mode',
      alertdescription: "Couldn't Change Power Mode"
    }));

    yield fetchPowerSummary();
  } catch (error) {
    ;
  }
}

function* changeCurrentPowerState(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/update_current_power_state/', action.param, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield (0, _effects.put)(actionCreators.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        alerttitle: 'Power State',
        alertdescription: 'Power State Change is in progress. The table should automatically update the new power state after sometime'
      }));
    } else if (response === 400) yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Power State',
      alertdescription: "Couldn't Change Power State"
    }));else yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Power State',
      alertdescription: "Couldn't Change Power State"
    })); // (yield fetchChassisFrontInfo());


    setTimeout((yield (0, _hardwareOverviewSaga.fetchChassisFrontInfo)()), 2500);
    setTimeout((yield (0, _hardwareOverviewSaga.fetchChassisFrontInfo)()), 2500);
  } catch (error) {
    yield (0, _hardwareOverviewSaga.fetchChassisFrontInfo)();
    yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Power State',
      alertdescription: "Couldn't Change Power State"
    }));
  }
}

function* hardwarePowerManagementWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_FETCH_POWER_SUMMARY_INFORMATION, fetchPowerSummary);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_SET_CURRENT_POWER_MODE, setCurrentPowerMode);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_CHANGE_CURRENT_POWER_STATE, changeCurrentPowerState);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,