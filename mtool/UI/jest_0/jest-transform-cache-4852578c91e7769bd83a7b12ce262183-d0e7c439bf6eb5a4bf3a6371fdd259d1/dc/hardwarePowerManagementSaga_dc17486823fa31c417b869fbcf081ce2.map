{"version":3,"sources":["hardwarePowerManagementSaga.js"],"names":["fetchPowerSummary","response","axios","get","headers","Accept","localStorage","getItem","result","data","actionCreators","currentpowermode","error","setCurrentPowerMode","action","post","param","status","openAlertBox","alertOpen","istypealert","alerttype","alerttitle","alertdescription","changeCurrentPowerState","setTimeout","hardwarePowerManagementWatcher","actionTypes","SAGA_HARDWARE_POWER_MANAGEMENT_FETCH_POWER_SUMMARY_INFORMATION","SAGA_HARDWARE_POWER_MANAGEMENT_SET_CURRENT_POWER_MODE","SAGA_HARDWARE_POWER_MANAGEMENT_CHANGE_CURRENT_POWER_STATE"],"mappings":"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\nDESCRIPTION: <Contains Generator Functions for hardware container> *\n@NAME : hardwarePowerManagementSaga.js\n@AUTHORS: Jay Sanghavi \n@Version : 1.0 *\n@REVISION HISTORY\n[03/11/2019] [Jay] : Prototyping..........////////////////////\n*/\n\nimport axios from 'axios';\nimport { call, takeEvery, put } from 'redux-saga/effects';\nimport * as actionTypes from '../store/actions/actionTypes';\nimport * as actionCreators from '../store/actions/exportActionCreators';\nimport {fetchChassisFrontInfo} from './hardwareOverviewSaga'\n\nexport function* fetchPowerSummary() {\n    try {\n        const response = yield call([axios, axios.get], '/api/v1.0/get_power_summary/', {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            }\n        });\n\n        const result = response.data;\n        if (result) {\n            yield put(actionCreators.fetchPowerSummary(result)); // Get Current Power Mode\n            if(result.currentpowermode && result.currentpowermode === \"Manual\")\n                yield fetchChassisFrontInfo();\n        }\n    } catch (error) {\n        yield put(actionCreators.fetchPowerSummary({}));\n    }\n    finally {\n        ;\n    }\n}\n\n\nexport function* setCurrentPowerMode(action) {\n    try {\n        const response = yield call([axios, axios.post], '/api/v1.0/set_current_power_mode/', action.param, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            },\n        });\n\n        const { status } = response;\n        if (status === 200) {\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'info',\n                alerttitle: 'Power Mode',\n                alertdescription: 'Power Mode Changed Successfully',\n            }));\n        }\n        else if (response === 400)\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                alerttitle: 'Power Mode',\n                alertdescription: \"Couldn't Change Power Mode\",\n            }));\n        else\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                alerttitle: 'Power Mode',\n                alertdescription: \"Couldn't Change Power Mode\",\n            }));\n            yield fetchPowerSummary();\n    }\n    catch (error) {\n        ;\n    }\n}\n\n\nexport function* changeCurrentPowerState(action) {\n    try {\n        const response = yield call([axios, axios.post], '/api/v1.0/update_current_power_state/', action.param, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            },\n        });\n\n        const { status } = response;\n        if (status === 200) {\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'info',\n                alerttitle: 'Power State',\n                alertdescription: 'Power State Change is in progress. The table should automatically update the new power state after sometime',\n            }));\n        }\n        else if (response === 400)\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                alerttitle: 'Power State',\n                alertdescription: \"Couldn't Change Power State\",\n            }));\n        else\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                alerttitle: 'Power State',\n                alertdescription: \"Couldn't Change Power State\",\n            }));\n            // (yield fetchChassisFrontInfo());\n            setTimeout(yield fetchChassisFrontInfo(),2500);\n            setTimeout(yield fetchChassisFrontInfo(),2500);\n    }\n    catch (error) {\n        yield fetchChassisFrontInfo();\n        yield put(actionCreators.openAlertBox({\n            alertOpen: true,\n            istypealert: true,\n            alerttype: 'alert',\n            alerttitle: 'Power State',\n            alertdescription: \"Couldn't Change Power State\",\n        }));\n    }\n}\n\nexport function* hardwarePowerManagementWatcher() {\n    yield takeEvery(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_FETCH_POWER_SUMMARY_INFORMATION, fetchPowerSummary);\n    yield takeEvery(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_SET_CURRENT_POWER_MODE, setCurrentPowerMode);\n    yield takeEvery(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_CHANGE_CURRENT_POWER_STATE,changeCurrentPowerState);\n}\n"]}