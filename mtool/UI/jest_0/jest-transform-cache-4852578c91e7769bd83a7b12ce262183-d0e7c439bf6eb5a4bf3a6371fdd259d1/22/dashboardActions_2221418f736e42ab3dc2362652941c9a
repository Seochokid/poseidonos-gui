045a78bed90ede616110b1ad965c30de
/* istanbul ignore next */
"use strict";

var cov_1xgjyqzzrp = function () {
  var path = "/home/ibof07/pk/ibofmgmt/Code/UI/src/store/actions/dashboardActions.js";
  var hash = "596bd9a7f0dfac75eee2825c0272f3dd8b08a192";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ibof07/pk/ibofmgmt/Code/UI/src/store/actions/dashboardActions.js",
    statementMap: {
      "0": {
        start: {
          line: 29,
          column: 36
        },
        end: {
          line: 34,
          column: 1
        }
      },
      "1": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 33,
          column: 4
        }
      },
      "2": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 40,
          column: 1
        }
      },
      "3": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 39,
          column: 4
        }
      },
      "4": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 47,
          column: 1
        }
      },
      "5": {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 46,
          column: 4
        }
      },
      "6": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 56,
          column: 1
        }
      },
      "7": {
        start: {
          line: 50,
          column: 2
        },
        end: {
          line: 55,
          column: 4
        }
      },
      "8": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 66,
          column: 1
        }
      },
      "9": {
        start: {
          line: 59,
          column: 2
        },
        end: {
          line: 65,
          column: 4
        }
      },
      "10": {
        start: {
          line: 68,
          column: 29
        },
        end: {
          line: 75,
          column: 1
        }
      },
      "11": {
        start: {
          line: 69,
          column: 2
        },
        end: {
          line: 74,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 29,
            column: 36
          },
          end: {
            line: 29,
            column: 37
          }
        },
        loc: {
          start: {
            line: 29,
            column: 44
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 29
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 35,
            column: 28
          },
          end: {
            line: 35,
            column: 29
          }
        },
        loc: {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 35
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 42,
            column: 27
          },
          end: {
            line: 42,
            column: 28
          }
        },
        loc: {
          start: {
            line: 42,
            column: 37
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 42
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 49,
            column: 32
          },
          end: {
            line: 49,
            column: 33
          }
        },
        loc: {
          start: {
            line: 49,
            column: 61
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 49
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 58,
            column: 28
          },
          end: {
            line: 58,
            column: 29
          }
        },
        loc: {
          start: {
            line: 58,
            column: 70
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 58
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 68,
            column: 29
          },
          end: {
            line: 68,
            column: 30
          }
        },
        loc: {
          start: {
            line: 68,
            column: 48
          },
          end: {
            line: 75,
            column: 1
          }
        },
        line: 68
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {},
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "596bd9a7f0dfac75eee2825c0272f3dd8b08a192"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchIpAndMac = exports.fetchStorage = exports.fetchPerformance = exports.fetchAlerts = exports.fetchVolumes = exports.enableFetchingAlerts = void 0;

var
/* istanbul ignore next */
actionTypes = _interopRequireWildcard(require("./actionTypes"));

/* istanbul ignore next */
cov_1xgjyqzzrp.s[0]++;

const enableFetchingAlerts = flag => {
  /* istanbul ignore next */
  cov_1xgjyqzzrp.f[0]++;
  cov_1xgjyqzzrp.s[1]++;
  return {
    type: actionTypes.ENABLE_FETCHING_ALERTS,
    fetchingAlerts: flag
  };
};

/* istanbul ignore next */
exports.enableFetchingAlerts = enableFetchingAlerts;
cov_1xgjyqzzrp.s[2]++;

const fetchVolumes = volumes => {
  /* istanbul ignore next */
  cov_1xgjyqzzrp.f[1]++;
  cov_1xgjyqzzrp.s[3]++;
  return {
    type: actionTypes.FETCH_VOLUME_INFO,
    volumes
  };
};

/* istanbul ignore next */
exports.fetchVolumes = fetchVolumes;
cov_1xgjyqzzrp.s[4]++;

const fetchAlerts = alerts => {
  /* istanbul ignore next */
  cov_1xgjyqzzrp.f[2]++;
  cov_1xgjyqzzrp.s[5]++;
  return {
    type: actionTypes.FETCH_ALERTS_INFO,
    alerts
  };
};

/* istanbul ignore next */
exports.fetchAlerts = fetchAlerts;
cov_1xgjyqzzrp.s[6]++;

const fetchPerformance = (readiops, writeiops, bw) => {
  /* istanbul ignore next */
  cov_1xgjyqzzrp.f[3]++;
  cov_1xgjyqzzrp.s[7]++;
  return {
    type: actionTypes.FETCH_PERFORMANCE_INFO,
    read_iops: readiops,
    write_iops: writeiops,
    bw
  };
};

/* istanbul ignore next */
exports.fetchPerformance = fetchPerformance;
cov_1xgjyqzzrp.s[8]++;

const fetchStorage = (unusedSpace, used, unused, arraySize) => {
  /* istanbul ignore next */
  cov_1xgjyqzzrp.f[4]++;
  cov_1xgjyqzzrp.s[9]++;
  return {
    type: actionTypes.FETCH_STORAGE_INFO,
    unusedSpace,
    used,
    unused,
    arraySize
  };
};

/* istanbul ignore next */
exports.fetchStorage = fetchStorage;
cov_1xgjyqzzrp.s[10]++;

const fetchIpAndMac = (ip, mac, host) => {
  /* istanbul ignore next */
  cov_1xgjyqzzrp.f[5]++;
  cov_1xgjyqzzrp.s[11]++;
  return {
    type: actionTypes.FETCH_IPANDMAC_INFO,
    ip,
    mac,
    host
  };
};

/* istanbul ignore next */
exports.fetchIpAndMac = fetchIpAndMac;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhc2hib2FyZEFjdGlvbnMuanMiXSwibmFtZXMiOlsiZW5hYmxlRmV0Y2hpbmdBbGVydHMiLCJmbGFnIiwidHlwZSIsImFjdGlvblR5cGVzIiwiRU5BQkxFX0ZFVENISU5HX0FMRVJUUyIsImZldGNoaW5nQWxlcnRzIiwiZmV0Y2hWb2x1bWVzIiwidm9sdW1lcyIsIkZFVENIX1ZPTFVNRV9JTkZPIiwiZmV0Y2hBbGVydHMiLCJhbGVydHMiLCJGRVRDSF9BTEVSVFNfSU5GTyIsImZldGNoUGVyZm9ybWFuY2UiLCJyZWFkaW9wcyIsIndyaXRlaW9wcyIsImJ3IiwiRkVUQ0hfUEVSRk9STUFOQ0VfSU5GTyIsInJlYWRfaW9wcyIsIndyaXRlX2lvcHMiLCJmZXRjaFN0b3JhZ2UiLCJ1bnVzZWRTcGFjZSIsInVzZWQiLCJ1bnVzZWQiLCJhcnJheVNpemUiLCJGRVRDSF9TVE9SQUdFX0lORk8iLCJmZXRjaElwQW5kTWFjIiwiaXAiLCJtYWMiLCJob3N0IiwiRkVUQ0hfSVBBTkRNQUNfSU5GTyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBO0FBQUE7QUFBQTs7Ozs7QUFFTyxNQUFNQSxvQkFBb0IsR0FBR0MsSUFBSSxJQUFJO0FBQUE7QUFBQTtBQUFBO0FBQzFDLFNBQU87QUFDTEMsSUFBQUEsSUFBSSxFQUFFQyxXQUFXLENBQUNDLHNCQURiO0FBRUxDLElBQUFBLGNBQWMsRUFBRUo7QUFGWCxHQUFQO0FBSUQsQ0FMTTs7Ozs7O0FBTUEsTUFBTUssWUFBWSxHQUFHQyxPQUFPLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFDckMsU0FBTztBQUNMTCxJQUFBQSxJQUFJLEVBQUVDLFdBQVcsQ0FBQ0ssaUJBRGI7QUFFTEQsSUFBQUE7QUFGSyxHQUFQO0FBSUQsQ0FMTTs7Ozs7O0FBT0EsTUFBTUUsV0FBVyxHQUFHQyxNQUFNLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFDbkMsU0FBTztBQUNMUixJQUFBQSxJQUFJLEVBQUVDLFdBQVcsQ0FBQ1EsaUJBRGI7QUFFTEQsSUFBQUE7QUFGSyxHQUFQO0FBSUQsQ0FMTTs7Ozs7O0FBT0EsTUFBTUUsZ0JBQWdCLEdBQUcsQ0FBQ0MsUUFBRCxFQUFXQyxTQUFYLEVBQXNCQyxFQUF0QixLQUE2QjtBQUFBO0FBQUE7QUFBQTtBQUMzRCxTQUFPO0FBQ0xiLElBQUFBLElBQUksRUFBRUMsV0FBVyxDQUFDYSxzQkFEYjtBQUVMQyxJQUFBQSxTQUFTLEVBQUVKLFFBRk47QUFHTEssSUFBQUEsVUFBVSxFQUFFSixTQUhQO0FBSUxDLElBQUFBO0FBSkssR0FBUDtBQU1ELENBUE07Ozs7OztBQVNBLE1BQU1JLFlBQVksR0FBRyxDQUFDQyxXQUFELEVBQWNDLElBQWQsRUFBb0JDLE1BQXBCLEVBQTRCQyxTQUE1QixLQUEwQztBQUFBO0FBQUE7QUFBQTtBQUNwRSxTQUFPO0FBQ0xyQixJQUFBQSxJQUFJLEVBQUVDLFdBQVcsQ0FBQ3FCLGtCQURiO0FBRUxKLElBQUFBLFdBRks7QUFHTEMsSUFBQUEsSUFISztBQUlMQyxJQUFBQSxNQUpLO0FBS0xDLElBQUFBO0FBTEssR0FBUDtBQU9ELENBUk07Ozs7OztBQVVBLE1BQU1FLGFBQWEsR0FBRyxDQUFDQyxFQUFELEVBQUtDLEdBQUwsRUFBVUMsSUFBVixLQUFtQjtBQUFBO0FBQUE7QUFBQTtBQUM5QyxTQUFPO0FBQ0wxQixJQUFBQSxJQUFJLEVBQUVDLFdBQVcsQ0FBQzBCLG1CQURiO0FBRUxILElBQUFBLEVBRks7QUFHTEMsSUFBQUEsR0FISztBQUlMQyxJQUFBQTtBQUpLLEdBQVA7QUFNRCxDQVBNIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICBDT1BZUklHSFQgKGMpIDIwMTkgU0FNU1VORyBFTEVDVFJPTklDUyBDTy4sIExURC4gICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgQUxMIFJJR0hUUyBSRVNFUlZFRCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkIHRvIGxpY2Vuc2VlcyBvZiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiAgICAgICAgL1xuLyAgIHByb2R1Y3RzIHRvIHVzZSBvciBhYnN0cmFjdCB0aGlzIGNvbXB1dGVyIHByb2dyYW0gZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgICAgICAgICAvXG4vICAgaW1wbGVtZW50aW5nIGEgcHJvZHVjdCBiYXNlZCBvbiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBwcm9kdWN0cy4gICAgICAgICAgIC9cbi8gICBObyBvdGhlciByaWdodHMgdG8gcmVwcm9kdWNlLCB1c2UsIG9yIGRpc3NlbWluYXRlIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgICAgICAgICAgL1xuLyAgIHdoZXRoZXIgaW4gcGFydCBvciBpbiB3aG9sZSwgYXJlIGdyYW50ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIFxuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gbWFrZXMgbm8gcmVwcmVzZW50YXRpb24gb3Igd2FycmFudGllcyB3aXRoICAgICAgICAgIC9cbi8gICByZXNwZWN0IHRvIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIGNvbXB1dGVyIHByb2dyYW0sIGFuZCBzcGVjaWZpY2FsbHkgZGlzY2xhaW1zICAgL1xuLyAgIGFueSByZXNwb25zaWJpbGl0eSBmb3IgYW55IGRhbWFnZXMsIHNwZWNpYWwgb3IgY29uc2VxdWVudGlhbCwgY29ubmVjdGVkICAgICAgICAgICAvXG4vICAgd2l0aCB0aGUgdXNlIG9mIHRoaXMgcHJvZ3JhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG5cblxuREVTQ1JJUFRJT046IDxDb250YWlucyBwdXJlIGFjdGlvbnMgZm9yIERhc2hib2FyZCBQYWdlPiAqXG5ATkFNRSA6IGRhc2hib2FyZEFjdGlvbnMuanNcbkBBVVRIT1JTOiBKYXkgSGl0ZXNoIFNhbmdoYXZpIFxuQFZlcnNpb24gOiAxLjAgKlxuQFJFVklTSU9OIEhJU1RPUllcblswMy8wNi8yMDE5XSBbSmF5XSA6IFByb3RvdHlwaW5nLi4uLi4uLi4uLi8vLy8vLy8vLy8vLy8vLy8vLy8vXG4qL1xuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSAnLi9hY3Rpb25UeXBlcyc7XG5cbmV4cG9ydCBjb25zdCBlbmFibGVGZXRjaGluZ0FsZXJ0cyA9IGZsYWcgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLkVOQUJMRV9GRVRDSElOR19BTEVSVFMsXG4gICAgZmV0Y2hpbmdBbGVydHM6IGZsYWcsXG4gIH07XG59O1xuZXhwb3J0IGNvbnN0IGZldGNoVm9sdW1lcyA9IHZvbHVtZXMgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX1ZPTFVNRV9JTkZPLFxuICAgIHZvbHVtZXMsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZmV0Y2hBbGVydHMgPSBhbGVydHMgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLkZFVENIX0FMRVJUU19JTkZPLFxuICAgIGFsZXJ0cyxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBmZXRjaFBlcmZvcm1hbmNlID0gKHJlYWRpb3BzLCB3cml0ZWlvcHMsIGJ3KSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogYWN0aW9uVHlwZXMuRkVUQ0hfUEVSRk9STUFOQ0VfSU5GTyxcbiAgICByZWFkX2lvcHM6IHJlYWRpb3BzLFxuICAgIHdyaXRlX2lvcHM6IHdyaXRlaW9wcyxcbiAgICBidyxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBmZXRjaFN0b3JhZ2UgPSAodW51c2VkU3BhY2UsIHVzZWQsIHVudXNlZCwgYXJyYXlTaXplKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogYWN0aW9uVHlwZXMuRkVUQ0hfU1RPUkFHRV9JTkZPLFxuICAgIHVudXNlZFNwYWNlLFxuICAgIHVzZWQsXG4gICAgdW51c2VkLFxuICAgIGFycmF5U2l6ZSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBmZXRjaElwQW5kTWFjID0gKGlwLCBtYWMsIGhvc3QpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBhY3Rpb25UeXBlcy5GRVRDSF9JUEFORE1BQ19JTkZPLFxuICAgIGlwLFxuICAgIG1hYyxcbiAgICBob3N0LFxuICB9O1xufTtcbiJdfQ==