04a4bf144281b4e8f38c7119a54f44c5
"use strict";

/* eslint-disable import/imports-first */

/* eslint-disable import/first */
jest.unmock('axios');

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _axios = _interopRequireDefault(require("axios"));

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _react2 = require("@testing-library/react");

var _history = require("history");

require("@testing-library/jest-dom/extend-expect");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _testUtils = require("react-dom/test-utils");

var _index = _interopRequireDefault(require("./index"));

var _storageReducer = _interopRequireDefault(require("../../store/reducers/storageReducer"));

var _headerReducer = _interopRequireDefault(require("../../store/reducers/headerReducer"));

var _configurationsettingReducer = _interopRequireDefault(require("../../store/reducers/configurationsettingReducer"));

var _BMCAuthenticationReducer = _interopRequireDefault(require("../../store/reducers/BMCAuthenticationReducer"));

var _indexSaga = _interopRequireDefault(require("../../sagas/indexSaga"));

var _q = require("q");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Volume/index.test.js";
describe('<Storage Management />', () => {
  let wrapper;
  let mock;
  let history;
  let store;
  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      storageReducer: _storageReducer.default,
      headerReducer: _headerReducer.default,
      configurationsettingReducer: _configurationsettingReducer.default,
      BMCAuthenticationReducer: _BMCAuthenticationReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = '/';
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    });
    mock = new _axiosMockAdapter.default(_axios.default);
  });

  const renderComponent = () => {
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 49
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 50
      },
      __self: void 0
    }, _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 51
      },
      __self: void 0
    }))));
  };

  afterEach(_react2.cleanup);
  it("should render array create view", () => {
    mock.onGet('/*').reply(200, []).onAny().reply(200, []);
    mock.onGet(/api\/v1.0\/get_arrays\/*/).reply(200, []);
    renderComponent();
    const _wrapper = wrapper,
          getByTestId = _wrapper.getByTestId;
    expect(getByTestId('title')).toHaveTextContent('Array Management');
  });
  const devices = [{
    "name": "intel-unvmens-0",
    "size": 390703446,
    "mn": "SAMSUNG MZWLL1T6HAJQ-00005",
    "sn": "S4C9NF0M500037"
  }, {
    "name": "intel-unvmens-1",
    "size": 390703446,
    "mn": "SAMSUNG MZWLL1T6HAJQ-00005",
    "sn": "S4C9NF0M500027"
  }, {
    "name": "intel-unvmens-2",
    "size": 390703446,
    "mn": "SAMSUNG MZWLL1T6HAJQ-00005",
    "sn": "S4C9NF0M500044"
  }, {
    "name": "intel-unvmens-3",
    "size": 390703446,
    "mn": "SAMSUNG MZWLL1T6HAJQ-00005",
    "sn": "S4C9NF0M500031"
  }, {
    "name": "intel-unvmens-4",
    "size": 390703446,
    "mn": "SAMSUNG MZWLL1T6HAJQ-00005",
    "sn": "S4C9NF0M500041"
  }, {
    "name": "intel-unvmens-5",
    "size": 390703446,
    "mn": "SAMSUNG MZWLL1T6HAJQ-00005",
    "sn": "S4C9NF0M500042"
  }];
  const array = {
    "RAIDLevel": "5",
    "_id": "ibofArray",
    "metadiskpath": [{
      "deviceName": "uram0"
    }],
    "sparedisks": [{
      "deviceName": "intel-unvmens-3"
    }],
    "storagedisks": [{
      "deviceName": "intel-unvmens-0"
    }, {
      "deviceName": "intel-unvmens-1"
    }, {
      "deviceName": "intel-unvmens-2"
    }, {
      "deviceName": "intel-unvmens-4"
    }],
    "totalsize": 6357625339904,
    "usedspace": 0
  };
  it("should render array created view", async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1.0\/get_volumes\/*/).reply(200, []).onGet(/api\/v1.0\/max_volume_count\/*/).reply(200, 256).onGet(/api\/v1.0\/available_storage\/*/).reply(200, [{
      arraySize: 10
    }]).onPost(/api\/v1.0\/delete_array\/*/).reply(200, {}).onAny().reply(200, []);
    renderComponent();
    const _wrapper2 = wrapper,
          getByTestId = _wrapper2.getByTestId,
          asFragment = _wrapper2.asFragment;
    const resolvedThing = await (0, _react2.waitForElement)(() => getByTestId("arrayshow"));
    expect(resolvedThing).toBeDefined();
  });
  it("should render devices", async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices: [{
        name: 'intel-unvmens-0',
        size: 100
      }, {
        name: 'intel-unvmens-1',
        size: 100
      }],
      metadevices: ['uram0', 'uram1']
    }).onAny().reply(200, []);
    renderComponent();
    const _wrapper3 = wrapper,
          getByTestId = _wrapper3.getByTestId;
    await (0, _react2.waitForElement)(() => getByTestId("arraycreate"));
  });
  it('should render button on resize', () => {
    // Change the viewport to 500px.
    global.innerWidth = 500; // Trigger the window resize event.

    global.dispatchEvent(new Event('resize'));
    renderComponent();
    const _wrapper4 = wrapper,
          getByTestId = _wrapper4.getByTestId;
    expect(getByTestId("sidebar-toggle")).toBeDefined();

    _react2.fireEvent.click(getByTestId("sidebar-toggle"));

    expect(getByTestId("help-link")).toHaveTextContent("Help");
  });
  it('should create an array', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      metadevices: ['uram0', 'uram1']
    }).onPost('/api/v1.0/create_arrays/').reply(200, {}).onAny().reply(200, []);
    renderComponent();
    const _wrapper5 = wrapper,
          getByTestId = _wrapper5.getByTestId,
          getByText = _wrapper5.getByText,
          getAllByText = _wrapper5.getAllByText,
          asFragment = _wrapper5.asFragment;

    _react2.fireEvent.click(getByTestId('raid-select'));

    _react2.fireEvent.click(getByTestId('raid-select').querySelector('p'));

    const wb = await (0, _react2.waitForElement)(() => getByTestId('writebuffer-input'));

    _react2.fireEvent.change(wb, {
      target: {
        value: "uram0"
      }
    });

    _react2.fireEvent.click(getByTestId('disktype'));

    _react2.fireEvent.click(getAllByText('Storage Disk')[0]);

    const dev1 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-0'));

    _react2.fireEvent.click(dev1);

    const dev2 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-1'));

    _react2.fireEvent.click(dev2);

    const dev3 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-2'));

    _react2.fireEvent.click(dev3);

    _react2.fireEvent.change(getByTestId('disktype-input'), {
      target: {
        value: "Spare Disk"
      }
    });

    const dev4 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-3'));

    _react2.fireEvent.click(dev4);

    _react2.fireEvent.click(getByTestId('createarray-btn'));

    const success = await (0, _react2.waitForElement)(() => getByTestId('alertDescription'));
    expect(success).toBeDefined();

    _react2.fireEvent.click(getByText('OK'));
  });
  it('should not create array if devices are not selected', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      metadevices: ['uram0', 'uram1']
    }).onPost('/api/v1.0/create_arrays/').reply(200, {}).onAny().reply(200, []);
    renderComponent();
    const getSpy = jest.spyOn(_axios.default, 'post');
    const _wrapper6 = wrapper,
          getByTestId = _wrapper6.getByTestId,
          getByText = _wrapper6.getByText,
          getAllByText = _wrapper6.getAllByText,
          queryByText = _wrapper6.queryByText;
    const raidSelect = await (0, _react2.waitForElement)(() => getByTestId('raid-select-input'));

    _react2.fireEvent.change(raidSelect, {
      target: {
        value: "5"
      }
    });

    _react2.fireEvent.change(getByTestId('writebuffer-input'), {
      target: {
        value: "uram0"
      }
    });

    _react2.fireEvent.click(getByTestId('disktype'));

    _react2.fireEvent.click(getAllByText('Storage Disk')[0]);

    _react2.fireEvent.click(getByTestId('createarray-btn'));

    expect(queryByText(/Select at least/i)).toBeDefined();
  });
  it('should not create array if spare devices are not selected', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      metadevices: ['uram0', 'uram1']
    }).onPost('/api/v1.0/create_arrays/').reply(200, {}).onAny().reply(200, []);
    renderComponent();
    const getSpy = jest.spyOn(_axios.default, 'post');
    const _wrapper7 = wrapper,
          getByTestId = _wrapper7.getByTestId,
          getByText = _wrapper7.getByText,
          getAllByText = _wrapper7.getAllByText,
          queryByText = _wrapper7.queryByText;
    const raidSelect = await (0, _react2.waitForElement)(() => getByTestId('raid-select-input'));

    _react2.fireEvent.change(raidSelect, {
      target: {
        value: "5"
      }
    });

    _react2.fireEvent.change(getByTestId('writebuffer-input'), {
      target: {
        value: "uram0"
      }
    });

    _react2.fireEvent.click(getByTestId('disktype'));

    _react2.fireEvent.click(getAllByText('Storage Disk')[0]);

    const dev1 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-0'));

    _react2.fireEvent.click(dev1);

    const dev2 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-1'));

    _react2.fireEvent.click(dev2);

    const dev3 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-2'));

    _react2.fireEvent.click(dev3);

    const dev2_ = await (0, _react2.waitForElement)(() => getByTestId('diskselect-1'));

    _react2.fireEvent.click(dev2_);

    const dev4 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-3'));

    _react2.fireEvent.click(dev4);

    _react2.fireEvent.click(getByTestId('createarray-btn'));

    expect(queryByText(/Select at least/i)).toBeDefined();
  });
  it('should not create array if meta disk is not selected', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      metadevices: ['uram0', 'uram1']
    }).onPost('/api/v1.0/create_arrays/').reply(200, {}).onAny().reply(200, []);
    renderComponent();
    const getSpy = jest.spyOn(_axios.default, 'post');
    const _wrapper8 = wrapper,
          getByTestId = _wrapper8.getByTestId,
          getByText = _wrapper8.getByText,
          getAllByText = _wrapper8.getAllByText,
          queryByText = _wrapper8.queryByText;
    const raidSelect = await (0, _react2.waitForElement)(() => getByTestId('raid-select-input'));

    _react2.fireEvent.change(raidSelect, {
      target: {
        value: "5"
      }
    });

    _react2.fireEvent.click(getByTestId('disktype'));

    _react2.fireEvent.click(getAllByText('Storage Disk')[0]);

    const dev1 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-0'));

    _react2.fireEvent.click(dev1);

    const dev2 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-1'));

    _react2.fireEvent.click(dev2);

    const dev3 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-2'));

    _react2.fireEvent.click(dev3);

    const dev2_ = await (0, _react2.waitForElement)(() => getByTestId('diskselect-1'));

    _react2.fireEvent.click(dev2_);

    const dev4 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-3'));

    _react2.fireEvent.click(dev4);

    _react2.fireEvent.change(getByTestId('disktype-input'), {
      target: {
        value: "Spare Disk"
      }
    });

    _react2.fireEvent.click(dev2);

    _react2.fireEvent.click(getByTestId('createarray-btn'));

    expect(queryByText(/Select a Write Buffer/i)).toBeDefined();
  });
  it('should create an array with selected devices', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      metadevices: ['uram0', 'uram1']
    }).onPost('/api/v1.0/create_arrays/').reply(200, {}).onAny().reply(200, []);
    renderComponent();
    jest.setTimeout(30000);
    const getSpy = jest.spyOn(_axios.default, 'post');
    const _wrapper9 = wrapper,
          getByTestId = _wrapper9.getByTestId,
          getByText = _wrapper9.getByText,
          getAllByText = _wrapper9.getAllByText,
          getByDisplayValue = _wrapper9.getByDisplayValue,
          asFragment = _wrapper9.asFragment;
    const raidSelect = await (0, _react2.waitForElement)(() => getByTestId('raid-select-input'));

    _react2.fireEvent.change(raidSelect, {
      target: {
        value: "5"
      }
    });

    const wb = await (0, _react2.waitForElement)(() => getByTestId('writebuffer'));
    wb.value = "uram0";

    _react2.fireEvent.change(wb);

    _react2.fireEvent.click(getByTestId('disktype'));

    _react2.fireEvent.click(getAllByText('Storage Disk')[0]);

    const dev1 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-0'));

    _react2.fireEvent.click(dev1);

    const dev2 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-1'));

    _react2.fireEvent.click(dev2);

    const dev3 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-2'));

    _react2.fireEvent.click(dev3);

    _react2.fireEvent.click(dev2);

    const dev4 = await (0, _react2.waitForElement)(() => getByTestId('diskselect-3'));

    _react2.fireEvent.click(dev4); //fireEvent.click(getByTestId('disktype'));


    const disktype = await (0, _react2.waitForElement)(() => getByTestId('disktype'));
    disktype.value = "Spare Disk";

    _react2.fireEvent.change(disktype);

    console.log("Clicking Spare Disk");

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId('diskselect-1'))));

    _react2.fireEvent.click(getByTestId('createarray-btn'));

    expect(getSpy).toHaveBeenCalledWith('/api/v1.0/create_arrays/', {
      size: 1172110338,
      arrayname: "",
      RAIDLevel: "5",
      storageDisks: [{
        deviceName: 'intel-unvmens-0'
      }, {
        deviceName: 'intel-unvmens-2'
      }, {
        deviceName: 'intel-unvmens-3'
      }],
      spareDisks: [{
        deviceName: 'intel-unvmens-1'
      }],
      writeBufferDisk: [],
      metaDisk: 'uram0'
    }, {
      "headers": {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "x-access-token": null
      }
    });
    const success = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    expect(success).toBeDefined();

    _react2.fireEvent.click(getByText('OK'));
  });
  it('should delete the array', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1.0\/get_volumes\/*/).reply(200, []).onGet(/api\/v1.0\/available_storage\/*/).reply(200, [{
      arraySize: 10
    }]).onPost(/api\/v1.0\/delete_array\/*/).reply(200, {}).onAny().reply(200, []);
    renderComponent();
    const _wrapper10 = wrapper,
          getByText = _wrapper10.getByText;
    const deleteButton = await (0, _react2.waitForElement)(() => getByText('Delete Array'));

    _react2.fireEvent.click(deleteButton);

    expect(getByText('Yes')).toBeDefined();

    _react2.fireEvent.click(getByText('Yes'));
  });
  it('should create a volume', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1.0\/get_volumes\/*/).reply(200, []).onGet(/api\/v1.0\/available_storage\/*/).reply(200, [{
      arraySize: 10
    }]).onPost(/api\/v1.0\/delete_array\/*/).reply(200, {}).onAny().reply(200, []);
    renderComponent();
    const _wrapper11 = wrapper,
          getByTestId = _wrapper11.getByTestId,
          getByLabelText = _wrapper11.getByLabelText,
          getByText = _wrapper11.getByText;
    const volName = await (0, _react2.waitForElement)(() => getByTestId('create-vol-name'));

    _react2.fireEvent.change(volName, {
      target: {
        value: 'vol1'
      }
    });

    const volCount = await (0, _react2.waitForElement)(() => getByTestId('create-vol-count'));

    _react2.fireEvent.change(volCount, {
      target: {
        value: 2
      }
    });

    const volSuffix = await (0, _react2.waitForElement)(() => getByLabelText('Suffix Start Value'));

    _react2.fireEvent.change(volSuffix, {
      target: {
        value: 0
      }
    });

    const volSize = await (0, _react2.waitForElement)(() => getByTestId('create-vol-size'));

    _react2.fireEvent.change(volSize, {
      target: {
        value: '10'
      }
    });

    const volUnit = await (0, _react2.waitForElement)(() => getByTestId('volume-unit'));

    _react2.fireEvent.click(volUnit); //fireEvent.click(await waitForElement(() => getByText('TB')));


    const volBW = await (0, _react2.waitForElement)(() => getByLabelText('Maximum Bandwidth (MB/s)'));

    _react2.fireEvent.change(volBW, {
      target: {
        value: '10'
      }
    });

    const volIOPS = await (0, _react2.waitForElement)(() => getByLabelText('Maximum IOPS (KIOPS)'));

    _react2.fireEvent.change(volIOPS, {
      target: {
        value: '10'
      }
    });

    const createVolButton = await (0, _react2.waitForElement)(() => getByTestId('createvolume-btn'));

    _react2.fireEvent.click(createVolButton);

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('OK'))));
  });
  it('should throw error if creating volume is not possible because of missing volume name', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1\.0\/available_storage\/\?ts=*/).reply(200, [{
      arraySize: 20
    }]).onPost('/api/v1.0/save-volume/').reply(200, {}).onGet(/redfish\/v1\/StorageServices\/1\/Volumes$/).reply(200, {
      Members: [{
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/0",
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/1"
      }]
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/0$/).reply(200, {
      Name: "vol1",
      Id: "0",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/1$/).reply(200, {
      Name: "vol2",
      Id: "1",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onAny().reply(200, []);
    renderComponent();
    const _wrapper12 = wrapper,
          getByTestId = _wrapper12.getByTestId,
          getByLabelText = _wrapper12.getByLabelText,
          getByText = _wrapper12.getByText,
          asFragment = _wrapper12.asFragment;
    const volCount = await (0, _react2.waitForElement)(() => getByTestId('create-vol-count'));

    _react2.fireEvent.change(volCount, {
      target: {
        value: 1
      }
    });

    const volName = await (0, _react2.waitForElement)(() => getByTestId('create-vol-name'));

    _react2.fireEvent.change(volName, {
      target: {
        value: ''
      }
    });

    const createVolButton = await (0, _react2.waitForElement)(() => getByTestId('createvolume-btn'));

    _react2.fireEvent.click(createVolButton);

    expect((await (0, _react2.waitForElement)(() => getByText('Please Enter Volume Name')))).toBeDefined();

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('OK'))));
  });
  it('should throw error if creating volume is not possible because of missing volume count', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1\.0\/available_storage\/\?ts=*/).reply(200, [{
      arraySize: 20
    }]).onPost('/api/v1.0/save-volume/').reply(200, {}).onGet(/redfish\/v1\/StorageServices\/1\/Volumes$/).reply(200, {
      Members: [{
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/0",
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/1"
      }]
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/0$/).reply(200, {
      Name: "vol1",
      Id: "0",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/1$/).reply(200, {
      Name: "vol2",
      Id: "1",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onAny().reply(200, []);
    jest.setTimeout(30000);
    renderComponent();
    const _wrapper13 = wrapper,
          getByTestId = _wrapper13.getByTestId,
          getByLabelText = _wrapper13.getByLabelText,
          getByText = _wrapper13.getByText,
          asFragment = _wrapper13.asFragment;
    await (0, _react2.waitForElement)(() => getByTestId('vol-edit-btn-vol2'));
    const volCount = await (0, _react2.waitForElement)(() => getByTestId('create-vol-count'));

    _react2.fireEvent.change(volCount, {
      target: {
        value: ''
      }
    });

    const createVolButton = await (0, _react2.waitForElement)(() => getByTestId('createvolume-btn'));

    _react2.fireEvent.click(createVolButton);

    expect((await (0, _react2.waitForElement)(() => getByText('Please Enter Volume Count')))).toBeDefined();

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('OK'))));
  });
  it('should select and delete a volume', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1\.0\/available_storage\/\?ts=*/).reply(200, [{
      arraySize: 20
    }]).onPost('/api/v1.0/save-volume/').reply(200, {}).onGet(/redfish\/v1\/StorageServices\/1\/Volumes$/).reply(200, {
      Members: [{
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/0",
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/1"
      }]
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/0$/).reply(200, {
      Name: "vol1",
      Id: "0",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/1$/).reply(200, {
      Name: "vol2",
      Id: "1",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onAny().reply(200, []);
    jest.setTimeout(30000);
    renderComponent();
    const _wrapper14 = wrapper,
          getByText = _wrapper14.getByText,
          getByTitle = _wrapper14.getByTitle,
          asFragment = _wrapper14.asFragment;
    const checkBox2 = await (0, _react2.waitForElement)(() => getByTitle('vol2'));

    _react2.fireEvent.click(checkBox2);

    const deleteBtn = await (0, _react2.waitForElement)(() => getByTitle('Delete'));

    _react2.fireEvent.click(deleteBtn);

    const yesBtn = await (0, _react2.waitForElement)(() => getByText("Yes"));

    _react2.fireEvent.click(yesBtn);

    const deleteTxt = await (0, _react2.waitForElement)(() => getByText("Deleting Volume(s)"));
    expect(deleteTxt).toBeDefined();
  });
  it('should edit a volume', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1\.0\/available_storage\/\?ts=*/).reply(200, [{
      arraySize: 20
    }]).onPost('/api/v1.0/save-volume/').reply(200, {}).onGet(/redfish\/v1\/StorageServices\/1\/Volumes$/).reply(200, {
      Members: [{
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/0",
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/1"
      }]
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/0$/).reply(200, {
      Name: "vol1",
      Id: "0",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/1$/).reply(200, {
      Name: "vol2",
      Id: "1",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onAny().reply(200, []);
    renderComponent();
    const _wrapper15 = wrapper,
          getByText = _wrapper15.getByText,
          getByTitle = _wrapper15.getByTitle,
          getByTestId = _wrapper15.getByTestId,
          asFragment = _wrapper15.asFragment;
    const editBtn = await (0, _react2.waitForElement)(() => getByTestId('vol-edit-btn-vol2'));

    _react2.fireEvent.click(editBtn);

    const maxBw = await (0, _react2.waitForElement)(() => getByTestId('list-vol-maxbw-vol2'));

    _react2.fireEvent.change(maxBw, {
      target: {
        value: '0'
      }
    });

    const maxIops = await (0, _react2.waitForElement)(() => getByTestId('list-vol-maxiops-vol2'));

    _react2.fireEvent.change(maxIops, {
      target: {
        value: '0'
      }
    });

    const saveBtn = await (0, _react2.waitForElement)(() => getByTestId('vol-edit-save-btn-vol2'));

    _react2.fireEvent.click(saveBtn);

    const saveTxt = await (0, _react2.waitForElement)(() => getByText("Updating Volume"));
    expect(saveTxt).toBeDefined();
  });
  it('should cancel editing a volume', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1\.0\/available_storage\/\?ts=*/).reply(200, [{
      arraySize: 20
    }]).onPost('/api/v1.0/save-volume/').reply(200, {}).onGet(/redfish\/v1\/StorageServices\/1\/Volumes$/).reply(200, {
      Members: [{
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/0",
        "@odata.id": "/redfish/v1/StorageServices/1/Volumes/1"
      }]
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/0$/).reply(200, {
      Name: "vol1",
      Id: "0",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onGet(/redfish\/v1\/StorageServices\/1\/Volumes\/1$/).reply(200, {
      Name: "vol2",
      Id: "1",
      Capacity: {
        Data: {
          AllocatedBytes: 100,
          ConsumedBytes: 10
        }
      },
      Oem: {
        MaxIOPS: 10,
        MaxBW: 10
      },
      Status: {
        Oem: {
          VolumeStatus: "Mounted"
        }
      }
    }).onAny().reply(200, []);
    jest.setTimeout(30000);
    renderComponent();
    const _wrapper16 = wrapper,
          queryByTestId = _wrapper16.queryByTestId,
          getByTitle = _wrapper16.getByTitle,
          getByTestId = _wrapper16.getByTestId,
          asFragment = _wrapper16.asFragment;
    await (0, _react2.waitForElement)(() => getByTestId('arrayshow'));
    const editBtn = await (0, _react2.waitForElement)(() => getByTestId('vol-edit-btn-vol2'));

    _react2.fireEvent.click(editBtn);

    const maxBw = await (0, _react2.waitForElement)(() => getByTestId('list-vol-maxbw-vol2'));

    _react2.fireEvent.change(maxBw, {
      target: {
        value: '0'
      }
    });

    const maxIops = await (0, _react2.waitForElement)(() => getByTestId('list-vol-maxiops-vol2'));

    _react2.fireEvent.change(maxIops, {
      target: {
        value: '0'
      }
    });

    const cancelBtn = await (0, _react2.waitForElement)(() => getByTestId('vol-edit-cancel-btn-vol2'));

    _react2.fireEvent.click(cancelBtn);

    await (0, _react2.waitForElement)(() => getByTestId('vol-edit-btn-vol2'));
    expect(queryByTestId(/list-vol-maxiops-vol2/i)).toBeNull();
  });
  it('should show device details when array is created', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1\.0\/available_storage\/\?ts=*/).reply(200, [{
      arraySize: 20
    }]).onAny().reply(200, []);
    renderComponent();
    const _wrapper17 = wrapper,
          getByTestId = _wrapper17.getByTestId,
          asFragment = _wrapper17.asFragment,
          getByText = _wrapper17.getByText;

    global.document.createRange = html => ({
      setStart: () => {},
      setEnd: () => {},
      commonAncestorContainer: {
        nodeName: 'BODY',
        ownerDocument: document
      },
      createContextualFragment: html => {
        const div = document.createElement('div');
        div.innerHTML = html;
        return div.children[0];
      }
    });

    await (0, _react2.waitForElement)(() => getByTestId("arrayshow"));
    await (0, _testUtils.act)(async () => {
      (0, _react2.fireEvent)(getByTestId('diskshow-0'), new MouseEvent('mouseover', {
        bubbles: true,
        cancelable: true
      }));
      const moreDetails = await (0, _react2.waitForElement)(() => getByText('More Details'));

      _react2.fireEvent.click(moreDetails);

      _react2.fireEvent.click(getByTestId('diskdetails-close'));
    });
  });
  it('should show device details when array is not created', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      metadevices: ['uram0', 'uram1']
    }).onAny().reply(200, []);
    renderComponent();
    const _wrapper18 = wrapper,
          getByTestId = _wrapper18.getByTestId,
          queryByTestId = _wrapper18.queryByTestId,
          getByText = _wrapper18.getByText;

    global.document.createRange = html => ({
      setStart: () => {},
      setEnd: () => {},
      commonAncestorContainer: {
        nodeName: 'BODY',
        ownerDocument: document
      },
      createContextualFragment: html => {
        const div = document.createElement('div');
        div.innerHTML = html;
        return div.children[0];
      }
    });

    await (0, _react2.waitForElement)(() => getByTestId("arraycreate"));
    await (0, _testUtils.act)(async () => {
      (0, _react2.fireEvent)(getByTestId('diskselect-0'), new MouseEvent('mouseover', {
        bubbles: true,
        cancelable: true
      }));
      const moreDetails = await (0, _react2.waitForElement)(() => getByText('More Details'));

      _react2.fireEvent.click(moreDetails);

      _react2.fireEvent.click(getByTestId('diskdetails-close'));
    });
  });
  it('should cancel deleting array', async () => {
    mock.onGet(/api\/v1.0\/get_devices\/*/).reply(200, {
      devices,
      "metadevices": ["uram0"]
    }).onGet(/api\/v1.0\/get_arrays\/*/).reply(200, [array]).onGet(/api\/v1\.0\/available_storage\/\?ts=*/).reply(200, [{
      arraySize: 20
    }]).onAny().reply(200, []);
    renderComponent();
    const _wrapper19 = wrapper,
          getByTestId = _wrapper19.getByTestId,
          asFragment = _wrapper19.asFragment,
          getByText = _wrapper19.getByText;

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Delete Array'))));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('No'))));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,