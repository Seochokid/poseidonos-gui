e5be22a19777baccc4117d71221e1a50
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _core = require("@material-ui/core");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

require("./overview.css");

var _Dialog = _interopRequireDefault(require("../../../components/Dialog"));

var _theme = require("../../../theme");

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../../../store/actions/exportActionCreators"));

var _Chassis = _interopRequireDefault(require("../../../components/OverviewComponents/Chassis"));

var _ServerInformation = _interopRequireDefault(require("../../../components/OverviewComponents/ServerInformation"));

var _PowerInformation = _interopRequireDefault(require("../../../components/OverviewComponents/PowerInformation"));

var _BmcLogTable = _interopRequireDefault(require("../../../components/OverviewComponents/BmcLogTable"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Hardware/Overview/index.js";

const styles = theme => ({
  overviewContainer: {
    margin: 0,
    maxWidth: "100%"
  },
  content: {
    flexGrow: 1,
    width: "100%",
    boxSizing: "border-box",
    padding: theme.spacing(2, 0)
  },
  toolbar: _theme.customTheme.toolbar,
  cardHeader: _theme.customTheme.card.header,
  overviewPaper: {
    width: "100%"
  }
});

class OverviewTab extends _react.Component {
  constructor(props) {
    super(props);
    this.openAlert = this.openAlert.bind(this);
    this.handleAlertClose = this.handleAlertClose.bind(this);
    this.triggerCommand = this.triggerCommand.bind(this);
  }

  openAlert(operationType) {
    console.log(operationType);
    this.props.openAlertBox({
      alertOpen: true,
      addDeleteSend: operationType,
      alerttype: "delete",
      istypealert: false,
      alerttitle: `${operationType} System`,
      alertdescription: `Are you sure you want to ${operationType} the system?`
    });
  }

  triggerCommand() {
    console.log("trigger");

    if (this.props.addDeleteSend === "Force Restart Poseidon Box") {
      this.props.rebootSystem();
      this.handleAlertClose();
    } else if (this.props.addDeleteSend === "Power Off Poseidon Box") {
      this.props.shutdownSystem();
      this.handleAlertClose();
    } else if (this.props.addDeleteSend === "Force Power Off Poseidon Box") {
      this.props.forceShutdownSystem();
      this.handleAlertClose();
    } else if (this.props.addDeleteSend === "Power On Poseidon Box") {
      this.props.powerOnSystem();
      this.handleAlertClose();
    }
  }

  handleAlertClose() {
    this.props.openAlertBox({
      alertOpen: false
    });
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 108
      },
      __self: this
    }, _react.default.createElement("main", {
      className: classes.content,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 109
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      "data-testid": "OverviewTab-container",
      container: true,
      className: classes.overviewContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 110
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      className: classes.overviewPaper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 111
      },
      __self: this
    }, _react.default.createElement(_Chassis.default, {
      openAlert: this.openAlert,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 112
      },
      __self: this
    }), _react.default.createElement(_BmcLogTable.default, {
      bmclogList: this.props.bmclogList,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113
      },
      __self: this
    }), _react.default.createElement(_PowerInformation.default, {
      openAlert: this.openAlert,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 116
      },
      __self: this
    })))), _react.default.createElement(_Dialog.default, {
      title: this.props.alerttitle,
      description: this.props.alertdescription,
      open: this.props.alertOpen,
      type: this.props.alerttype,
      handleClose: this.handleAlertClose,
      onConfirm: this.triggerCommand,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 120
      },
      __self: this
    }));
  }

}

const mapStateToProps = state => {
  return {
    alertOpen: state.alertManagementReducer.alertOpen,
    addDeleteSend: state.alertManagementReducer.addDeleteSend,
    alerttype: state.alertManagementReducer.alerttype,
    istypealert: state.alertManagementReducer.istypealert,
    alerttitle: state.alertManagementReducer.alerttitle,
    alertdescription: state.alertManagementReducer.alertdescription // bmclogList: state.bmcLogReducer.logList,

  };
};

const mapDispatchToProps = dispatch => {
  return {
    rebootSystem: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_REBOOT_SYSTEM
    }),
    shutdownSystem: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_SHUTDOWN_SYSTEM
    }),
    forceShutdownSystem: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_FORCE_SHUTDOWN_SYSTEM
    }),
    powerOnSystem: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_POWER_ON_SYSTEM
    }),
    // getBmcLogs: () => dispatch({ type: actionTypes.SAGA_GET_BMC_LOGS }),
    openAlertBox: alertParam => dispatch(actionCreators.openAlertBox(alertParam))
  };
};

var _default = (0, _core.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(OverviewTab));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,