{"version":3,"sources":["index.test.js"],"names":["describe","wrapper","dropDownValues","myMock","jest","fn","beforeEach","rootReducers","alertManagementReducer","store","i18n","afterEach","cleanup","it","getByLabelText","queryAllByText","getByTestId","getAllByText","asFragment","expect","toMatchSnapshot","input","fireEvent","change","target","value","keyDown","key","keyCode","charCode","click","getByText","FIELD","querySelector","toBe"],"mappings":"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\n\nDESCRIPTION: Add New Alerts Test File\n@NAME : index.test.js\n@AUTHORS: Jay Hitesh Sanghavi \n@Version : 1.0 *\n@REVISION HISTORY\n[03/06/2019] [Jay] : Prototyping..........////////////////////\n*/\n\nimport React from 'react';\nimport { Provider } from 'react-redux'\nimport { ReactDOM, findDOMNode } from 'react-dom'\nimport { I18nextProvider } from \"react-i18next\";\nimport { combineReducers, createStore } from 'redux'\nimport { render, fireEvent, cleanup } from '@testing-library/react'\nimport AddNewAlerts from './index';\nimport alertManagementReducer from \"../../../store/reducers/alertManagementReducer\"\nimport i18n from \"../../../i18n\";\ndescribe(\"Authentication\", () => {\n    let wrapper;\n    let dropDownValues = ['Greater Than', 'Less Than'];\n\n    const myMock = jest.fn();\n    beforeEach(() => {\n        const rootReducers = combineReducers({\n            alertManagementReducer,\n        });\n        const store = createStore(rootReducers)\n\n        wrapper = render(\n            <I18nextProvider i18n={i18n}>\n                <Provider store={store}>\n                    <AddNewAlerts dropdownCondition={dropDownValues} openAlert={myMock} />\n                </Provider>\n            </I18nextProvider>)\n\n        dropDownValues = null;\n    });\n\n    afterEach(cleanup)\n\n    it('renders add new alerts component', () => {\n        const { getByLabelText, queryAllByText, getByTestId, getAllByText, asFragment } = wrapper;\n        expect(asFragment()).toMatchSnapshot();\n        getByTestId(\"addNewAlertsTag\")\n        const input = getByLabelText(/Alert Name/i)\n\n        fireEvent.change(input, { target: { value: \"Samsung # \\n\" } });\n        fireEvent.keyDown(input, { key: 'Enter', keyCode: 13, charCode: 13 });\n\n        fireEvent.click(getByTestId(\"ButtonTag\"));\n        getByTestId(\"Alert_Range_TextField\");\n    });\n\n\n    it('renders add new alerts component1', () => {\n        const { getByLabelText, queryAllByText, getByTestId, getByText, getAllByText, asFragment } = wrapper;\n        const FIELD = getByLabelText(/Value/i);\n        fireEvent.keyDown(getByTestId(\"addNewAlertsTag\").querySelector('input'), { key: 'Enter', keyCode: 13, charCode: 13 });\n        fireEvent.keyDown(getByLabelText(/Value/i), { key: 'Enter', keyCode: 13, charCode: 13 });\n\n        fireEvent.change(FIELD, { target: { value: \"Wassup\" } });\n        expect(FIELD.value).toBe('Wassup')\n        fireEvent.keyDown(FIELD, { key: 'Enter', keyCode: 13, charCode: 13 });\n\n    });\n\n});"]}