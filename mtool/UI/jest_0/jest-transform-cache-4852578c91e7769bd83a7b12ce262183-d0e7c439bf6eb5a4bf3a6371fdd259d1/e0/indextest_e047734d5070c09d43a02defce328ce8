35d5dfb4ee5a2fca68133a31f886bb07
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactDom = require("react-dom");

var _reactI18next = require("react-i18next");

var _redux = require("redux");

var _react2 = require("@testing-library/react");

var _index = _interopRequireDefault(require("./index"));

var _alertManagementReducer = _interopRequireDefault(require("../../../store/reducers/alertManagementReducer"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AddNewAlerts/index.test.js";
describe("Authentication", () => {
  let wrapper;
  let dropDownValues = ['Greater Than', 'Less Than'];
  const myMock = jest.fn();
  beforeEach(() => {
    const rootReducers = (0, _redux.combineReducers)({
      alertManagementReducer: _alertManagementReducer.default
    });
    const store = (0, _redux.createStore)(rootReducers);
    wrapper = (0, _react2.render)(_react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 49
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 50
      },
      __self: void 0
    }, _react.default.createElement(_index.default, {
      dropdownCondition: dropDownValues,
      openAlert: myMock,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 51
      },
      __self: void 0
    }))));
    dropDownValues = null;
  });
  afterEach(_react2.cleanup);
  it('renders add new alerts component', () => {
    const _wrapper = wrapper,
          getByLabelText = _wrapper.getByLabelText,
          queryAllByText = _wrapper.queryAllByText,
          getByTestId = _wrapper.getByTestId,
          getAllByText = _wrapper.getAllByText,
          asFragment = _wrapper.asFragment;
    expect(asFragment()).toMatchSnapshot();
    getByTestId("addNewAlertsTag");
    const input = getByLabelText(/Alert Name/i);

    _react2.fireEvent.change(input, {
      target: {
        value: "Samsung # \n"
      }
    });

    _react2.fireEvent.keyDown(input, {
      key: 'Enter',
      keyCode: 13,
      charCode: 13
    });

    _react2.fireEvent.click(getByTestId("ButtonTag"));

    getByTestId("Alert_Range_TextField");
  });
  it('renders add new alerts component1', () => {
    const _wrapper2 = wrapper,
          getByLabelText = _wrapper2.getByLabelText,
          queryAllByText = _wrapper2.queryAllByText,
          getByTestId = _wrapper2.getByTestId,
          getByText = _wrapper2.getByText,
          getAllByText = _wrapper2.getAllByText,
          asFragment = _wrapper2.asFragment;
    const FIELD = getByLabelText(/Value/i);

    _react2.fireEvent.keyDown(getByTestId("addNewAlertsTag").querySelector('input'), {
      key: 'Enter',
      keyCode: 13,
      charCode: 13
    });

    _react2.fireEvent.keyDown(getByLabelText(/Value/i), {
      key: 'Enter',
      keyCode: 13,
      charCode: 13
    });

    _react2.fireEvent.change(FIELD, {
      target: {
        value: "Wassup"
      }
    });

    expect(FIELD.value).toBe('Wassup');

    _react2.fireEvent.keyDown(FIELD, {
      key: 'Enter',
      keyCode: 13,
      charCode: 13
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,