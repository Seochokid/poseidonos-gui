debdb88eea0b6dee393500893f0f13d1
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState = {
  selected: false,
  edit: false,
  alerts: [],
  // For Alert Table
  alertClusters: [{
    // For Alert Types
    _id: '1',
    name: 'CPU',
    alertSubCluster: [{
      _id: '1',
      name: 'cpu-host',
      alertTypes: [{
        type: 'cpu-idle'
      }, {
        type: 'cpu-idle2'
      }, {
        type: 'cpu-affinity'
      }]
    }, {
      _id: '2',
      name: 'cpu-host2',
      alertTypes: [{
        type: 'cpu-idle'
      }, {
        type: 'cpu-affinity'
      }, {
        type: 'cpu-time'
      }]
    }],
    alertFields: ["usage_idle", "usage_system"]
  }, {
    _id: '2',
    name: 'Array',
    alertSubCluster: [{
      name: 'array-disk0',
      alertTypes: [{
        type: 'array-name'
      }, {
        type: 'array-size'
      }]
    }]
  }],
  istypealert: false,
  alerttype: '',
  alertOpen: false,
  addDeleteSend: '',
  alerttitle: '',
  alertdescription: ''
};

const alertManagementReducer = (state = initialState, action) => {
  switch (action.type) {
    case actionTypes.ALERT_MANAGEMENT_OPEN_ALERT_BOX:
      {
        return _objectSpread({}, state, {}, action.alertParam);
      }

    case actionTypes.ALERT_MANAGEMENT_SET_ALERTS:
      {
        const _action$updatedAlerts = action.updatedAlerts,
              type = _action$updatedAlerts.type,
              i = _action$updatedAlerts.i,
              j = _action$updatedAlerts.j;
        const value1 = i;
        const value2 = j;
        const alertClusters = state.alertClusters.map((cluster, Citr) => {
          return _objectSpread({}, cluster, {
            alertSubCluster: cluster.alertSubCluster.map((subcluster, subCitr) => {
              return _objectSpread({}, subcluster, {
                alertTypes: subcluster.alertTypes.map(cip => {
                  if (type.type === cip.type && Citr === value1 && subCitr === value2) {
                    return _objectSpread({}, cip, {
                      selected: !cip.selected
                    });
                  }

                  if (cip.selected === true && value1 === Citr && subCitr === value2) {
                    return _objectSpread({}, cip);
                  }

                  return _objectSpread({}, cip, {
                    selected: false
                  });
                })
              });
            })
          });
        });
        return _objectSpread({}, state, {
          alertClusters
        });
      }

    case actionTypes.ALERT_MANAGEMENT_FETCH_ALERTS:
      {
        const alerts = [];
        action.alerts.forEach(alert => {
          alerts.push(_objectSpread({}, alert, {
            selected: false,
            edit: false
          }));
        });
        return _objectSpread({}, state, {
          alerts
        });
      }

    case actionTypes.ALERT_MANAGEMENT_FETCH_ALERTS_TYPE:
      {
        const alertTypesArray = [];

        for (let i = 0; i < action.alertTypes.length; i += 1) {
          if (action.alertTypes[i].name === 'cpu') {
            action.alertTypes[i].alertFields = [// 'usage_idle',
            'usage_user'];

            for (let j = 0; j < action.alertTypes[i].alertSubCluster.length; j += 1) {
              if (action.alertTypes[i].alertSubCluster[j].name === 'cpu') {
                action.alertTypes[i].alertSubCluster = action.alertTypes[i].alertSubCluster.filter(item => item.name === 'cpu');
                action.alertTypes[i].alertSubCluster[j].alertTypes = action.alertTypes[i].alertSubCluster[j].alertTypes.filter(item => item.type === 'cpu-total');
                action.alertTypes[i].alertSubCluster[j].name = 'cpu ';
              }
            }

            alertTypesArray.push(action.alertTypes[i]);
          } else if (action.alertTypes[i].name === 'disk') {
            for (let j = 0; j < action.alertTypes[i].alertSubCluster.length; j += 1) {
              if (action.alertTypes[i].alertSubCluster[j].name !== 'device') {
                action.alertTypes[i].alertSubCluster = action.alertTypes[i].alertSubCluster.filter(item => item.name === 'device');
              } else {
                action.alertTypes[i].alertSubCluster[j].alertTypes = action.alertTypes[i].alertSubCluster[j].alertTypes.slice(0, 1);
                action.alertTypes[i].alertSubCluster[j].alertTypes.map(item => {
                  const resItem = _objectSpread({}, item);

                  resItem.type = 'NA';
                  return resItem;
                });
              }
            }

            action.alertTypes[i].alertFields = ['NA'];
            alertTypesArray.push(action.alertTypes[i]);
          }
        }

        return _objectSpread({}, state, {
          alertClusters: alertTypesArray
        });
      }

    default:
      return state;
  }
};

var _default = alertManagementReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsZXJ0TWFuYWdlbWVudFJlZHVjZXIuanMiXSwibmFtZXMiOlsiaW5pdGlhbFN0YXRlIiwic2VsZWN0ZWQiLCJlZGl0IiwiYWxlcnRzIiwiYWxlcnRDbHVzdGVycyIsIl9pZCIsIm5hbWUiLCJhbGVydFN1YkNsdXN0ZXIiLCJhbGVydFR5cGVzIiwidHlwZSIsImFsZXJ0RmllbGRzIiwiaXN0eXBlYWxlcnQiLCJhbGVydHR5cGUiLCJhbGVydE9wZW4iLCJhZGREZWxldGVTZW5kIiwiYWxlcnR0aXRsZSIsImFsZXJ0ZGVzY3JpcHRpb24iLCJhbGVydE1hbmFnZW1lbnRSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJhY3Rpb25UeXBlcyIsIkFMRVJUX01BTkFHRU1FTlRfT1BFTl9BTEVSVF9CT1giLCJhbGVydFBhcmFtIiwiQUxFUlRfTUFOQUdFTUVOVF9TRVRfQUxFUlRTIiwidXBkYXRlZEFsZXJ0cyIsImkiLCJqIiwidmFsdWUxIiwidmFsdWUyIiwibWFwIiwiY2x1c3RlciIsIkNpdHIiLCJzdWJjbHVzdGVyIiwic3ViQ2l0ciIsImNpcCIsIkFMRVJUX01BTkFHRU1FTlRfRkVUQ0hfQUxFUlRTIiwiZm9yRWFjaCIsImFsZXJ0IiwicHVzaCIsIkFMRVJUX01BTkFHRU1FTlRfRkVUQ0hfQUxFUlRTX1RZUEUiLCJhbGVydFR5cGVzQXJyYXkiLCJsZW5ndGgiLCJmaWx0ZXIiLCJpdGVtIiwic2xpY2UiLCJyZXNJdGVtIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBMkJBOzs7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUc7QUFDakJDLEVBQUFBLFFBQVEsRUFBRSxLQURPO0FBRWpCQyxFQUFBQSxJQUFJLEVBQUUsS0FGVztBQUdqQkMsRUFBQUEsTUFBTSxFQUFFLEVBSFM7QUFHTDtBQUNaQyxFQUFBQSxhQUFhLEVBQUUsQ0FDWDtBQUNJO0FBQ0FDLElBQUFBLEdBQUcsRUFBRSxHQUZUO0FBR0lDLElBQUFBLElBQUksRUFBRSxLQUhWO0FBSUlDLElBQUFBLGVB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LENBQWtCaUIsQ0FBbEIsQ0FBckI7QUFDSDtBQUNKOztBQUNELGlDQUNPUCxLQURQO0FBRUlkLFVBQUFBLGFBQWEsRUFBRW9DO0FBRm5CO0FBSUg7O0FBQ0w7QUFDSSxhQUFPdEIsS0FBUDtBQTVIUjtBQThISCxDQS9IRDs7ZUFpSWVELHNCIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICBDT1BZUklHSFQgKGMpIDIwMTkgU0FNU1VORyBFTEVDVFJPTklDUyBDTy4sIExURC4gICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgQUxMIFJJR0hUUyBSRVNFUlZFRCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkIHRvIGxpY2Vuc2VlcyBvZiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiAgICAgICAgL1xuLyAgIHByb2R1Y3RzIHRvIHVzZSBvciBhYnN0cmFjdCB0aGlzIGNvbXB1dGVyIHByb2dyYW0gZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgICAgICAgICAvXG4vICAgaW1wbGVtZW50aW5nIGEgcHJvZHVjdCBiYXNlZCBvbiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBwcm9kdWN0cy4gICAgICAgICAgIC9cbi8gICBObyBvdGhlciByaWdodHMgdG8gcmVwcm9kdWNlLCB1c2UsIG9yIGRpc3NlbWluYXRlIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgICAgICAgICAgL1xuLyAgIHdoZXRoZXIgaW4gcGFydCBvciBpbiB3aG9sZSwgYXJlIGdyYW50ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIFxuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gbWFrZXMgbm8gcmVwcmVzZW50YXRpb24gb3Igd2FycmFudGllcyB3aXRoICAgICAgICAgIC9cbi8gICByZXNwZWN0IHRvIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIGNvbXB1dGVyIHByb2dyYW0sIGFuZCBzcGVjaWZpY2FsbHkgZGlzY2xhaW1zICAgL1xuLyAgIGFueSByZXNwb25zaWJpbGl0eSBmb3IgYW55IGRhbWFnZXMsIHNwZWNpYWwgb3IgY29uc2VxdWVudGlhbCwgY29ubmVjdGVkICAgICAgICAgICAvXG4vICAgd2l0aCB0aGUgdXNlIG9mIHRoaXMgcHJvZ3JhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG5cblxuREVTQ1JJUFRJT046IDxDb250YWlucyByZWR1Y2VyIGZ1bmN0aW9uIGZvciBBbGVydCBNYW5hZ2VtZW50IENvbnRhaW5lcj4gKlxuQE5BTUUgOiBhbGVydE1hbmFnZW1lbnRSZWR1Y2VyLmpzXG5AQVVUSE9SUzogSmF5IEhpdGVzaCBTYW5naGF2aSBcbkBWZXJzaW9uIDogMS4wICpcbkBSRVZJU0lPTiBISVNUT1JZXG5bMDMvMDYvMjAxOV0gW0pheV0gOiBQcm90b3R5cGluZy4uLi4uLi4uLi4vLy8vLy8vLy8vLy8vLy8vLy8vL1xuKi9cblxuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSBcIi4uL2FjdGlvbnMvYWN0aW9uVHlwZXNcIlxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgIGVkaXQ6IGZhbHNlLFxuICAgIGFsZXJ0czogW10sIC8vIEZvciBBbGVydCBUYWJsZVxuICAgIGFsZXJ0Q2x1c3RlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gRm9yIEFsZXJ0IFR5cGVzXG4gICAgICAgICAgICBfaWQ6ICcxJyxcbiAgICAgICAgICAgIG5hbWU6ICdDUFUnLFxuICAgICAgICAgICAgYWxlcnRTdWJDbHVzdGVyOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBfaWQ6ICcxJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2NwdS1ob3N0JyxcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRUeXBlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjcHUtaWRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjcHUtaWRsZTInLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY3B1LWFmZmluaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIF9pZDogJzInLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnY3B1LWhvc3QyJyxcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRUeXBlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjcHUtaWRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjcHUtYWZmaW5pdHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY3B1LXRpbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGFsZXJ0RmllbGRzOiBbXCJ1c2FnZV9pZGxlXCIsXCJ1c2FnZV9zeXN0ZW1cIl0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIF9pZDogJzInLFxuICAgICAgICAgICAgbmFtZTogJ0FycmF5JyxcbiAgICAgICAgICAgIGFsZXJ0U3ViQ2x1c3RlcjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FycmF5LWRpc2swJyxcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRUeXBlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhcnJheS1uYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2FycmF5LXNpemUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGlzdHlwZWFsZXJ0OiBmYWxzZSxcbiAgICBhbGVydHR5cGU6ICcnLFxuICAgIGFsZXJ0T3BlbjogZmFsc2UsXG4gICAgYWRkRGVsZXRlU2VuZDogJycsXG4gICAgYWxlcnR0aXRsZTogJycsXG4gICAgYWxlcnRkZXNjcmlwdGlvbjogJycsXG59XG5cblxuY29uc3QgYWxlcnRNYW5hZ2VtZW50UmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIGFjdGlvblR5cGVzLkFMRVJUX01BTkFHRU1FTlRfT1BFTl9BTEVSVF9CT1g6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJue1xuICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgLi4uYWN0aW9uLmFsZXJ0UGFyYW1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZXMuQUxFUlRfTUFOQUdFTUVOVF9TRVRfQUxFUlRTOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdHlwZSwgaSwgaiB9ID0gYWN0aW9uLnVwZGF0ZWRBbGVydHM7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUxID0gaTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZTIgPSBqO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsZXJ0Q2x1c3RlcnMgPSBzdGF0ZS5hbGVydENsdXN0ZXJzLm1hcCgoY2x1c3RlciwgQ2l0cikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY2x1c3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0U3ViQ2x1c3RlcjogY2x1c3Rlci5hbGVydFN1YkNsdXN0ZXIubWFwKChzdWJjbHVzdGVyLCBzdWJDaXRyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uc3ViY2x1c3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnRUeXBlczogc3ViY2x1c3Rlci5hbGVydFR5cGVzLm1hcChjaXAgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUudHlwZSA9PT0gY2lwLnR5cGUgJiYgQ2l0ciA9PT0gdmFsdWUxICYmIHN1YkNpdHIgPT09IHZhbHVlMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmNpcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6ICFjaXAuc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaXAuc2VsZWN0ZWQgPT09IHRydWUgJiYgdmFsdWUxID09PSBDaXRyICYmIHN1YkNpdHIgPT09IHZhbHVlMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmNpcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jaXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBhbGVydENsdXN0ZXJzLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZXMuQUxFUlRfTUFOQUdFTUVOVF9GRVRDSF9BTEVSVFM6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxlcnRzID0gW107XG4gICAgICAgICAgICAgICAgYWN0aW9uLmFsZXJ0cy5mb3JFYWNoKGFsZXJ0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uYWxlcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0cyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZXMuQUxFUlRfTUFOQUdFTUVOVF9GRVRDSF9BTEVSVFNfVFlQRTpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbGVydFR5cGVzQXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGlvbi5hbGVydFR5cGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uYWxlcnRUeXBlc1tpXS5uYW1lID09PSAnY3B1Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmFsZXJ0VHlwZXNbaV0uYWxlcnRGaWVsZHMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ3VzYWdlX2lkbGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2FnZV91c2VyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAndXNhZ2Vfc3lzdGVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqIDwgYWN0aW9uLmFsZXJ0VHlwZXNbaV0uYWxlcnRTdWJDbHVzdGVyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqICs9IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uYWxlcnRUeXBlc1tpXS5hbGVydFN1YkNsdXN0ZXJbal0ubmFtZSA9PT0gJ2NwdScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmFsZXJ0VHlwZXNbaV0uYWxlcnRTdWJDbHVzdGVyID0gYWN0aW9uLmFsZXJ0VHlwZXNbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uYWxlcnRTdWJDbHVzdGVyLmZpbHRlcihpdGVtID0+IGl0ZW0ubmFtZSA9PT0gJ2NwdScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uYWxlcnRUeXBlc1tpXS5hbGVydFN1YkNsdXN0ZXJbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uYWxlcnRUeXBlcyA9IGFjdGlvbi5hbGVydFR5cGVzW2ldLmFsZXJ0U3ViQ2x1c3RlcltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5hbGVydFR5cGVzLmZpbHRlcihpdGVtID0+IGl0ZW0udHlwZSA9PT0gJ2NwdS10b3RhbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uYWxlcnRUeXBlc1tpXS5hbGVydFN1YkNsdXN0ZXJbal0ubmFtZSA9ICdjcHUgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydFR5cGVzQXJyYXkucHVzaChhY3Rpb24uYWxlcnRUeXBlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uLmFsZXJ0VHlwZXNbaV0ubmFtZSA9PT0gJ2Rpc2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqIDwgYWN0aW9uLmFsZXJ0VHlwZXNbaV0uYWxlcnRTdWJDbHVzdGVyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqICs9IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24uYWxlcnRUeXBlc1tpXS5hbGVydFN1YkNsdXN0ZXJbal0ubmFtZSAhPT0gJ2RldmljZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmFsZXJ0VHlwZXNbaV0uYWxlcnRTdWJDbHVzdGVyID0gYWN0aW9uLmFsZXJ0VHlwZXNbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uYWxlcnRTdWJDbHVzdGVyLmZpbHRlcihpdGVtID0+IGl0ZW0ubmFtZSA9PT0gJ2RldmljZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5hbGVydFR5cGVzW2ldLmFsZXJ0U3ViQ2x1c3RlcltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5hbGVydFR5cGVzID0gYWN0aW9uLmFsZXJ0VHlwZXNbaV0uYWxlcnRTdWJDbHVzdGVyW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmFsZXJ0VHlwZXMuc2xpY2UoMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5hbGVydFR5cGVzW2ldLmFsZXJ0U3ViQ2x1c3RlcltqXS5hbGVydFR5cGVzLm1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzSXRlbSA9IHsgLi4uaXRlbSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzSXRlbS50eXBlID0gJ05BJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzSXRlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uYWxlcnRUeXBlc1tpXS5hbGVydEZpZWxkcyA9IFsnTkEnXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0VHlwZXNBcnJheS5wdXNoKGFjdGlvbi5hbGVydFR5cGVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRDbHVzdGVyczogYWxlcnRUeXBlc0FycmF5LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYWxlcnRNYW5hZ2VtZW50UmVkdWNlcjtcbiJdfQ==