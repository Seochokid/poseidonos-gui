af51f63dfb7092e4642d39f184b06cd6
"use strict";

jest.mock('axios');

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _reduxSaga = require("redux-saga");

var _axios = _interopRequireDefault(require("axios"));

var _enzyme = require("enzyme");

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _dashboardSaga = require("./dashboardSaga");

(0, _enzyme.configure)({
  adapter: new _enzymeAdapterReact.default()
});
describe('<Testing Redux Sagas />', () => {
  beforeEach(() => {
    jest.restoreAllMocks();
  });
  it('should render fetch volume sagas', async () => {
    const dispatchedActions = [];

    _axios.default.get.mockImplementationOnce(() => Promise.resolve({
      data: ['vol1', 'vol2']
    }));

    const passActions = [{
      type: 'FETCH_VOLUME_INFO',
      volumes: ['vol1', 'vol2']
    }, {
      type: 'ENABLE_FETCHING_ALERTS',
      fetchingAlerts: false
    }];
    const fakeStore = {
      dispatch: action => dispatchedActions.push(action)
    };
    await (0, _reduxSaga.runSaga)(fakeStore, _dashboardSaga.fetchVolumeInfo).done;
    expect(_axios.default.get).toHaveBeenCalledTimes(1);
    expect(_axios.default.get.mockResolvedValue(['vol1', 'vol2']));
    expect(dispatchedActions).toEqual(passActions);
    console.log(dispatchedActions);
  });
  it('if axios api return error in fetch volume sagas', async () => {
    const dispatchedActions = [];

    _axios.default.get.mockImplementationOnce(() => Promise.reject({
      error: 'error'
    }));

    const passActions = [{
      type: 'FETCH_VOLUME_INFO',
      volumes: []
    }, {
      type: 'ENABLE_FETCHING_ALERTS',
      fetchingAlerts: false
    }];
    const fakeStore = {
      dispatch: action => dispatchedActions.push(action)
    };
    await (0, _reduxSaga.runSaga)(fakeStore, _dashboardSaga.fetchVolumeInfo).done;
    expect(_axios.default.get).toHaveBeenCalledTimes(2);
    expect(_axios.default.get.mockResolvedValue('error'));
    expect(dispatchedActions).toEqual(passActions);
    console.log(dispatchedActions);
  });
  it('should render fetch alerts info', async () => {
    const dispatchedActions = [];

    _axios.default.get.mockImplementationOnce(() => Promise.resolve({
      data: {
        alerts: ['alerts1', 'alerts2']
      }
    }));

    const passActions = [{
      type: 'FETCH_ALERTS_INFO',
      alerts: ['alerts1', 'alerts2']
    }];
    const fakeStore = {
      dispatch: action => dispatchedActions.push(action)
    };
    await (0, _reduxSaga.runSaga)(fakeStore, _dashboardSaga.fetchAlertsInfo).done;
    console.log(dispatchedActions);
    expect(_axios.default.get).toHaveBeenCalledTimes(3);
    expect(_axios.default.get.mockResolvedValue(['alerts1', 'alerts2']));
    expect(dispatchedActions).toEqual(passActions);
    console.log(dispatchedActions);
  });
  it('if axios api return error in fetch alerts sagas', async () => {
    const dispatchedActions = [];

    _axios.default.get.mockImplementationOnce(() => Promise.reject({
      error: 'error'
    }));

    const passActions = []; // no actions dispatched in case of error

    const fakeStore = {
      dispatch: action => dispatchedActions.push(action)
    };
    await (0, _reduxSaga.runSaga)(fakeStore, _dashboardSaga.fetchAlertsInfo).done;
    console.log(dispatchedActions);
    expect(_axios.default.get).toHaveBeenCalledTimes(4);
    expect(_axios.default.get.mockResolvedValue('error'));
    expect(dispatchedActions).toEqual(passActions);
    console.log(dispatchedActions);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,