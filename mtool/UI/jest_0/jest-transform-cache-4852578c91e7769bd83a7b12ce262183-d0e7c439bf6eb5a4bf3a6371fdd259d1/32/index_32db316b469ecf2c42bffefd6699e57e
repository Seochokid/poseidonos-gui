cb1accb73cfb2b782f93173d1f335645
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _core = require("@material-ui/core");

var _styles = require("@material-ui/core/styles");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _reactRedux = require("react-redux");

require("react-dropdown/style.css");

require("react-table/react-table.css");

var _Header = _interopRequireDefault(require("../../components/Header"));

var _Sidebar = _interopRequireDefault(require("../../components/Sidebar"));

var _ArrayCreate = _interopRequireDefault(require("../../components/ArrayManagement/ArrayCreate"));

var _ArrayShow = _interopRequireDefault(require("../../components/ArrayManagement/ArrayShow"));

var _CreateVolume = _interopRequireDefault(require("../../components/VolumeManagement/CreateVolume"));

var _VolumeList = _interopRequireDefault(require("../../components/VolumeManagement/VolumeList"));

var _MToolLoader = _interopRequireDefault(require("../../components/MToolLoader"));

var _Dialog = _interopRequireDefault(require("../../components/Dialog"));

require("./Volume.css");

var _theme = require("../../theme");

var _Legend = _interopRequireDefault(require("../../components/Legend"));

var actionTypes = _interopRequireWildcard(require("../../store/actions/actionTypes"));

var _bytesToTb = _interopRequireDefault(require("../../utils/bytes-to-tb"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Volume/index.js";

const styles = theme => ({
  dashboardContainer: {
    display: 'flex'
  },
  container: {
    display: 'flex',
    flexWrap: 'wrap',
    width: '100%',
    boxSizing: 'border-box',
    marginTop: theme.spacing(3),
    padding: theme.spacing(0, 3),
    [theme.breakpoints.down('sm')]: {
      padding: theme.spacing(0, 1),
      marginTop: theme.spacing(1)
    }
  },
  content: {
    flexGrow: 1,
    padding: theme.spacing(3),
    paddingTop: "10px",
    paddingLeft: "35px",
    paddingRight: "24px",
    width: '100%',
    boxSizing: 'border-box'
  },
  statsContainer: {
    margin: theme.spacing(1, 0, 2)
  },
  volumeStats: {
    width: '100%',
    border: '0px solid gray',
    height: 50
  },
  toolbar: _theme.customTheme.toolbar,
  titleContainer: {
    marginTop: theme.spacing(1)
  },
  volumeStatsPaper: {
    height: 330,
    [theme.breakpoints.down('xs')]: {
      height: 170
    }
  },
  pageHeader: _theme.customTheme.page.title,
  cardHeader: _theme.customTheme.card.header,
  card: {
    marginTop: theme.spacing(1)
  }
});

class Volume extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      mobileOpen: false
    };
    this.deleteVolumes = this.deleteVolumes.bind(this);
    this.fetchVolumes = this.fetchVolumes.bind(this);
    this.createArray = this.createArray.bind(this);
    this.createVolume = this.createVolume.bind(this);
    this.deleteArray = this.deleteArray.bind(this);
    this.alertConfirm = this.alertConfirm.bind(this);
    this.fetchDevices = this.fetchDevices.bind(this);
    this.fetchStorageInfo = this.fetchStorageInfo.bind(this);
    this.fetchMaxVolumeCount = this.fetchMaxVolumeCount.bind(this);
    this.handleDrawerToggle = this.handleDrawerToggle.bind(this);
  }

  componentDidMount() {
    this.fetchDevices();
    this.fetchStorageInfo();
    this.fetchMaxVolumeCount();
  }

  handleDrawerToggle() {
    this.setState({
      mobileOpen: !this.state.mobileOpen
    });
  }

  createVolume(volume) {
    this.props.Create_Volume({
      name: volume.volume_name,
      size: volume.volume_size,
      description: volume.volume_description,
      unit: volume.volume_units,
      arrayname: "",
      maxbw: volume.maxbw,
      maxiops: volume.maxiops,
      count: volume.volume_count,
      suffix: volume.volume_suffix,
      stop_on_error: volume.stop_on_error_checkbox,
      mount_vol: volume.mount_vol
    });
  }

  fetchVolumes() {
    this.props.Get_Volumes();
  }

  fetchStorageInfo() {
    this.props.Get_Array_Size();
  }

  fetchMaxVolumeCount() {
    this.props.Get_Max_Volume_Count();
  }

  deleteVolumes(volumes) {
    const ids = [];
    volumes.forEach(volume => {
      ids.push(volume.name);
    });
    this.props.Delete_Volumes({
      volumes: ids
    });
  }

  fetchDevices() {
    this.props.Get_Devices(this.props.history);
  }

  createArray(array) {
    this.props.Create_Array(array);
  }

  deleteArray() {
    this.props.Delete_Array({
      arrayname: ""
    });
  }

  alertConfirm() {
    this.props.Close_Alert();
  }

  render() {
    const volumeFilledStyle = {
      width: `${this.props.arraySize !== 0 ? 100 * (this.props.totalVolSize * 1024 * 1024 * 1024 * 1024) / this.props.arraySize : 0}%`,
      height: '100%',
      backgroundColor: 'rgba(51, 158, 255,0.6)',
      float: 'left',
      overflowY: 'hidden',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    };
    const volumeFreeStyle = {
      width: `${this.props.arraySize !== 0 ? 100 - 100 * (this.props.totalVolSize * 1024 * 1024 * 1024 * 1024) / this.props.arraySize : 100}%`,
      height: '100%',
      color: 'white',
      backgroundColor: 'rgba(0, 186, 0, 0.6)',
      float: 'left',
      overflowY: 'hidden',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    };
    const classes = this.props.classes;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 211
      },
      __self: this
    }, _react.default.createElement(_core.Box, {
      display: "flex",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 212
      },
      __self: this
    }, _react.default.createElement(_Header.default, {
      toggleDrawer: this.handleDrawerToggle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 213
      },
      __self: this
    }), _react.default.createElement(_Sidebar.default, {
      mobileOpen: this.state.mobileOpen,
      toggleDrawer: this.handleDrawerToggle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 214
      },
      __self: this
    }), _react.default.createElement("main", {
      className: classes.content,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 215
      },
      __self: this
    }, _react.default.createElement("div", {
      className: classes.toolbar,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 216
      },
      __self: this
    }), _react.default.createElement(_core.Grid, {
      container: true,
      spacing: 3,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 217
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      spacing: 3,
      className: classes.titleContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 218
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      xs: 12,
      item: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 219
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.pageHeader,
      variant: "h6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 220
      },
      __self: this
    }, "Storage Management"))), _react.default.createElement(_core.Grid, {
      container: true,
      xs: 12,
      spacing: 1,
      className: classes.card,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 225
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 226
      },
      __self: this
    }, _react.default.createElement(_core.Paper, {
      spacing: 3,
      className: classes.spaced,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 227
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      justify: "space-between",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 228
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 229
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.cardHeader,
      "data-testid": "title",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 230
      },
      __self: this
    }, "Array Management")), this.props.arrayExists ? _react.default.createElement(_ArrayShow.default, {
      RAIDLevel: this.props.RAIDLevel,
      slots: this.props.ssds,
      corrupted: this.props.corrupted,
      storagedisks: this.props.storagedisks,
      sparedisks: this.props.sparedisks,
      metadiskpath: this.props.metadiskpath,
      writebufferdisks: this.props.writebufferdisks,
      deleteArray: this.deleteArray,
      diskDetails: this.props.diskDetails,
      getDiskDetails: this.props.Get_Disk_Details,
      detachDisk: this.props.Detach_Disk,
      attachDisk: this.props.Attach_Disk,
      addSpareDisk: this.props.Add_Spare_Disk,
      removeSpareDisk: this.props.Remove_Spare_Disk,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 235
      },
      __self: this
    }) : _react.default.createElement(_ArrayCreate.default, {
      createArray: this.createArray,
      disks: this.props.ssds,
      "data-testid": "arraycreate",
      metadisks: this.props.metadisks,
      diskDetails: this.props.diskDetails,
      getDiskDetails: this.props.Get_Disk_Details,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 252
      },
      __self: this
    }))))), this.props.arrayExists ? _react.default.createElement(_react.default.Fragment, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 266
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      xs: 12,
      spacing: 1,
      className: classes.card,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 267
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      md: 6,
      className: classes.spaced,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 268
      },
      __self: this
    }, _react.default.createElement(_CreateVolume.default, {
      "data-testid": "createvolume",
      createVolume: this.createVolume,
      maxVolumeCount: this.props.maxVolumeCount,
      volCount: this.props.volumes.length,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 269
      },
      __self: this
    })), _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      md: 6,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 272
      },
      __self: this
    }, _react.default.createElement(_core.Paper, {
      className: classes.volumeStatsPaper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 273
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 274
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.cardHeader,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 275
      },
      __self: this
    }, "Volume Statistics")), _react.default.createElement("div", {
      className: classes.container,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 279
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 280
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      variant: "span",
      color: "secondary",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 281
      },
      __self: this
    }, "Number of volumes: ", this.props.volumes.length)), _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      className: classes.statsContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 285
      },
      __self: this
    }, _react.default.createElement(_core.Box, {
      className: classes.volumeStats,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 286
      },
      __self: this
    }, _react.default.createElement("div", {
      style: volumeFilledStyle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 287
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      variant: "span",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 288
      },
      __self: this
    }, (0, _bytesToTb.default)(this.props.totalVolSize * 1024 * 1024 * 1024 * 1024))), _react.default.createElement("div", {
      style: volumeFreeStyle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 292
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      variant: "span",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 293
      },
      __self: this
    }, (0, _bytesToTb.default)(this.props.arraySize - this.props.totalVolSize * 1024 * 1024 * 1024 * 1024)))), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      wrap: "wrap",
      className: classes.legendContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 299
      },
      __self: this
    }, _react.default.createElement(_Legend.default, {
      bgColor: "rgba(51, 158, 255,0.6)",
      title: `
                          Used Space :
                          ${(0, _bytesToTb.default)(this.props.totalVolSize * 1024 * 1024 * 1024 * 1024)}
                        `,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 300
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "rgba(0, 186, 0, 0.6)",
      title: `
                          Available for Volume Creation :
                          ${(0, _bytesToTb.default)(this.props.arraySize - this.props.totalVolSize * 1024 * 1024 * 1024 * 1024)}
                        `,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 309
      },
      __self: this
    }))))))), _react.default.createElement(_core.Grid, {
      container: true,
      xs: 12,
      spacing: 1,
      className: classes.card,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 326
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 327
      },
      __self: this
    }, _react.default.createElement(_VolumeList.default, {
      ref: this.child,
      volumeFetch: this.fetchVolumes,
      volumes: this.props.volumes,
      deleteVolumes: this.deleteVolumes,
      editVolume: this.props.Edit_Volume,
      changeField: this.props.Change_Volume_Field,
      fetchVolumes: this.fetchVolumes,
      saveVolume: this.props.Update_Volume,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 328
      },
      __self: this
    })))) : null, this.props.loading ? _react.default.createElement(_MToolLoader.default, {
      text: this.props.loadText,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 343
      },
      __self: this
    }) : null, _react.default.createElement(_Dialog.default, {
      title: this.props.alertTitle,
      description: this.props.errorMsg,
      open: this.props.alertOpen,
      type: this.props.alertType,
      onConfirm: this.alertConfirm,
      handleClose: this.alertConfirm,
      errCode: this.props.errorCode,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 345
      },
      __self: this
    })))));
  }

}

const mapStateToProps = state => {
  return {
    ssds: state.storageReducer.ssds,
    metadisks: state.storageReducer.metadisks,
    volumes: state.storageReducer.volumes,
    loading: state.storageReducer.loading,
    alertOpen: state.storageReducer.alertOpen,
    alertType: state.storageReducer.alertType,
    alertTitle: state.storageReducer.alertTitle,
    errorMsg: state.storageReducer.errorMsg,
    errorCode: state.storageReducer.errorCode,
    arraySize: state.storageReducer.arraySize,
    maxVolumeCount: state.storageReducer.maxVolumeCount,
    totalVolSize: state.storageReducer.totalVolSize,
    storagedisks: state.storageReducer.storagedisks,
    sparedisks: state.storageReducer.sparedisks,
    writebufferdisks: state.storageReducer.writebufferdisks,
    metadiskpath: state.storageReducer.metadiskpath,
    slots: state.storageReducer.slots,
    arrayExists: state.storageReducer.arrayExists,
    RAIDLevel: state.storageReducer.RAIDLevel,
    diskDetails: state.storageReducer.diskDetails,
    loadText: state.storageReducer.loadText
  };
};

const mapDispatchToProps = dispatch => {
  return {
    Get_Devices: payload => dispatch({
      type: actionTypes.SAGA_FETCH_DEVICE_INFO,
      payload
    }),
    Create_Volume: payload => dispatch({
      type: actionTypes.SAGA_SAVE_VOLUME,
      payload
    }),
    Get_Array_Size: () => dispatch({
      type: actionTypes.SAGA_FETCH_ARRAY_SIZE
    }),
    // To be used when Delete Array functionalitiy is implemented by Poseidon OS
    // Delete_Array: (payload) => dispatch({type: actionTypes.SAGA_DELETE_ARRAY, payload}),
    Get_Volumes: () => dispatch({
      type: actionTypes.SAGA_FETCH_VOLUMES
    }),
    Delete_Volumes: payload => dispatch({
      type: actionTypes.SAGA_DELETE_VOLUMES,
      payload
    }),
    Close_Alert: () => dispatch({
      type: actionTypes.STORAGE_CLOSE_ALERT
    }),
    Create_Array: payload => dispatch({
      type: actionTypes.SAGA_CREATE_ARRAY,
      payload
    }),
    Get_Disk_Details: payload => dispatch({
      type: actionTypes.SAGA_FETCH_DEVICE_DETAILS,
      payload
    }),
    Edit_Volume: payload => dispatch({
      type: actionTypes.EDIT_VOLUME,
      payload
    }),
    Change_Volume_Field: payload => dispatch({
      type: actionTypes.CHANGE_VOLUME_FIELD,
      payload
    }),
    Update_Volume: payload => dispatch({
      type: actionTypes.SAGA_UPDATE_VOLUME,
      payload
    }),
    Detach_Disk: payload => dispatch({
      type: actionTypes.SAGA_DETACH_DISK,
      payload
    }),
    Attach_Disk: payload => dispatch({
      type: actionTypes.SAGA_ATTACH_DISK,
      payload
    }),
    Add_Spare_Disk: payload => dispatch({
      type: actionTypes.SAGA_ADD_SPARE_DISK,
      payload
    }),
    Remove_Spare_Disk: payload => dispatch({
      type: actionTypes.SAGA_REMOVE_SPARE_DISK,
      payload
    }),
    Get_Max_Volume_Count: () => dispatch({
      type: actionTypes.SAGA_FETCH_MAX_VOLUME_COUNT
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Volume));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,