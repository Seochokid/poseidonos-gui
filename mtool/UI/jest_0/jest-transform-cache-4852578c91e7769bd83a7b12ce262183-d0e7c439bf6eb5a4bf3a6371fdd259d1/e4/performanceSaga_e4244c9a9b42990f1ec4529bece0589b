3c86078cb4850d683ca65cdc9ed031fd
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchInputPowerVariation = fetchInputPowerVariation;
exports.fetchCpuUsage = fetchCpuUsage;
exports.fetchReadBandwidth = fetchReadBandwidth;
exports.fetchReadIops = fetchReadIops;
exports.fetchWriteIops = fetchWriteIops;
exports.fetchLatency = fetchLatency;
exports.default = performanceWatcher;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function extractValues(data) {
  if (data.length === 0) {
    data.push({
      value: 0,
      time: new Date()
    });
    data.push({
      value: 0,
      time: new Date(Date.now() - 10000)
    });
  }

  return data;
} // function* fetchDiskUsed(action) {
//     try {
//         const response = yield call([axios, axios.get], `/api/v1.0/disk_used_percent/${action.payload.time}/array`);
//         const result = response.data;
//         if (result && !result.message) {
//             const values = [];
//             result.forEach((r) => {
//                 if (r.used_percent !== null) {
//                     values.push({
//                         value: r.used_percent,
//                         time: r.time
//                     })
//                 }
//             });
//             yield put(actionCreators.fetchDiskUsed(result));
//         } else {
//             yield put(actionCreators.fetchDiskUsed([]));
//         }
//     }
//     catch (error) {
//         yield put(actionCreators.fetchDiskUsed([]));
//     }
//     finally {
//         if (yield cancelled()) {
//             yield put(actionCreators.fetchDiskUsed([]));
//         }
//     }
// }
// function* fetchDiskWrite(action) {
//     try {
//         const response = yield call([axios, axios.get], `/api/v1.0/disk_write_mbps/${action.payload.time}/array`);
//         const result = response.data;
//         if (result && !result.message) {
//             const values = [];
//             result.forEach((r) => {
//                 if (r.write_megabytes_per_second !== null) {
//                     values.push({
//                         value: r.write_megabytes_per_second,
//                         time: r.time
//                     })
//                 }
//             });
//             yield put(actionCreators.fetchDiskWrite(values));
//         } else {
//             yield put(actionCreators.fetchDiskWrite([]));
//         }
//     }
//     catch (error) {
//         yield put(actionCreators.fetchDiskWrite([]));
//     }
//     finally {
//         if (yield cancelled()) {
//             yield put(actionCreators.fetchDiskWrite([]));
//         }
//     }
// }


function* fetchInputPowerVariation(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/get_input_power_variation/${action.payload.time}`);
    const result = response.data;

    if (result && !result.message) {
      yield (0, _effects.put)(actionCreators.fetchInputPowerVariation(extractValues(result.res)));
    } else {
      yield (0, _effects.put)(actionCreators.fetchInputPowerVariation([]));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.fetchInputPowerVariation([]));
  } finally {
    if (yield (0, _effects.cancelled)()) {
      yield (0, _effects.put)(actionCreators.fetchInputPowerVariation([]));
    }
  }
}

function* fetchCpuUsage(action) {
  // console.log("fetchCpuUsage")
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/usage_user/${action.payload.time}`);
    const result = response.data;

    if (result && !result.message) {
      const values = [];
      result.forEach(r => {
        if (r.mean_usage_user !== null) {
          values.push({
            value: r.mean_usage_user,
            time: r.time
          });
        }
      });
      yield (0, _effects.put)(actionCreators.fetchCpuUsage(values));
    } else {
      yield (0, _effects.put)(actionCreators.fetchCpuUsage([]));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.fetchCpuUsage([]));
  } finally {
    if (yield (0, _effects.cancelled)()) {
      yield (0, _effects.put)(actionCreators.fetchCpuUsage([]));
    }
  }
}

function* fetchReadBandwidth(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/bw_read/${action.payload.time}/${action.payload.level}`);
    const result = response.data;

    if (result && !result.message) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchReadBandwidth(extractValues(result.res)));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolReadBandwidth(_objectSpread({
          values: extractValues(result.res)
        }, action.payload)));
      }
    } else if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchReadBandwidth([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolReadBandwidth(_objectSpread({
        values: []
      }, action.payload)));
    }
  } catch (error) {
    if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchReadBandwidth([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolReadBandwidth(_objectSpread({
        values: []
      }, action.payload)));
    }
  } finally {
    if (yield (0, _effects.cancelled)()) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchReadBandwidth([]));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolReadBandwidth(_objectSpread({
          values: []
        }, action.payload)));
      }
    }
  }
}

function* fetchWriteBandwidth(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/bw_write/${action.payload.time}/${action.payload.level}`);
    const result = response.data;

    if (result && !result.message) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchWriteBandwidth(extractValues(result.res)));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolWriteBandwidth(_objectSpread({
          values: extractValues(result.res)
        }, action.payload)));
      }
    } else if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchWriteBandwidth([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolWriteBandwidth(_objectSpread({
        values: []
      }, action.payload)));
    }
  } catch (error) {
    if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchWriteBandwidth([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolWriteBandwidth(_objectSpread({
        values: []
      }, action.payload)));
    }
  } finally {
    // console.log("finally")
    if (yield (0, _effects.cancelled)()) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchWriteBandwidth([]));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolWriteBandwidth(_objectSpread({
          values: []
        }, action.payload)));
      }
    }
  }
}

function* fetchReadIops(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/iops_read/${action.payload.time}/${action.payload.level}`);
    const result = response.data;

    if (result && !result.message) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchReadIops(extractValues(result.res)));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolReadIops(_objectSpread({
          values: extractValues(result.res)
        }, action.payload)));
      }
    } else if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchReadIops([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolReadIops(_objectSpread({
        values: []
      }, action.payload)));
    }
  } catch (error) {
    if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchReadIops([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolReadIops(_objectSpread({
        values: []
      }, action.payload)));
    }
  } finally {
    if (yield (0, _effects.cancelled)()) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchReadIops([]));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolReadIops(_objectSpread({
          values: []
        }, action.payload)));
      }
    }
  }
}

function* fetchWriteIops(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/iops_write/${action.payload.time}/${action.payload.level}`);
    const result = response.data;

    if (result && !result.message) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchWriteIops(extractValues(result.res)));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolWriteIops(_objectSpread({
          values: extractValues(result.res)
        }, action.payload)));
      }
    } else if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchWriteIops([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolWriteIops(_objectSpread({
        values: []
      }, action.payload)));
    }
  } catch (error) {
    if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchWriteIops([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolWriteIops(_objectSpread({
        values: []
      }, action.payload)));
    }
  } finally {
    if (yield (0, _effects.cancelled)()) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchWriteIops([]));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolWriteIops(_objectSpread({
          values: []
        }, action.payload)));
      }
    }
  }
}

function* fetchLatency(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/latency/${action.payload.time}/${action.payload.level}`);
    const result = response.data;

    if (result && !result.message) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchLatency(extractValues(result.res)));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolLatency(_objectSpread({
          values: extractValues(result.res)
        }, action.payload)));
      }
    } else if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchLatency([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolLatency(_objectSpread({
        values: []
      }, action.payload)));
    }
  } catch (error) {
    if (action.payload.level === "array") {
      yield (0, _effects.put)(actionCreators.fetchLatency([]));
    } else {
      yield (0, _effects.put)(actionCreators.fetchVolLatency(_objectSpread({
        values: []
      }, action.payload)));
    }
  } finally {
    if (yield (0, _effects.cancelled)()) {
      if (action.payload.level === "array") {
        yield (0, _effects.put)(actionCreators.fetchLatency([]));
      } else {
        yield (0, _effects.put)(actionCreators.fetchVolLatency(_objectSpread({
          values: []
        }, action.payload)));
      }
    }
  }
}

function* performanceWatcher() {
  // yield takeEvery(actionTypes.SAGA_FETCH_DISK_USED, fetchDiskUsed);
  // yield takeEvery(actionTypes.SAGA_FETCH_DISK_WRITE, fetchDiskWrite);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_CPU_USAGE, fetchCpuUsage);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_READ_BANDWIDTH, fetchReadBandwidth);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_WRITE_BANDWIDTH, fetchWriteBandwidth);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_READ_IOPS, fetchReadIops);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_WRITE_IOPS, fetchWriteIops);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_LATENCY, fetchLatency);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_INPUT_POWER_VARIATION, fetchInputPowerVariation);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,