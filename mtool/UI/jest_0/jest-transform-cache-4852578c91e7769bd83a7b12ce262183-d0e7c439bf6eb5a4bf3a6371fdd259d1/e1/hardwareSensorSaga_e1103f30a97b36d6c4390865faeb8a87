659292d94448fe9914d9227fa299e487
/* istanbul ignore next */
"use strict";

var cov_1xl62rdnlk = function () {
  var path = "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/hardwareSensorSaga.js";
  var hash = "4856ffa700cd43ea45f385e1ecd644de9bc2d089";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/hardwareSensorSaga.js",
    statementMap: {
      "0": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "1": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 41,
          column: 10
        }
      },
      "2": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 47
        }
      },
      "3": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 36
        }
      },
      "4": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 46,
          column: 9
        }
      },
      "5": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 85
        }
      },
      "6": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 47
        }
      },
      "7": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 59
        }
      },
      "8": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "9": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 74
        }
      },
      "10": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "11": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 47
        }
      },
      "12": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 36
        }
      },
      "13": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "14": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 81
        }
      },
      "15": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 47
        }
      },
      "16": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 57
        }
      },
      "17": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "18": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 74
        }
      },
      "19": {
        start: {
          line: 84,
          column: 25
        },
        end: {
          line: 90,
          column: 10
        }
      },
      "20": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 47
        }
      },
      "21": {
        start: {
          line: 92,
          column: 23
        },
        end: {
          line: 92,
          column: 36
        }
      },
      "22": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "23": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 97
        }
      },
      "24": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 47
        }
      },
      "25": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 65
        }
      },
      "26": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 106,
          column: 108
        }
      },
      "27": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 104
        }
      },
      "28": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 108,
          column: 120
        }
      }
    },
    fnMap: {
      "0": {
        name: "fetchPowerSensorInfo",
        decl: {
          start: {
            line: 32,
            column: 17
          },
          end: {
            line: 32,
            column: 37
          }
        },
        loc: {
          start: {
            line: 32,
            column: 40
          },
          end: {
            line: 54,
            column: 1
          }
        },
        line: 32
      },
      "1": {
        name: "fetchFanSensorInfo",
        decl: {
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 56,
            column: 35
          }
        },
        loc: {
          start: {
            line: 56,
            column: 38
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 56
      },
      "2": {
        name: "fetchTemperatureSensorInfo",
        decl: {
          start: {
            line: 81,
            column: 17
          },
          end: {
            line: 81,
            column: 43
          }
        },
        loc: {
          start: {
            line: 81,
            column: 46
          },
          end: {
            line: 103,
            column: 1
          }
        },
        line: 81
      },
      "3": {
        name: "hardwareSensorWatcher",
        decl: {
          start: {
            line: 105,
            column: 17
          },
          end: {
            line: 105,
            column: 38
          }
        },
        loc: {
          start: {
            line: 105,
            column: 41
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 105
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }, {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 46,
            column: 9
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }, {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 71,
            column: 9
          }
        }],
        line: 69
      },
      "2": {
        loc: {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: 93,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }],
        line: 93
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "4856ffa700cd43ea45f385e1ecd644de9bc2d089"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchPowerSensorInfo = fetchPowerSensorInfo;
exports.fetchFanSensorInfo = fetchFanSensorInfo;
exports.fetchTemperatureSensorInfo = fetchTemperatureSensorInfo;
exports.hardwareSensorWatcher = hardwareSensorWatcher;

var
/* istanbul ignore next */
_axios = _interopRequireDefault(require("axios"));

var
/* istanbul ignore next */
_effects = require("redux-saga/effects");

var
/* istanbul ignore next */
actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var
/* istanbul ignore next */
actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

function* fetchPowerSensorInfo() {
  /* istanbul ignore next */
  cov_1xl62rdnlk.f[0]++;
  cov_1xl62rdnlk.s[0]++;

  try {
    // yield put(actionCreators.startLoader('Fetching BMC Information'));
    const response =
    /* istanbul ignore next */
    (cov_1xl62rdnlk.s[1]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.get], '/api/v1.0/get_power_sensor_info/', {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    cov_1xl62rdnlk.s[2]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.stopLoader())
    );
    const result =
    /* istanbul ignore next */
    (cov_1xl62rdnlk.s[3]++, response.data);

    /* istanbul ignore next */
    cov_1xl62rdnlk.s[4]++;

    if (result) {
      /* istanbul ignore next */
      cov_1xl62rdnlk.b[0][0]++;
      cov_1xl62rdnlk.s[5]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.fetchPowerSensorInfo(result.power_sensor_info))
      );
    } else
    /* istanbul ignore next */
    {
      cov_1xl62rdnlk.b[0][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1xl62rdnlk.s[6]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.stopLoader())
    );

    /* istanbul ignore next */
    cov_1xl62rdnlk.s[7]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.fetchPowerSensorInfo([]))
    );
  } finally {
    ;
  }
}

function* fetchFanSensorInfo() {
  /* istanbul ignore next */
  cov_1xl62rdnlk.f[1]++;
  cov_1xl62rdnlk.s[8]++;

  try {
    /* istanbul ignore next */
    cov_1xl62rdnlk.s[9]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.startLoader('Fetching BMC Information'))
    );
    const response =
    /* istanbul ignore next */
    (cov_1xl62rdnlk.s[10]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.get], '/api/v1.0/get_fan_sensor_info/', {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    cov_1xl62rdnlk.s[11]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.stopLoader())
    );
    const result =
    /* istanbul ignore next */
    (cov_1xl62rdnlk.s[12]++, response.data);

    /* istanbul ignore next */
    cov_1xl62rdnlk.s[13]++;

    if (result) {
      /* istanbul ignore next */
      cov_1xl62rdnlk.b[1][0]++;
      cov_1xl62rdnlk.s[14]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.fetchFanSensorInfo(result.fan_sensor_info))
      );
    } else
    /* istanbul ignore next */
    {
      cov_1xl62rdnlk.b[1][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1xl62rdnlk.s[15]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.stopLoader())
    );

    /* istanbul ignore next */
    cov_1xl62rdnlk.s[16]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.fetchFanSensorInfo([]))
    );
  } finally {
    ;
  }
}

function* fetchTemperatureSensorInfo() {
  /* istanbul ignore next */
  cov_1xl62rdnlk.f[2]++;
  cov_1xl62rdnlk.s[17]++;

  try {
    /* istanbul ignore next */
    cov_1xl62rdnlk.s[18]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.startLoader('Fetching BMC Information'))
    );
    const response =
    /* istanbul ignore next */
    (cov_1xl62rdnlk.s[19]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.get], '/api/v1.0/get_temperature_sensor_info/', {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    cov_1xl62rdnlk.s[20]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.stopLoader())
    );
    const result =
    /* istanbul ignore next */
    (cov_1xl62rdnlk.s[21]++, response.data);

    /* istanbul ignore next */
    cov_1xl62rdnlk.s[22]++;

    if (result) {
      /* istanbul ignore next */
      cov_1xl62rdnlk.b[2][0]++;
      cov_1xl62rdnlk.s[23]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.fetchTemperatureSensorInfo(result.temperature_sensor_info))
      );
    } else
    /* istanbul ignore next */
    {
      cov_1xl62rdnlk.b[2][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1xl62rdnlk.s[24]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.stopLoader())
    );

    /* istanbul ignore next */
    cov_1xl62rdnlk.s[25]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.fetchTemperatureSensorInfo([]))
    );
  } finally {
    ;
  }
}

function* hardwareSensorWatcher() {
  /* istanbul ignore next */
  cov_1xl62rdnlk.f[3]++;
  cov_1xl62rdnlk.s[26]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_HARDWARE_SENSORS_FETCH_POWER_SENSOR_INFORMATION, fetchPowerSensorInfo)
  );

  /* istanbul ignore next */
  cov_1xl62rdnlk.s[27]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_HARDWARE_SENSORS_FETCH_FAN_SENSOR_INFORMATION, fetchFanSensorInfo)
  );

  /* istanbul ignore next */
  cov_1xl62rdnlk.s[28]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_HARDWARE_SENSORS_FETCH_TEMPERATURE_SENSOR_INFORMATION, fetchTemperatureSensorInfo)
  );
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,