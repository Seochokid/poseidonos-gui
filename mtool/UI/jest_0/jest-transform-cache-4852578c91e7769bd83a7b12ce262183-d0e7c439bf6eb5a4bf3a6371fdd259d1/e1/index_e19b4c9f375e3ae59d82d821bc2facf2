d42adfd1c41362085bdebdf42b4085d9
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _styles = require("@material-ui/core/styles");

var _materialTable = _interopRequireDefault(require("material-table"));

var _core = require("@material-ui/core");

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _SaveAlt = _interopRequireDefault(require("@material-ui/icons/SaveAlt"));

var _ChevronLeft = _interopRequireDefault(require("@material-ui/icons/ChevronLeft"));

var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var _FirstPage = _interopRequireDefault(require("@material-ui/icons/FirstPage"));

var _LastPage = _interopRequireDefault(require("@material-ui/icons/LastPage"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _FilterList = _interopRequireDefault(require("@material-ui/icons/FilterList"));

var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));

var _Edit = _interopRequireDefault(require("@material-ui/icons/Edit"));

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _ArrowUpward = _interopRequireDefault(require("@material-ui/icons/ArrowUpward"));

var _Clear = _interopRequireDefault(require("@material-ui/icons/Clear"));

var _Ok14x = _interopRequireDefault(require("../../../assets/images/Ok14x14.png"));

var _NotOk14x = _interopRequireDefault(require("../../../assets/images/Not-Ok14x14.png"));

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/SensorComponents/TemperatureSensor/index.js";

const styles = theme => ({
  multilineColor: {
    color: 'black'
  },
  root: {
    flexGrow: 1
  },
  Paper: {
    marginTop: theme.spacing(2),
    width: '100%',
    maxHeight: '100%'
  },
  tempParentGrid: {
    maxWidth: '100%',
    flexBasis: '100%',
    minHeight: '100%'
  },
  tempOuterGrid: {
    border: '1px solid gray',
    maxWidth: '100%',
    flexBasis: '100%',
    overflowY: 'auto',
    overflowX: 'hidden',
    background: '#fff'
  }
});

class TemperatureSensor extends _react.Component {
  constructor(props) {
    super(props);
    this.theme = (0, _core.createMuiTheme)({
      overrides: {
        MuiSvgIcon: {
          //  stylesheet name
          root: {
            //  rule name
            color: '#808080'
          }
        },
        MuiTablePagination: {
          menuItem: {
            fontSize: "12px",
            minHeight: "0px"
          },
          select: {
            width: "45px"
          },
          toolbar: {
            maxHeight: '50px',
            minHeight: '20px'
          }
        }
      },
      palette: {
        primary: {
          main: '#4caf50'
        },
        secondary: {
          main: '#808080'
        }
      }
    });
    this.state = {
      columns: [{
        title: 'Sensor name',
        field: 'Name',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        }
      }, {
        title: 'Health',
        field: 'Status.Health',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("img", {
          src: rowData.Status.Health === 'OK' ? _Ok14x.default : _NotOk14x.default,
          alt: rowData.Status.Health === 'OK' ? "Sit and Relax" : 'Mayday',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 140
          },
          __self: this
        })
      }, {
        title: 'Current Temperature (C)',
        field: 'ReadingCelsius',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        }
      }, {
        title: 'Max Temperature Threshold (C)',
        field: 'UpperThresholdNonCritical',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("p", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 160
          },
          __self: this
        }, " ", rowData.UpperThresholdNonCritical ? rowData.UpperThresholdNonCritical : "NA", " ")
      }]
    };
  }

  componentDidMount() {
    this.props.fetchTemperatureSensorInfo();
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_core.Paper, {
      className: classes.Paper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 175
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      sm: 6,
      xs: 12,
      item: true,
      container: true,
      className: classes.tempParentGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 176
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      xs: 12,
      item: true,
      className: classes.tempOuterGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 177
      },
      __self: this
    }, _react.default.createElement(_MuiThemeProvider.default, {
      theme: this.theme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 178
      },
      __self: this
    }, _react.default.createElement(_materialTable.default, {
      icons: {
        Check: _Check.default,
        FirstPage: _FirstPage.default,
        LastPage: _LastPage.default,
        NextPage: _ChevronRight.default,
        PreviousPage: _ChevronLeft.default,
        Search: _Search.default,
        ThirdStateCheck: _Remove.default,
        DetailPanel: _ChevronRight.default,
        Export: _SaveAlt.default,
        Filter: _FilterList.default,
        Add: _Add.default,
        Edit: _Edit.default,
        Delete: _Delete.default,
        SortArrow: _ArrowUpward.default,
        Clear: _Clear.default
      },
      columns: this.state.columns,
      data: this.props.temp_sensor_info,
      options: {
        actionsColumnIndex: -1,
        selection: false,
        sorting: true,
        toolbar: false,
        rowStyle: {
          fontSize: '4px'
        },
        search: false,
        paginationType: 'normal',
        loadingType: 'linear',
        maxBodyHeight: '500px',
        headerStyle: {
          backgroundColor: '#788595',
          color: 'rgba(255, 255, 255, 0.87)',
          fontSize: '14px',
          height: '10%',
          paddingTop: '2px',
          paddingBottom: '2px'
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 179
      },
      __self: this
    })))));
  }

}

const mapStateToProps = state => {
  return {
    temp_sensor_info: state.hardwareSensorReducer.temperature_sensor_info
  };
};

const mapDispatchToProps = dispatch => {
  return {
    fetchTemperatureSensorInfo: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_SENSORS_FETCH_TEMPERATURE_SENSOR_INFORMATION
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(TemperatureSensor));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInN0eWxlcyIsInRoZW1lIiwibXVsdGlsaW5lQ29sb3IiLCJjb2xvciIsInJvb3QiLCJmbGV4R3JvdyIsIlBhcGVyIiwibWFyZ2luVG9wIiwic3BhY2luZyIsIndpZHRoIiwibWF4SGVpZ2h0IiwidGVtcFBhcmVudEdyaWQiLCJtYXhXaWR0aCIsImZsZXhCYXNpcyIsIm1pbkhlaWdodCIsInRlbXBPdXRlckdyaWQiLCJib3JkZXIiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJiYWNrZ3JvdW5kIiwiVGVtcGVyYXR1cmVTZW5zb3IiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwib3ZlcnJpZGVzIiwiTXVpU3ZnSWNvbiIsIk11aVRhYmxlUGFnaW5hdGlvbiIsIm1lbnVJdGVtIiwiZm9udFNpemUiLCJzZWxlY3QiLCJ0b29sYmFyIiwicGFsZXR0ZSIsInByaW1hcnkiLCJtYWluIiwic2Vjb25kYXJ5Iiwic3RhdGUiLCJjb2x1bW5zIiwidGl0bGUiLCJmaWVsZCIsImNlbGxTdHlsZSIsImZvbnRGYW1pbHkiLCJyZW5kZXIiLCJyb3dEYXRhIiwiU3RhdHVzIiwiSGVhbHRoIiwiSGVhbHRoX09LX0ljb24iLCJIZWFsdGhfTk9UX09LX0ljb24iLCJVcHBlclRocmVzaG9sZE5vbkNyaXRpY2FsIiwiY29tcG9uZW50RGlkTW91bnQiLCJmZXRjaFRlbXBlcmF0dXJlU2Vuc29ySW5mbyIsImNsYXNzZXMiLCJDaGVjayIsIkZpcnN0UGFnZSIsIkxhc3RQYWdlIiwiTmV4dFBhZ2UiLCJDaGV2cm9uUmlnaHQiLCJQcmV2aW91c1BhZ2UiLCJDaGV2cm9uTGVmdCIsIlNlYXJjaCIsIlRoaXJkU3RhdGVDaGVjayIsIlJlbW92ZSIsIkRldGFpbFBhbmVsIiwiRXhwb3J0IiwiU2F2ZUFsdCIsIkZpbHRlciIsIkZpbHRlckxpc3QiLCJBZGQiLCJFZGl0IiwiRWRpdEljb24iLCJEZWxldGUiLCJUcmFzaEljb24iLCJTb3J0QXJyb3ciLCJBcnJvd1Vwd2FyZCIsIkNsZWFyIiwidGVtcF9zZW5zb3JfaW5mbyIsImFjdGlvbnNDb2x1bW5JbmRleCIsInNlbGVjdGlvbiIsInNvcnRpbmciLCJyb3dTdHlsZSIsInNlYXJjaCIsInBhZ2luYXRpb25UeXBlIiwibG9hZGluZ1R5cGUiLCJtYXhCb2R5SGVpZ2h0IiwiaGVhZGVyU3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJoZWlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsIm1hcFN0YXRlVG9Qcm9wcyIsImhhcmR3YXJlU2Vuc29yUmVkdWNlciIsInRlbXBlcmF0dXJlX3NlbnNvcl9pbmZvIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwiZGlzcGF0Y2giLCJ0eXBlIiwiYWN0aW9uVHlwZXMiLCJTQUdBX0hBUkRXQVJFX1NFTlNPUlNfRkVUQ0hfVEVNUEVSQVRVUkVfU0VOU09SX0lORk9STUFUSU9OIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQTBCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLE1BQU0sR0FBR0MsS0FBSyxLQUFLO0FBQ3JCQyxFQUFBQSxjQUFjLEVBQUU7QUFDWkMsSUFBQUEsS0FBSyxFQUFFO0FBREssR0FESztBQUlyQkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0ZDLElBQUFBLFFBQVEsRUFBRTtBQURSLEdBSmU7QUFRckJDLEVBQUFBLEtBQUssRUFBRTtBQUNIQyxJQUFBQSxTQUFTLEVBQUVOLEtBQUssQ0FBQ08sT0FBTixDQUFjLENBQWQsQ0FEUjtBQUVIQyxJQUFBQSxLQUFLLEVBQUUsTUFGSjtBQUdIQyxJQUFBQSxTQUFTLEVBQUU7QUFIUixHQVJjO0FBYXJCQyxFQUFBQSxjQUFjLEVBQUU7QUFDWkMsSUFBQUEsUUFBUSxFQUFF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QXBCYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQURKLENBREosQ0FESixDQURKLENBREo7QUFxREg7O0FBaEpxQzs7QUFvSjFDLE1BQU1DLGVBQWUsR0FBR3JELEtBQUssSUFBSTtBQUM3QixTQUFPO0FBQ0h1QyxJQUFBQSxnQkFBZ0IsRUFBRXZDLEtBQUssQ0FBQ3NELHFCQUFOLENBQTRCQztBQUQzQyxHQUFQO0FBR0gsQ0FKRDs7QUFNQSxNQUFNQyxrQkFBa0IsR0FBR0MsUUFBUSxJQUFJO0FBQ25DLFNBQU87QUFDSDNDLElBQUFBLDBCQUEwQixFQUFFLE1BQU0yQyxRQUFRLENBQUM7QUFBRUMsTUFBQUEsSUFBSSxFQUFFQyxXQUFXLENBQUNDO0FBQXBCLEtBQUQ7QUFEdkMsR0FBUDtBQUdILENBSkQ7O2VBTWUsd0JBQVcvRixNQUFYLEVBQW9CLHlCQUFRd0YsZUFBUixFQUF5Qkcsa0JBQXpCLENBQUQsQ0FBaUR2RSxpQkFBakQsQ0FBbkIsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgQ09QWVJJR0hUIChjKSAyMDE5IFNBTVNVTkcgRUxFQ1RST05JQ1MgQ08uLCBMVEQuICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgIEFMTCBSSUdIVFMgUkVTRVJWRUQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCB0byBsaWNlbnNlZXMgb2YgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gICAgICAgIC9cbi8gICBwcm9kdWN0cyB0byB1c2Ugb3IgYWJzdHJhY3QgdGhpcyBjb21wdXRlciBwcm9ncmFtIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mICAgICAgICAgL1xuLyAgIGltcGxlbWVudGluZyBhIHByb2R1Y3QgYmFzZWQgb24gU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gcHJvZHVjdHMuICAgICAgICAgICAvXG4vICAgTm8gb3RoZXIgcmlnaHRzIHRvIHJlcHJvZHVjZSwgdXNlLCBvciBkaXNzZW1pbmF0ZSB0aGlzIGNvbXB1dGVyIHByb2dyYW0sICAgICAgICAgIC9cbi8gICB3aGV0aGVyIGluIHBhcnQgb3IgaW4gd2hvbGUsIGFyZSBncmFudGVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIG1ha2VzIG5vIHJlcHJlc2VudGF0aW9uIG9yIHdhcnJhbnRpZXMgd2l0aCAgICAgICAgICAvXG4vICAgcmVzcGVjdCB0byB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyBjb21wdXRlciBwcm9ncmFtLCBhbmQgc3BlY2lmaWNhbGx5IGRpc2NsYWltcyAgIC9cbi8gICBhbnkgcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYW1hZ2VzLCBzcGVjaWFsIG9yIGNvbnNlcXVlbnRpYWwsIGNvbm5lY3RlZCAgICAgICAgICAgL1xuLyAgIHdpdGggdGhlIHVzZSBvZiB0aGlzIHByb2dyYW0uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuXG5ERVNDUklQVElPTjogU2Vuc29yIFBhZ2UgVGVtcGVyYXR1cmUgQ29tcG9uZW50XG5ATkFNRSA6IGluZGV4LmpzXG5AQVVUSE9SUzogSmF5IEhpdGVzaCBTYW5naGF2aVxuQFZlcnNpb24gOiAxLjAgXG5AUkVWSVNJT04gSElTVE9SWVxuWzAzLzExLzIwMTldIFtKYXldIDogUHJvdG90eXBpbmcuLi4uLi4uLi4uLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiovXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5pbXBvcnQgTWF0ZXJpYWxUYWJsZSBmcm9tICdtYXRlcmlhbC10YWJsZSc7XG5pbXBvcnQgeyBQYXBlciwgY3JlYXRlTXVpVGhlbWUsIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCc7XG5cbmltcG9ydCBUaGVtZVByb3ZpZGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9NdWlUaGVtZVByb3ZpZGVyJztcbmltcG9ydCBTZWFyY2ggZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL1NlYXJjaCc7XG5pbXBvcnQgU2F2ZUFsdCBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvU2F2ZUFsdCc7XG5pbXBvcnQgQ2hldnJvbkxlZnQgZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0NoZXZyb25MZWZ0JztcbmltcG9ydCBDaGV2cm9uUmlnaHQgZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0NoZXZyb25SaWdodCc7XG5pbXBvcnQgRmlyc3RQYWdlIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9GaXJzdFBhZ2UnO1xuaW1wb3J0IExhc3RQYWdlIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9MYXN0UGFnZSc7XG5pbXBvcnQgQWRkIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9BZGQnO1xuaW1wb3J0IENoZWNrIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9DaGVjayc7XG5pbXBvcnQgRmlsdGVyTGlzdCBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvRmlsdGVyTGlzdCc7XG5pbXBvcnQgUmVtb3ZlIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9SZW1vdmUnO1xuaW1wb3J0IEVkaXRJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9FZGl0JztcbmltcG9ydCBUcmFzaEljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0RlbGV0ZSc7XG5pbXBvcnQgQXJyb3dVcHdhcmQgZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL0Fycm93VXB3YXJkJztcbmltcG9ydCBDbGVhciBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvQ2xlYXInO1xuaW1wb3J0IEhlYWx0aF9PS19JY29uIGZyb20gJy4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvT2sxNHgxNC5wbmcnXG5pbXBvcnQgSGVhbHRoX05PVF9PS19JY29uIGZyb20gJy4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvTm90LU9rMTR4MTQucG5nJ1xuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSAnLi4vLi4vLi4vc3RvcmUvYWN0aW9ucy9hY3Rpb25UeXBlcyc7XG5cbmNvbnN0IHN0eWxlcyA9IHRoZW1lID0+ICh7XG4gICAgbXVsdGlsaW5lQ29sb3I6IHtcbiAgICAgICAgY29sb3I6ICdibGFjaydcbiAgICB9LFxuICAgIHJvb3Q6IHtcbiAgICAgICAgZmxleEdyb3c6IDEsXG4gICAgfSxcblxuICAgIFBhcGVyOiB7XG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgbWF4SGVpZ2h0OiAnMTAwJSdcbiAgICB9LFxuICAgIHRlbXBQYXJlbnRHcmlkOiB7XG4gICAgICAgIG1heFdpZHRoOiAnMTAwJScsXG4gICAgICAgIGZsZXhCYXNpczogJzEwMCUnLFxuICAgICAgICBtaW5IZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICB0ZW1wT3V0ZXJHcmlkOiB7XG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBncmF5JyxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgZmxleEJhc2lzOiAnMTAwJScsXG4gICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgfSxcbn0pO1xuXG5cbmNsYXNzIFRlbXBlcmF0dXJlU2Vuc29yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMudGhlbWUgPSBjcmVhdGVNdWlUaGVtZSh7XG4gICAgICAgICAgICBvdmVycmlkZXM6IHtcbiAgICAgICAgICAgICAgICBNdWlTdmdJY29uOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vICBzdHlsZXNoZWV0IG5hbWVcbiAgICAgICAgICAgICAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHJ1bGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjODA4MDgwJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIE11aVRhYmxlUGFnaW5hdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBtZW51SXRlbToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMTJweFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiBcIjBweFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiNDVweFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogJzUwcHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiAnMjBweCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgcGFsZXR0ZToge1xuICAgICAgICAgICAgICAgIHByaW1hcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbjogJyM0Y2FmNTAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2Vjb25kYXJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIG1haW46ICcjODA4MDgwJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcblxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29sdW1uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTZW5zb3IgbmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGNlbGxTdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogJ0FyaWFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnSGVhbHRoJyxcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6ICdTdGF0dXMuSGVhbHRoJyxcbiAgICAgICAgICAgICAgICAgICAgY2VsbFN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAnQXJpYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiByb3dEYXRhID0+XG4gICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyb3dEYXRhLlN0YXR1cy5IZWFsdGggPT09ICdPSycgPyBIZWFsdGhfT0tfSWNvbiA6IEhlYWx0aF9OT1RfT0tfSWNvbn0gYWx0PXtyb3dEYXRhLlN0YXR1cy5IZWFsdGggPT09ICdPSycgPyBcIlNpdCBhbmQgUmVsYXhcIiA6ICdNYXlkYXknfSAvPlxuICAgICAgICAgICAgICAgICAgICApLCBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDdXJyZW50IFRlbXBlcmF0dXJlIChDKScsXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiAnUmVhZGluZ0NlbHNpdXMnLFxuICAgICAgICAgICAgICAgICAgICBjZWxsU3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdBcmlhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01heCBUZW1wZXJhdHVyZSBUaHJlc2hvbGQgKEMpJyxcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6ICdVcHBlclRocmVzaG9sZE5vbkNyaXRpY2FsJyxcbiAgICAgICAgICAgICAgICAgICAgY2VsbFN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAnQXJpYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiByb3dEYXRhID0+XG4gICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7cm93RGF0YS5VcHBlclRocmVzaG9sZE5vbkNyaXRpY2FsID8gcm93RGF0YS5VcHBlclRocmVzaG9sZE5vbkNyaXRpY2FsIDogXCJOQVwifSA8L3A+XG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5mZXRjaFRlbXBlcmF0dXJlU2Vuc29ySW5mbygpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjbGFzc2VzIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFBhcGVyIGNsYXNzTmFtZT17Y2xhc3Nlcy5QYXBlcn0+XG4gICAgICAgICAgICAgICAgPEdyaWQgc209ezZ9IHhzPXsxMn0gaXRlbSBjb250YWluZXIgY2xhc3NOYW1lPXtjbGFzc2VzLnRlbXBQYXJlbnRHcmlkfT5cbiAgICAgICAgICAgICAgICAgICAgPEdyaWQgeHM9ezEyfSBpdGVtIGNsYXNzTmFtZT17Y2xhc3Nlcy50ZW1wT3V0ZXJHcmlkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGlzLnRoZW1lfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWF0ZXJpYWxUYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29ucz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hlY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaXJzdFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMYXN0UGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5leHRQYWdlOiBDaGV2cm9uUmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcmV2aW91c1BhZ2U6IENoZXZyb25MZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VhcmNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcmRTdGF0ZUNoZWNrOiBSZW1vdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXRhaWxQYW5lbDogQ2hldnJvblJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhwb3J0OiBTYXZlQWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsdGVyOiBGaWx0ZXJMaXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRWRpdDogRWRpdEljb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWxldGU6IFRyYXNoSWNvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNvcnRBcnJvdzogQXJyb3dVcHdhcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDbGVhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucz17dGhpcy5zdGF0ZS5jb2x1bW5zfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhPXt0aGlzLnByb3BzLnRlbXBfc2Vuc29yX2luZm99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbnNDb2x1bW5JbmRleDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93U3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzRweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25UeXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmdUeXBlOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heEJvZHlIZWlnaHQ6ICc1MDBweCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJTdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyM3ODg1OTUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjg3KScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdUb3A6ICcycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b206ICcycHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RoZW1lUHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVtcF9zZW5zb3JfaW5mbzogc3RhdGUuaGFyZHdhcmVTZW5zb3JSZWR1Y2VyLnRlbXBlcmF0dXJlX3NlbnNvcl9pbmZvLFxuICAgIH07XG59XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGRpc3BhdGNoID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmZXRjaFRlbXBlcmF0dXJlU2Vuc29ySW5mbzogKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5TQUdBX0hBUkRXQVJFX1NFTlNPUlNfRkVUQ0hfVEVNUEVSQVRVUkVfU0VOU09SX0lORk9STUFUSU9OLCB9KSxcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcykoKGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKSgoKFRlbXBlcmF0dXJlU2Vuc29yKSkpKTsiXX0=