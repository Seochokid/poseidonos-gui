a7588e01b38990a714093222ecf44494
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _d3Array = require("d3-array");

var _d3TimeFormat = require("d3-time-format");

var _d3Format = require("d3-format");

var _d3Scale = require("d3-scale");

var _d3Axis = require("d3-axis");

var _d3Selection = require("d3-selection");

var _d3Shape = require("d3-shape");

var _core = require("@material-ui/core");

require("./Chart.css");

var _Tooltip = _interopRequireDefault(require("./Tooltip"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/Chart/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => ({
  root: {
    display: 'flex',
    flexDirection: 'column',
    height: 350
  },
  nodata: {
    display: 'flex',
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: -theme.spacing(3)
  },
  title: {
    paddingTop: theme.spacing(1)
  }
});

class Chart extends _react.Component {
  constructor(props) {
    super(props);
    this.data = [];
    this.height = 280;
    this.width = 800;
    this.margin = 20;
    this.state = {
      linePath: null,
      circlePoints: null,
      constLinePath: null,
      areaGraph: null,
      rectangles: null,
      xScale: (0, _d3Scale.scaleTime)(),
      yScale: (0, _d3Scale.scaleLinear)().range([this.height, 0]),
      tooltipStyle: {
        left: '0px',
        top: '0px',
        display: 'none',
        position: 'absolute',
        pointerEvents: 'none'
      },
      value: null,
      time: null
    };
    this.xAxis = (0, _d3Axis.axisBottom)().scale(this.state.xScale).ticks(4);
    this.yAxis = (0, _d3Axis.axisLeft)().tickFormat((0, _d3Format.format)('.2s')).scale(this.state.yScale);
  }

  componentDidUpdate() {
    if (!(this.props.interval === '7d' || this.props.interval === '30d')) {
      this.xAxis.tickFormat((0, _d3TimeFormat.timeFormat)('%H:%M:%S'));
    } else {
      this.xAxis.tickFormat((0, _d3TimeFormat.timeFormat)('%m/%d %H:%M'));
    }

    (0, _d3Selection.select)(this.xAxisRef).call(this.xAxis);
    (0, _d3Selection.select)(this.yAxisRef).call(this.yAxis).selectAll('text').attr('transform', 'rotate(45)');
    const yAxisGrids = (0, _d3Axis.axisLeft)(this.state.yScale).tickFormat('').tickSize(-this.props.width + 100);
    const xAxisGrids = (0, _d3Axis.axisBottom)(this.state.xScale).tickFormat('').tickSize(280);
    (0, _d3Selection.select)(this.yGridRef).call(yAxisGrids);
    (0, _d3Selection.select)(this.xGridRef).call(xAxisGrids);
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    // console.log("nextProps.columns",nextProps.columns)
    // if (!nextProps.columns) return null;
    const selectX = datum => new Date(datum.time);

    const selectY = datum => datum.value;

    const selectYConst = () => nextProps.constValue; // console.log("nextProps.columns.values",nextProps.columns.values)
    // const data = nextProps.columns.values || [];


    const data = nextProps.columns && nextProps.columns.values ? nextProps.columns.values : [];
    const width = nextProps.width,
          maxValue = nextProps.maxValue;
    const xScale = prevState.xScale,
          yScale = prevState.yScale;
    xScale.range([0, width ? width - 100 : 300]);
    const timeDomain = (0, _d3Array.extent)(data, selectX);
    let valMax = (0, _d3Array.max)(data, selectY);

    if (nextProps.constValue) {
      if (valMax < nextProps.constValue) {
        valMax = nextProps.constValue;
      }
    }

    xScale.domain(timeDomain);

    if (maxValue) {
      yScale.domain([0, 100]);
    } else {
      yScale.domain([0, valMax !== 0 ? valMax * 1.25 : 10]);
    }

    const selectScaledX = datum => xScale(selectX(datum));

    const selectScaledY = datum => yScale(selectY(datum));

    const sparkLine = (0, _d3Shape.line)().x(selectScaledX).y(selectScaledY);
    const constSparkLine = (0, _d3Shape.line)().x(selectScaledX).y(datum => yScale(selectYConst(datum)));
    const circlePoints = data.map(datum => ({
      x: selectScaledX(datum),
      y: selectScaledY(datum),
      data: datum.value,
      t: (0, _d3TimeFormat.timeFormat)('%m/%d %H:%M')(new Date(datum.time))
    })); // if (nextProps.chartType === 'bar') {
    //   const rectangles = data.map((datum) => ({
    //     x: selectScaledX(datum),
    //     y: selectScaledY(datum),
    //     height: 280 - selectScaledY(datum),
    //   }));
    //   return { circlePoints, rectangles };
    // }

    const linePath = sparkLine(data);
    const constLinePath = constSparkLine(data);
    const area = (0, _d3Shape.area)().x(selectScaledX).y0(280).y1(selectScaledY);
    const areaGraph = area(data);
    return {
      circlePoints,
      areaGraph,
      linePath,
      constLinePath
    };
  }

  mouseOverPoint(event) {
    const boundingRectangle = event.target.getBoundingClientRect();
    const bodyBound = document.getElementsByTagName('body')[0].getBoundingClientRect();
    const x = boundingRectangle.left - (bodyBound.right > boundingRectangle.left + 300 ? 50 : 160);
    const y = boundingRectangle.top - 50;
    this.setState(_objectSpread({}, this.state, {
      value: event.target.getAttribute('data'),
      time: event.target.getAttribute('t'),
      tooltipStyle: _objectSpread({}, this.state.tooltipStyle, {
        display: 'block',
        left: `${x}px`,
        top: `${y}px`,
        position: 'fixed'
      })
    }));
  }

  mouseOut() {
    this.setState(_objectSpread({}, this.state, {
      tooltipStyle: _objectSpread({}, this.state.tooltipStyle, {
        display: 'none'
      })
    }));
  }

  render() {
    const classes = this.props.classes;

    const renderGraph = () => {
      return _react.default.createElement(_react.default.Fragment, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 226
        },
        __self: this
      }, _react.default.createElement("g", {
        className: "line",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 227
        },
        __self: this
      }, _react.default.createElement("path", {
        d: this.state.linePath,
        transform: "translate(50,20)",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 228
        },
        __self: this
      })), this.props.constValue !== null ? _react.default.createElement("g", {
        className: "constline",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 231
        },
        __self: this
      }, _react.default.createElement("path", {
        d: this.state.constLinePath,
        transform: "translate(50,20)",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 232
        },
        __self: this
      })) : null, _react.default.createElement("g", {
        className: "area",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 235
        },
        __self: this
      }, _react.default.createElement("path", {
        d: this.state.areaGraph,
        transform: "translate(50,20)",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 236
        },
        __self: this
      })));
    };

    return _react.default.createElement(_react.default.Fragment, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 242
      },
      __self: this
    }, _react.default.createElement(_core.Paper, {
      className: classes.root,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 243
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      variant: "caption",
      className: classes.title,
      align: "center",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 244
      },
      __self: this
    }, this.props.chartName), this.state.linePath !== null || this.state.rectangles !== null ? _react.default.createElement("svg", {
      className: "container",
      "data-testid": this.props.datatestid,
      style: {
        overflow: 'visible',
        height: '90%',
        width: '100%'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 246
      },
      __self: this
    }, _react.default.createElement("g", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 255
      },
      __self: this
    }, _react.default.createElement("g", {
      className: "xAxis",
      ref: r => {
        this.xAxisRef = r;
      },
      transform: `translate(50,${this.height + 20})`,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 256
      },
      __self: this
    }), _react.default.createElement("g", {
      className: "yAxis",
      ref: r => {
        this.yAxisRef = r;
      },
      transform: "translate(50,20)",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 261
      },
      __self: this
    }), _react.default.createElement("g", {
      className: "grid",
      ref: r => {
        this.yGridRef = r;
      },
      transform: "translate(50,20)",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 266
      },
      __self: this
    }), _react.default.createElement("g", {
      className: "grid",
      ref: r => {
        this.xGridRef = r;
      },
      transform: "translate(50,20)",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 267
      },
      __self: this
    }), renderGraph(), _react.default.createElement("g", {
      className: "scatter",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 269
      },
      __self: this
    }, this.state.circlePoints.map(circlePoint => _react.default.createElement("circle", {
      cx: circlePoint.x,
      cy: circlePoint.y,
      data: circlePoint.data,
      t: circlePoint.t,
      key: `${circlePoint.x},${circlePoint.y}`,
      r: 4,
      onMouseOver: this.mouseOverPoint.bind(this),
      onFocus: this.mouseOverPoint.bind(this),
      onMouseOut: this.mouseOut.bind(this),
      onBlur: this.mouseOut.bind(this),
      transform: "translate(50,20)",
      "data-testid": this.props.scatterId,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 273
      },
      __self: this
    }))), _react.default.createElement("text", {
      transform: "rotate(-90)",
      x: 0 - this.height / 2,
      y: 15,
      style: {
        textAnchor: 'middle'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 290
      },
      __self: this
    }, this.props.yLabel))) : _react.default.createElement(_core.Typography, {
      className: classes.nodata,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 301
      },
      __self: this
    }, "No Data Available to Display"), _react.default.createElement(_Tooltip.default, {
      containerStyle: this.state.tooltipStyle,
      value: this.state.value,
      label: this.props.chartName,
      t: this.state.time,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 305
      },
      __self: this
    })));
  }

}

var _default = (0, _core.withStyles)(styles)(Chart);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,