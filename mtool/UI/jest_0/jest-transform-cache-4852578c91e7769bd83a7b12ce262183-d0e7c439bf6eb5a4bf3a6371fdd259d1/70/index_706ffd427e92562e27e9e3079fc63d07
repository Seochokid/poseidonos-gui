55316208ca893cdc3535c78d760cfd45
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _theme = _interopRequireWildcard(require("../../theme"));

var _EmailAlerts = _interopRequireDefault(require("../../components/EmailAlerts"));

require("./ConfigurationSetting.css");

var _Dialog = _interopRequireDefault(require("../../components/Dialog"));

var _Header = _interopRequireDefault(require("../../components/Header"));

var _Sidebar = _interopRequireDefault(require("../../components/Sidebar"));

var actionTypes = _interopRequireWildcard(require("../../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../../store/actions/exportActionCreators"));

var _LogConfiguration = _interopRequireDefault(require("../../components/LogConfiguration"));

var _AlertManagement = _interopRequireDefault(require("./Alert-Management"));

var _UserManagement = _interopRequireDefault(require("./User-Management"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/ConfigurationSetting/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => ({
  configurationContainer: {
    display: 'flex'
  },
  GeneralContainer: {
    padding: theme.spacing(2, 0)
  },
  pageHeader: _theme.customTheme.page.title,
  content: {
    flexGrow: 1,
    padding: theme.spacing(3),
    width: '100%',
    boxSizing: 'border-box',
    paddingLeft: '24px',
    paddingRight: '13px'
  },
  toolbar: _theme.customTheme.toolbar,
  EmailTableContainer: {
    margin: 0
  },
  selectedTab: {
    color: 'rgb(33, 34, 37)',
    borderBottom: `2px solid ${'rgb(33, 34, 37)'}`,
    fontWeight: 600
  }
});

class ConfigurationSetting extends _react.Component {
  constructor(props) {
    super(props);
    this.selectEmail = this.selectEmail.bind(this);
    this.editEmail = this.editEmail.bind(this);
    this.deleteEmails = this.deleteEmails.bind(this);
    this.saveEmail = this.saveEmail.bind(this);
    this.sendEmail = this.sendEmail.bind(this);
    this.testserver = this.testserver.bind(this);
    this.deleteConfiguredSmtpServer = this.deleteConfiguredSmtpServer.bind(this);
    this.toggleEmailStatus = this.toggleEmailStatus.bind(this);
    this.savesmtpserverdetails = this.savesmtpserverdetails.bind(this);
    this.openAlert = this.openAlert.bind(this);
    this.handleAlertClose = this.handleAlertClose.bind(this);
    this.handleClose = this.handleClose.bind(this);
    this.triggerCommand = this.triggerCommand.bind(this);
    this.handleDrawerToggle = this.handleDrawerToggle.bind(this);
    this.OnHandleChange = this.OnHandleChange.bind(this);
    this.applyIbofOSTimeInterval = this.applyIbofOSTimeInterval.bind(this);
    this.deleteIbofOSTimeInterval = this.deleteIbofOSTimeInterval.bind(this);
    this.handleTabChange = this.handleTabChange.bind(this);
    this.state = {
      add_delete_send: '',
      mobileOpen: false,
      ibofostimeinterval: this.props.timeinterval,
      open: false,
      value: 0
    };
  }

  OnHandleChange(event) {
    const _event$target = event.target,
          name = _event$target.name,
          value = _event$target.value;
    this.setState(_objectSpread({}, this.state, {
      [name]: value
    }));
  }

  componentDidMount() {
    this.props.fetchEmailList();
    this.setState({
      ibofostimeinterval: this.props.timeinterval
    });
  } // Change the checked state after selection


  selectEmail(index) {
    const emaillist = [...this.props.emaillist];
    emaillist[index].selected = true;
    this.props.changeEmailList(emaillist);
  }

  handleTabChange(event, newValue) {
    if (newValue === 'general') {
      this.componentDidMount();
    }

    this.props.history.push(`/ConfigurationSetting/${newValue}`);
  }

  deleteConfiguredSmtpServer() {
    this.props.deleteConfiguredSmtpServer();
  }

  editEmail(i) {
    const emaillist = [...this.props.emaillist];
    emaillist[i].edit = !emaillist[i].edit;
    this.props.changeEmailList(emaillist);
  } // Update an existing email id or add another email id


  saveEmail(emailentry, i, newEntry) {
    if (emailentry.email === '' || !emailentry.email || emailentry.email && !(emailentry.email.indexOf('@') > -1) || emailentry.email && !(emailentry.email.indexOf('.') > -1)) {
      const payload = {
        alertOpen: true,
        istypealert: true,
        alerttype: 'alert',
        alerttitle: 'Save Email',
        alertdescription: 'Please enter a valid email id'
      };
      this.props.setAlertBox(payload);
      return;
    }

    for (let j = 0; j < this.props.emaillist.length; j += 1) {
      if (this.props.emaillist[j].email === emailentry.email && j !== i) {
        const payload = {
          alertOpen: true,
          istypealert: true,
          alerttype: 'alert',
          alerttitle: 'Save Email',
          alertdescription: 'This email id exists'
        };
        this.props.setAlertBox(payload);
        return;
      }
    }

    if (newEntry === true) {
      const email = [...this.props.emaillist];
      email.push({
        _id: 'Wassup',
        email: emailentry.email,
        selected: false,
        active: 1
      });
      this.props.changeEmailList(email);
      i = this.props.emaillist.length - 1;
    }

    const newEmail = _objectSpread({}, emailentry, {
      oldid: this.props.emaillist[i].email
    });

    this.props.updateEmail(newEmail);
  } // Delete all selected email ids


  deleteEmails() {
    const ids = [];
    this.props.emaillist.forEach((email, index) => {
      if (email.selected) {
        ids.push(email.email);
        const emaillist = [...this.props.emaillist];
        emaillist[index].selected = false;
        this.props.changeEmailList(emaillist);
      }
    });
    const data = {
      ids
    };
    this.props.deleteEmailIds(data);
  } // Send email to all the active email ids


  sendEmail() {
    const ids = [];
    this.props.emaillist.forEach((email, index) => {
      if (email.selected && email.active) {
        const emaillist = [...this.props.emaillist];
        emaillist[index].selected = false;
        this.props.changeEmailList(emaillist);
        ids.push(email.email);
      }
    });

    if (ids.length <= 0) {
      const payload = {
        alertOpen: true,
        istypealert: true,
        alerttype: 'alert',
        alerttitle: 'Send Email',
        alertdescription: 'Please select an email id to send'
      };
      this.props.setAlertBox(payload);
      return;
    }

    if (this.props.configuredsmtpserver === '') {
      const payload = {
        alertOpen: true,
        istypealert: true,
        alerttype: 'alert',
        alerttitle: 'Send Email',
        alertdescription: 'Please configure smtp server'
      };
      this.props.setAlertBox(payload);
      return;
    }

    const arr = this.props.configuredsmtpserver.split(':');
    const data = {
      smtpserverip: arr[0],
      smtpserverport: arr[1],
      ids
    };
    document.getElementsByTagName('body')[0].style.cursor = 'wait';
    this.props.sendEmail(data);
  } // Test whether smtp server is working as expected


  testserver(event) {
    event.preventDefault();
    document.getElementsByTagName('body')[0].style.cursor = 'wait';
    const payload = {
      smtpserver: this.props.smtpserver,
      smtpserverip: this.props.smtpserverip,
      smtpserverport: this.props.smtpserverport
    };
    this.props.testEmail(payload);
  }

  savesmtpserverdetails(event) {
    const value = event.target.value;
    const arr = event.target.value.split(':');
    const payload = {
      smtpserver: value,
      smtpserverip: arr[0],
      smtpserverport: arr[1]
    };
    this.props.setSmtpServer(payload);
  } // Enable/Disable an email id but do not delete from DB


  toggleEmailStatus(i) {
    const email = {
      emailid: this.props.emaillist[i].email,
      status: !this.props.emaillist[i].active
    };
    this.props.toggleActiveStatus(email);
  }

  openAlert(operationType) {
    this.setState(_objectSpread({}, this.state, {
      add_delete_send: operationType
    }));
    const payload = {
      alertOpen: true,
      istypealert: false,
      alerttype: 'delete',
      alerttitle: `${operationType} Email`,
      alertdescription: `Are you sure you want to ${operationType} the email?`
    };
    this.props.setAlertBox(payload);
  }

  handleAlertClose() {
    const payload = {
      alertOpen: false
    };
    this.props.setAlertBox(payload);
  }

  handleClose() {
    this.setState(_objectSpread({}, this.state, {
      open: false
    }));
  }

  triggerCommand() {
    // if (this.state.add_delete_send === 'Delete') {
    //   this.deleteEmails();
    // } 
    // else if (this.state.add_delete_send === 'Send') {
    //   this.sendEmail();
    // }
    this.deleteEmails();
  }

  handleDrawerToggle() {
    this.setState({
      mobileOpen: !this.state.mobileOpen
    });
  }

  applyIbofOSTimeInterval() {
    if (this.state.ibofostimeinterval >= 0) {
      this.props.setIbofOSTimeInterval({
        timeinterval: this.state.ibofostimeinterval
      });
    } else {
      this.setState(_objectSpread({}, this.state, {
        open: true
      }));
    }
  }

  deleteIbofOSTimeInterval() {
    this.props.setIbofOSTimeInterval({
      timeinterval: 4
    });
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 352
      },
      __self: this
    }, _react.default.createElement("div", {
      className: classes.configurationContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 353
      },
      __self: this
    }, _react.default.createElement(_Header.default, {
      toggleDrawer: this.handleDrawerToggle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 354
      },
      __self: this
    }), _react.default.createElement(_Sidebar.default, {
      mobileOpen: this.state.mobileOpen,
      toggleDrawer: this.handleDrawerToggle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 355
      },
      __self: this
    }), _react.default.createElement("main", {
      className: classes.content,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 359
      },
      __self: this
    }, _react.default.createElement("div", {
      className: classes.toolbar,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 360
      },
      __self: this
    }), _react.default.createElement(_core.AppBar, {
      position: "static",
      color: "default",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 361
      },
      __self: this
    }, _react.default.createElement(_core.Tabs, {
      value: this.state.value,
      onChange: this.handleTabChange,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 362
      },
      __self: this
    }, _react.default.createElement(_core.Tab, {
      label: "General",
      key: "general",
      value: "general",
      className: window.location.href.indexOf('general') > 0 ? classes.selectedTab : null,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 366
      },
      __self: this
    }), _react.default.createElement(_core.Tab, {
      label: "Alert",
      key: "alert",
      value: "alert",
      className: window.location.href.indexOf('alert') > 0 ? classes.selectedTab : null,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 367
      },
      __self: this
    }), _react.default.createElement(_core.Tab, {
      label: "User",
      key: "user",
      value: "user",
      className: window.location.href.indexOf('user') > 0 ? classes.selectedTab : null,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 368
      },
      __self: this
    }))), _react.default.createElement(_reactRouterDom.Switch, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 371
      },
      __self: this
    }, _react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: "/ConfigurationSetting/general",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 372
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      spacing: 1,
      className: classes.GeneralContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 373
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      spacing: 1,
      xs: 12,
      sm: 6,
      className: classes.EmailTableContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 375
      },
      __self: this
    }, _react.default.createElement(_EmailAlerts.default, {
      emailids: this.props.emaillist,
      IP: this.props.smtpserverip,
      Port: this.props.smtpserverport,
      addemailids: this.updateEmailIDList,
      editEmail: this.editEmail,
      selectEmail: this.selectEmail,
      saveChange: this.saveEmail,
      deleteEmails: this.deleteEmails,
      sendEmail: this.sendEmail,
      configuredsmtpserver: this.props.configuredsmtpserver,
      deleteConfiguredSmtpServer: this.deleteConfiguredSmtpServer,
      testserver: this.testserver,
      savesmtpserverdetails: this.savesmtpserverdetails,
      toggleEmailStatus: this.toggleEmailStatus,
      openAlert: this.openAlert,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 376
      },
      __self: this
    }), _react.default.createElement(_Dialog.default, {
      title: this.props.alerttitle,
      description: this.props.alertdescription,
      open: this.props.alertOpen,
      type: this.props.alerttype,
      handleClose: this.handleAlertClose,
      onConfirm: this.triggerCommand,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 393
      },
      __self: this
    })), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      spacing: 1,
      xs: 12,
      sm: 6,
      className: classes.EmailTableContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 402
      },
      __self: this
    }, _react.default.createElement(_LogConfiguration.default, {
      downloadLogs: this.props.downloadLogs,
      OnHandleChange: this.OnHandleChange,
      ibofostimeintervalvalue: this.props.timeinterval,
      ibofostimeinterval: this.state.ibofostimeinterval,
      applyIbofOSTimeInterval: this.applyIbofOSTimeInterval,
      deleteIbofOSTimeInterval: this.deleteIbofOSTimeInterval,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 403
      },
      __self: this
    })))), _react.default.createElement(_reactRouterDom.Route, {
      path: "/ConfigurationSetting/alert",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 414
      },
      __self: this
    }, _react.default.createElement(_AlertManagement.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 415
      },
      __self: this
    })), _react.default.createElement(_reactRouterDom.Route, {
      path: "/ConfigurationSetting/user",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 417
      },
      __self: this
    }, _react.default.createElement(_UserManagement.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 418
      },
      __self: this
    }))), _react.default.createElement(_Dialog.default, {
      title: "Update Interval",
      description: "Invalid input. Please enter a valid interval",
      type: "alert",
      open: this.state.open,
      handleClose: this.handleClose,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 421
      },
      __self: this
    }))));
  }

}

const mapStateToProps = state => {
  return {
    emaillist: state.configurationsettingReducer.emaillist,
    alertOpen: state.configurationsettingReducer.alertOpen,
    istypealert: state.configurationsettingReducer.istypealert,
    alerttitle: state.configurationsettingReducer.alerttitle,
    alerttype: state.configurationsettingReducer.alerttype,
    alertdescription: state.configurationsettingReducer.alertdescription,
    configuredsmtpserver: state.configurationsettingReducer.configuredsmtpserver,
    smtpserverip: state.configurationsettingReducer.smtpserverip,
    smtpserverport: state.configurationsettingReducer.smtpserverport,
    smtpserver: state.configurationsettingReducer.smtpserver,
    timeinterval: state.configurationsettingReducer.timeinterval
  };
};

const mapDispatchToProps = dispatch => {
  return {
    fetchEmailList: () => dispatch({
      type: actionTypes.SAGA_FETCH_EMAIL_LIST
    }),
    changeEmailList: newemail => dispatch(actionCreators.changeEmailList(newemail)),
    setAlertBox: payload => dispatch(actionCreators.setAlertBox(payload)),
    updateEmail: newemail => dispatch({
      type: actionTypes.SAGA_UPDATE_EMAIL,
      payload: newemail
    }),
    toggleActiveStatus: email => dispatch({
      type: actionTypes.SAGA_TOGGLE_ACTIVE_STATUS,
      payload: email
    }),
    sendEmail: data => dispatch({
      type: actionTypes.SAGA_SEND_EMAIL,
      payload: data
    }),
    testEmail: data => dispatch({
      type: actionTypes.SAGA_TEST_EMAIL,
      payload: data
    }),
    setSmtpServer: payload => dispatch(actionCreators.setSmtpServer(payload)),
    deleteConfiguredSmtpServer: () => dispatch(actionCreators.deleteConfiguredSmtpServer()),
    deleteEmailIds: data => dispatch({
      type: actionTypes.SAGA_DELETE_EMAIL_IDS,
      payload: data
    }),
    downloadLogs: data => dispatch({
      type: actionTypes.SAGA_DOWNLOAD_LOGS,
      payload: data
    }),
    setIbofOSTimeInterval: data => dispatch({
      type: actionTypes.SAGA_SET_IBOFOS_TIME_INTERVAL,
      payload: data
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)((0, _reactRouterDom.withRouter)(ConfigurationSetting)));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,