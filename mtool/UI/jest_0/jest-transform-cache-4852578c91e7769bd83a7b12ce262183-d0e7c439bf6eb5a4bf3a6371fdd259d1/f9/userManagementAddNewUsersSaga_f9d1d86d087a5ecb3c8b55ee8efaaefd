226f0bd042c7315079a103ef25e007c3
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addNewUsersInfo = addNewUsersInfo;
exports.userManagementAddNewUsersWatcher = userManagementAddNewUsersWatcher;

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var _userManagementSaga = require("./userManagementSaga");

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

/* -------------------------------------------------------------------------------------/
                                                                                    /
/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /
/                          ALL RIGHTS RESERVED                                        /
/                                                                                     /
/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /
/   products to use or abstract this computer program for the sole purpose of         /
/   implementing a product based on Samsung Electronics Co., Ltd. products.           /
/   No other rights to reproduce, use, or disseminate this computer program,          /
/   whether in part or in whole, are granted.                                         / 
/                                                                                     /
/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /
/   respect to the performance of this computer program, and specifically disclaims   /
/   any responsibility for any damages, special or consequential, connected           /
/   with the use of this program.                                                     /
/                                                                                     /
/-------------------------------------------------------------------------------------/


DESCRIPTION: <Contains Generator Functions for Add New User component> *
@NAME : userManagementAddNewUsersSaga.js
@AUTHORS: Jay Hitesh Sanghavi
@Version : 1.0 *
@REVISION HISTORY
[03/06/2019] [Jay] : Prototyping..........////////////////////
*/
function* addNewUsersInfo(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/add_new_user/', action.addNewUser, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield (0, _userManagementSaga.fetchUsersInfo)();
      yield (0, _effects.put)(actionCreators.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        // alerttitle: "Success",
        alerttitle: 'Add New User',
        alertdescription: 'User added successfully'
      }));
    } else if (response === 400) yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Add New User',
      alertdescription: 'User already exists'
    }));else yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      // alerttitle: "Failure",
      alerttitle: 'Add New User',
      alertdescription: 'Error in adding User'
    }));
  } catch (error) {
    ;
  }
}

function* userManagementAddNewUsersWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_USER_MANAGEMENT_ADD_NEW_USERS, addNewUsersInfo);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJNYW5hZ2VtZW50QWRkTmV3VXNlcnNTYWdhLmpzIl0sIm5hbWVzIjpbImFkZE5ld1VzZXJzSW5mbyIsImFjdGlvbiIsInJlc3BvbnNlIiwiYXhpb3MiLCJwb3N0IiwiYWRkTmV3VXNlciIsImhlYWRlcnMiLCJBY2NlcHQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic3RhdHVzIiwiYWN0aW9uQ3JlYXRvcnMiLCJvcGVuQWxlcnRCb3giLCJhbGVydE9wZW4iLCJpc3R5cGVhbGVydCIsImFsZXJ0dHlwZSIsImFsZXJ0dGl0bGUiLCJhbGVydGRlc2NyaXB0aW9uIiwiZXJyb3IiLCJ1c2VyTWFuYWdlbWVudEFkZE5ld1VzZXJzV2F0Y2hlciIsImFjdGlvblR5cGVzIiwiU0FHQV9VU0VSX01BTkFHRU1FTlRfQUREX05FV19VU0VSUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBMEJBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQTlCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ08sVUFBVUEsZUFBVixDQUEwQkMsTUFBMUIsRUFBa0M7QUFDckMsTUFBSTtBQUNBLFVBQU1DLFFBQVEsR0FBRyxNQUFNLG1CQUFLLENBQUNDLGNBQUQsRUFBUUEsZUFBTUMsSUFBZCxDQUFMLEVBQTBCLHlCQUExQixFQUFxREgsTUFBTSxDQUFDSSxVQUE1RCxFQUF3RTtBQUMzRkMsTUFBQUEsT0FBTyxFQUFFO0FBQ0xDLFFBQUFBLE1BQU0sRUFBRSxrQkFESDtBQUVMLHdCQUFnQixrQkFGWDtBQUdMLDBCQUFrQkMsWUFBWSxDQUFDQyxPQUFiLENBQXFCLE9BQXJCO0FBSGI7QUFEa0YsS0FBeEUsQ0FBdkI7QUFEQSxVQVFRQyxNQVJSLEdBUW1CUixRQVJuQixDQVFRUSxNQVJSOztBQVNBLFFBQUlBLE1BQU0sS0FBSyxHQUFmLEVBQW9CO0FBQ2hCLFlBQU0seUNBQU47QUFDQSxZQUFNLGtCQUFJQyxjQUFjLENBQUNDLFlBQWYsQ0FBNEI7QUFDbENDLFFBQUFBLFNBQVMsRUFBRSxJQUR1QjtBQUVsQ0MsUUFBQUEsV0FBVyxFQUFFLElBRnFCO0FBR2xDQyxRQUFBQSxTQUFTLEVBQUUsTUFIdUI7QUFJbEM7QUFDQUMsUUFBQUEsVUFBVSxFQUFFLGNBTHNCO0FBTWxDQyxRQUFBQSxnQkFBZ0IsRUFBRTtBQU5nQixPQUE1QixDQUFKLENBQU47QUFRSCxLQVZELE1BV0ssSUFBSWYsUUFBUSxLQUFLLEdBQWpCLEVBQ0QsTUFBTSxrQkFBSVMsY0FBYyxDQUFDQyxZQUFmLENBQTRCO0FBQ2xDQyxNQUFBQSxTQUFTLEVBQUUsSUFEdUI7QUFFbENDLE1BQUFBLFdBQVcsRUFBRSxJQUZxQjtBQUdsQ0MsTUFBQUEsU0FBUyxFQUFFLE9BSHVCO0FBSWxDQyxNQUFBQSxVQUFVLEVBQUUsY0FKc0I7QUFLbENDLE1BQUFBLGdCQUFnQixFQUFFO0FBTGdCLEtBQTVCLENBQUosQ0FBTixDQURDLEtBU0QsTUFBTSxrQkFBSU4sY0FBYyxDQUFDQyxZQUFmLENBQTRCO0FBQ2xDQyxNQUFBQSxTQUFTLEVBQUUsSUFEdUI7QUFFbENDLE1BQUFBLFdBQVcsRUFBRSxJQUZxQjtBQUdsQ0MsTUFBQUEsU0FBUyxFQUFFLE9BSHVCO0FBSWxDO0FBQ0FDLE1BQUFBLFVBQVUsRUFBRSxjQUxzQjtBQU1sQ0MsTUFBQUEsZ0JBQWdCLEVBQUU7QUFOZ0IsS0FBNUIsQ0FBSixDQUFOO0FBUVAsR0FyQ0QsQ0FzQ0EsT0FBT0MsS0FBUCxFQUFjO0FBQ1g7QUFDRjtBQUNKOztBQUVNLFVBQVVDLGdDQUFWLEdBQTZDO0FBQ2hELFFBQU0sd0JBQVVDLFdBQVcsQ0FBQ0Msa0NBQXRCLEVBQTBEckIsZUFBMUQsQ0FBTjtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICBDT1BZUklHSFQgKGMpIDIwMTkgU0FNU1VORyBFTEVDVFJPTklDUyBDTy4sIExURC4gICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgQUxMIFJJR0hUUyBSRVNFUlZFRCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkIHRvIGxpY2Vuc2VlcyBvZiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiAgICAgICAgL1xuLyAgIHByb2R1Y3RzIHRvIHVzZSBvciBhYnN0cmFjdCB0aGlzIGNvbXB1dGVyIHByb2dyYW0gZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgICAgICAgICAvXG4vICAgaW1wbGVtZW50aW5nIGEgcHJvZHVjdCBiYXNlZCBvbiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBwcm9kdWN0cy4gICAgICAgICAgIC9cbi8gICBObyBvdGhlciByaWdodHMgdG8gcmVwcm9kdWNlLCB1c2UsIG9yIGRpc3NlbWluYXRlIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgICAgICAgICAgL1xuLyAgIHdoZXRoZXIgaW4gcGFydCBvciBpbiB3aG9sZSwgYXJlIGdyYW50ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIFxuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gbWFrZXMgbm8gcmVwcmVzZW50YXRpb24gb3Igd2FycmFudGllcyB3aXRoICAgICAgICAgIC9cbi8gICByZXNwZWN0IHRvIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIGNvbXB1dGVyIHByb2dyYW0sIGFuZCBzcGVjaWZpY2FsbHkgZGlzY2xhaW1zICAgL1xuLyAgIGFueSByZXNwb25zaWJpbGl0eSBmb3IgYW55IGRhbWFnZXMsIHNwZWNpYWwgb3IgY29uc2VxdWVudGlhbCwgY29ubmVjdGVkICAgICAgICAgICAvXG4vICAgd2l0aCB0aGUgdXNlIG9mIHRoaXMgcHJvZ3JhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG5cblxuREVTQ1JJUFRJT046IDxDb250YWlucyBHZW5lcmF0b3IgRnVuY3Rpb25zIGZvciBBZGQgTmV3IFVzZXIgY29tcG9uZW50PiAqXG5ATkFNRSA6IHVzZXJNYW5hZ2VtZW50QWRkTmV3VXNlcnNTYWdhLmpzXG5AQVVUSE9SUzogSmF5IEhpdGVzaCBTYW5naGF2aVxuQFZlcnNpb24gOiAxLjAgKlxuQFJFVklTSU9OIEhJU1RPUllcblswMy8wNi8yMDE5XSBbSmF5XSA6IFByb3RvdHlwaW5nLi4uLi4uLi4uLi8vLy8vLy8vLy8vLy8vLy8vLy8vXG4qL1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IGNhbGwsIHRha2VFdmVyeSxwdXQgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSBcIi4uL3N0b3JlL2FjdGlvbnMvYWN0aW9uVHlwZXNcIjtcbmltcG9ydCB7IGZldGNoVXNlcnNJbmZvIH0gZnJvbSBcIi4vdXNlck1hbmFnZW1lbnRTYWdhXCJcbmltcG9ydCAqIGFzIGFjdGlvbkNyZWF0b3JzIGZyb20gXCIuLi9zdG9yZS9hY3Rpb25zL2V4cG9ydEFjdGlvbkNyZWF0b3JzXCJcblxuZXhwb3J0IGZ1bmN0aW9uKiBhZGROZXdVc2Vyc0luZm8oYWN0aW9uKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBjYWxsKFtheGlvcywgYXhpb3MucG9zdF0sICcvYXBpL3YxLjAvYWRkX25ld191c2VyLycsIGFjdGlvbi5hZGROZXdVc2VyLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IHN0YXR1cyB9ID0gcmVzcG9uc2U7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgeWllbGQgZmV0Y2hVc2Vyc0luZm8oKTtcbiAgICAgICAgICAgIHlpZWxkIHB1dChhY3Rpb25DcmVhdG9ycy5vcGVuQWxlcnRCb3goe1xuICAgICAgICAgICAgICAgIGFsZXJ0T3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpc3R5cGVhbGVydDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGVydHR5cGU6ICdpbmZvJyxcbiAgICAgICAgICAgICAgICAvLyBhbGVydHRpdGxlOiBcIlN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICBhbGVydHRpdGxlOiAnQWRkIE5ldyBVc2VyJyxcbiAgICAgICAgICAgICAgICBhbGVydGRlc2NyaXB0aW9uOiAnVXNlciBhZGRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlID09PSA0MDApXG4gICAgICAgICAgICB5aWVsZCBwdXQoYWN0aW9uQ3JlYXRvcnMub3BlbkFsZXJ0Qm94KHtcbiAgICAgICAgICAgICAgICBhbGVydE9wZW46IHRydWUsXG4gICAgICAgICAgICAgICAgaXN0eXBlYWxlcnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxlcnR0eXBlOiAnYWxlcnQnLFxuICAgICAgICAgICAgICAgIGFsZXJ0dGl0bGU6ICdBZGQgTmV3IFVzZXInLFxuICAgICAgICAgICAgICAgIGFsZXJ0ZGVzY3JpcHRpb246ICdVc2VyIGFscmVhZHkgZXhpc3RzJyxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgeWllbGQgcHV0KGFjdGlvbkNyZWF0b3JzLm9wZW5BbGVydEJveCh7XG4gICAgICAgICAgICAgICAgYWxlcnRPcGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzdHlwZWFsZXJ0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsZXJ0dHlwZTogJ2FsZXJ0JyxcbiAgICAgICAgICAgICAgICAvLyBhbGVydHRpdGxlOiBcIkZhaWx1cmVcIixcbiAgICAgICAgICAgICAgICBhbGVydHRpdGxlOiAnQWRkIE5ldyBVc2VyJyxcbiAgICAgICAgICAgICAgICBhbGVydGRlc2NyaXB0aW9uOiAnRXJyb3IgaW4gYWRkaW5nIFVzZXInLFxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICA7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24qIHVzZXJNYW5hZ2VtZW50QWRkTmV3VXNlcnNXYXRjaGVyKCkge1xuICAgIHlpZWxkIHRha2VFdmVyeShhY3Rpb25UeXBlcy5TQUdBX1VTRVJfTUFOQUdFTUVOVF9BRERfTkVXX1VTRVJTLCBhZGROZXdVc2Vyc0luZm8pO1xufVxuIl19