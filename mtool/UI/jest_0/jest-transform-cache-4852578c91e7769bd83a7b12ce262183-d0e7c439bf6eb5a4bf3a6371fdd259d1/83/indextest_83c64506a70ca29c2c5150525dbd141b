0183914d58fdd883bc23a496548510f2
"use strict";

jest.unmock("axios");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactRedux = require("react-redux");

var _testUtils = require("react-dom/test-utils");

var _reactI18next = require("react-i18next");

var _axios = _interopRequireDefault(require("axios"));

require("@testing-library/jest-dom/extend-expect");

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _history = require("history");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _indexSaga = _interopRequireDefault(require("../../../sagas/indexSaga"));

var _headerReducer = _interopRequireDefault(require("../../../store/reducers/headerReducer"));

var _alertManagementReducer = _interopRequireDefault(require("../../../store/reducers/alertManagementReducer"));

var _userManagementReducer = _interopRequireDefault(require("../../../store/reducers/userManagementReducer"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _index = _interopRequireDefault(require("./index"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/ConfigurationSetting/User-Management/index.test.js";
describe("ConfigurationSetting", () => {
  let wrapper;
  let history;
  let store; // let mock;

  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      // headerLanguageReducer,
      //   headerReducer,
      alertManagementReducer: _alertManagementReducer.default,
      userManagementReducer: _userManagementReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = "/ConfigurationSetting/user";
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    }); // mock = new MockAdapter(axios);
  });

  const renderComponent = () => {
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 83
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 84
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 85
      },
      __self: void 0
    }, _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 86
      },
      __self: void 0
    })))));
  };

  afterEach(_react2.cleanup);
  it('renders user management', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, null);
    renderComponent();
    const _wrapper = wrapper,
          getByText = _wrapper.getByText,
          asFragment = _wrapper.asFragment;
    expect(getByText("User List")).toBeDefined();
  });
  it('should add a new user', () => {
    renderComponent();
    const _wrapper2 = wrapper,
          asFragment = _wrapper2.asFragment,
          getByTestId = _wrapper2.getByTestId,
          getByText = _wrapper2.getByText;
    const username = getByTestId('add-user-name');
    const password = getByTestId('add-user-password');
    const confirmPassword = getByTestId('add-user-confirm-password');
    const phno = getByTestId('add-user-phno');
    const email = getByTestId('add-user-email');
    const confirmBtn = getByText('Submit');

    _react2.fireEvent.keyDown(username, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.keyDown(username, {
      key: '+',
      code: 43,
      charCode: 43
    });

    _react2.fireEvent.change(username, {
      target: {
        value: 'abcd'
      }
    });

    _react2.fireEvent.keyDown(password, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.keyDown(username, {
      key: '+',
      code: 43,
      charCode: 43
    });

    _react2.fireEvent.change(password, {
      target: {
        value: 'test'
      }
    });

    _react2.fireEvent.keyDown(confirmPassword, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.keyDown(username, {
      key: '+',
      code: 43,
      charCode: 43
    });

    _react2.fireEvent.change(confirmPassword, {
      target: {
        value: 'test'
      }
    });

    _react2.fireEvent.keyDown(email, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.keyDown(username, {
      key: '+',
      code: 43,
      charCode: 43
    });

    _react2.fireEvent.change(email, {
      target: {
        value: 'abcd@abc.com'
      }
    });

    _react2.fireEvent.change(phno, {
      target: {
        value: '123457890'
      }
    });

    _react2.fireEvent.click(confirmBtn);

    expect(getByText('Yes')).toBeDefined();

    _react2.fireEvent.click(getByText('Yes')); // expect(username.value).toBe('');

  });
  it('should cancel adding a user', () => {
    renderComponent();
    const _wrapper3 = wrapper,
          asFragment = _wrapper3.asFragment,
          getByTestId = _wrapper3.getByTestId,
          getByText = _wrapper3.getByText;
    const username = getByTestId('add-user-name');
    const cancelBtn = getByText('Cancel');

    _react2.fireEvent.keyDown(username, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.change(username, {
      target: {
        value: 'abcd'
      }
    });

    _react2.fireEvent.click(cancelBtn);

    expect(getByText('Yes')).toBeDefined();

    _react2.fireEvent.click(getByText('No')); // expect(username.value).toBe('');

  });
  it('should throw error when username is not present', () => {
    renderComponent();
    const _wrapper4 = wrapper,
          getByText = _wrapper4.getByText;
    const confirmBtn = getByText('Submit');

    _react2.fireEvent.click(confirmBtn);

    expect(getByText("Please Enter a Valid Username")).toBeDefined();
  });
  it('should add list all the users', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper5 = wrapper,
          getByText = _wrapper5.getByText,
          asFragment = _wrapper5.asFragment;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      expect(asFragment()).toMatchSnapshot();
    });
  });
  it('should edit a user', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper6 = wrapper,
          getByText = _wrapper6.getByText,
          asFragment = _wrapper6.asFragment,
          getAllByTitle = _wrapper6.getAllByTitle,
          getAllByPlaceholderText = _wrapper6.getAllByPlaceholderText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      const editBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Edit")[0]);

      _react2.fireEvent.click(editBtn);

      const phno = await (0, _react2.waitForElement)(() => getAllByPlaceholderText("+1 (702) 123-4567")[0]);

      _react2.fireEvent.change(phno, {
        target: {
          value: "+1 (702) 123-4578"
        }
      });

      const email = await (0, _react2.waitForElement)(() => getAllByPlaceholderText("Email")[0]);

      _react2.fireEvent.change(email, {
        target: {
          value: "test@abc.com"
        }
      });

      let spy = jest.spyOn(_axios.default, "post").mockReturnValue(200);
      const saveBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Save")[0]);

      _react2.fireEvent.click(saveBtn);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toHaveBeenCalledTimes(1);
    });
  });
  it('should throw an error if the emailid is not valid', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper7 = wrapper,
          getByText = _wrapper7.getByText,
          asFragment = _wrapper7.asFragment,
          getAllByTitle = _wrapper7.getAllByTitle,
          getAllByPlaceholderText = _wrapper7.getAllByPlaceholderText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      const editBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Edit")[0]);

      _react2.fireEvent.click(editBtn);

      const phno = await (0, _react2.waitForElement)(() => getAllByPlaceholderText("+1 (702) 123-4567")[0]);

      _react2.fireEvent.change(phno, {
        target: {
          value: "+1 (702) 123-4578"
        }
      });

      const email = await (0, _react2.waitForElement)(() => getAllByPlaceholderText("Email")[0]);

      _react2.fireEvent.change(email, {
        target: {
          value: "test"
        }
      });

      let spy = jest.spyOn(_axios.default, "post").mockReturnValue(200);
      const saveBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Save")[0]);

      _react2.fireEvent.click(saveBtn);

      await new Promise(resolve => setTimeout(resolve, 1000));
      const alertText = await (0, _react2.waitForElement)(() => getByText("Please enter a valid input"));
      expect(alertText).toBeDefined();
    });
  });
  it('should delete a user', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper8 = wrapper,
          getByText = _wrapper8.getByText,
          asFragment = _wrapper8.asFragment,
          getAllByTitle = _wrapper8.getAllByTitle,
          getAllByPlaceholderText = _wrapper8.getAllByPlaceholderText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      const deleteBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Delete")[0]);

      _react2.fireEvent.click(deleteBtn);

      const saveBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Save")[0]);

      _react2.fireEvent.click(saveBtn);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(asFragment()).toMatchSnapshot();
    });
  });
  it('should disable a user', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper9 = wrapper,
          getByText = _wrapper9.getByText,
          asFragment = _wrapper9.asFragment,
          getAllByTitle = _wrapper9.getAllByTitle,
          getAllByPlaceholderText = _wrapper9.getAllByPlaceholderText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      const disableBtn = await (0, _react2.waitForElement)(() => getAllByTitle("api-enable")[0]);
      let spy = jest.spyOn(_axios.default, "post").mockReturnValue(200);

      _react2.fireEvent.click(disableBtn);

      await new Promise(resolve => setTimeout(resolve, 1000));

      _react2.fireEvent.click(disableBtn);

      expect(spy).toBeCalled();
    });
  });
  it('should not display role', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": null,
      "active": true,
      "privileges": ""
    }]);
    renderComponent();
    const _wrapper10 = wrapper,
          queryByText = _wrapper10.queryByText,
          getByText = _wrapper10.getByText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      expect(queryByText("Create")).toBeNull();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiamVzdCIsInVubW9jayIsImRlc2NyaWJlIiwid3JhcHBlciIsImhpc3RvcnkiLCJzdG9yZSIsImJlZm9yZUVhY2giLCJzYWdhTWlkZGxld2FyZSIsInJvb3RSZWR1Y2VycyIsImFsZXJ0TWFuYWdlbWVudFJlZHVjZXIiLCJ1c2VyTWFuYWdlbWVudFJlZHVjZXIiLCJjb21wb3NlRW5oYW5jZXJzIiwid2luZG93IiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwiY29tcG9zZSIsInJ1biIsInJvb3RTYWdhIiwicm91dGUiLCJpbml0aWFsRW50cmllcyIsInJlbmRlckNvbXBvbmVudCIsImkxOG4iLCJhZnRlckVhY2giLCJjbGVhbnVwIiwiaXQiLCJtb2NrIiwiTW9ja0FkYXB0ZXIiLCJheGlvcyIsInJlc3BvbnNlIiwib25HZXQiLCJyZXBseSIsImdldEJ5VGV4dCIsImFzRnJhZ21lbnQiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsImdldEJ5VGVzdElkIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImNvbmZpcm1QYXNzd29yZCIsInBobm8iLCJlbWFpbCIsImNvbmZpcm1CdG4iLCJmaXJlRXZlbnQiLCJrZXlEb3duIiwia2V5IiwiY29kZSIsImNoYXJDb2RlIiwiY2hhbmdlIiwidGFyZ2V0IiwidmFsdWUiLCJjbGljayIsImNhbmNlbEJ0biIsIm5hbWVFbGVtZW50IiwidG9NYXRjaFNuYXBzaG90IiwiZ2V0QWxsQnlUaXRsZSIsImdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0IiwiZWRpdEJ0biIsInNweSIsInNweU9uIiwibW9ja1JldHVyblZhbHVlIiwic2F2ZUJ0biIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsImFsZXJ0VGV4dCIsImRlbGV0ZUJ0biIsImRpc2FibGVCdG4iLCJ0b0JlQ2FsbGVkIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCJdLCJtYXBwaW5ncyI6Ijs7QUFxREFBLElBQUksQ0FBQ0MsTUFBTCxDQUFZLE9BQVo7Ozs7QUExQkE7O0FBQ0E7O0FBUUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7OztBQUlBQyxRQUFRLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUNyQyxNQUFJQyxPQUFKO0FBQ0EsTUFBSUMsT0FBSjtBQUNBLE1BQUlDLEtBQUosQ0FIcUMsQ0FJckM7O0FBQ0FDLEVBQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2YsVUFBTUMsY0FBYyxHQUFHLHlCQUF2QjtBQUNBLFVBQU1DLFlBQVksR0FBRyw0QkFBZ0I7QUFDbkM7QUFDRjtBQUNFQyxNQUFBQSxzQkFBc0IsRUFBdEJBLCtCQUhtQztBQUluQ0MsTUFBQUEscUJBQXFCLEVBQXJCQTtBQUptQyxLQUFoQixDQUFyQjtBQU1BLFVBQU1DLGdCQUFnQixHQUNwQkMsTUFBTSxDQUFDQyxvQ0FBUCxJQUErQ0MsY0FEakQ7QUFFQVQsSUFBQUEsS0FBSyxHQUFHLHdCQUNORyxZQURNLEVBRU5HLGdCQUFnQixDQUFDLDRCQUFnQkosY0FBaEIsQ0FBRCxDQUZWLENBQVI7QUFJQUEsSUFBQUEsY0FBYyxDQUFDUSxHQUFmLENBQW1CQyxrQkFBbkI7QUFDQSxVQUFNQyxLQUFLLEdBQUcsNEJBQWQ7QUFDQWIsSUFBQUEsT0FBTyxHQUFHLGtDQUFvQjtBQUFFYyxNQUFBQSxjQUFjLEVBQUUsQ0FBQ0QsS0FBRDtBQUFsQixLQUFwQixDQUFWLENBaEJlLENBaUJmO0FBQ0QsR0FsQlMsQ0FBVjs7QUFvQkEsUUFBTUUsZUFBZSxHQUFHLE1BQU07QUFDNUJoQixJQUFBQSxPQUFPLEdBQUcsb0JBQ1IsNkJBQUMsc0JBQUQ7QUFBUSxNQUFBLE9BQU8sRUFBRUMsT0FBakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FDRSw2QkFBQyw2QkFBRDtBQUFpQixNQUFBLElBQUksRUFBRWdCLGFBQXZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQ0UsNkJBQUMsb0JBQUQ7QUFBVSxNQUFBLEtBQUssRUFBRWYsS0FBakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FDRSw2QkFBQyxjQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BREYsQ0FERixDQURGLENBRFEsQ0FBVjtBQVNELEdBVkQ7O0FBWUFnQixFQUFBQSxTQUFTLENBQUNDLGVBQUQsQ0FBVDtBQUVBQyxFQUFBQSxFQUFFLENBQUMseUJBQUQsRUFBNEIsWUFBWTtBQUN4QyxVQUFNQyxJQUFJLEdBQUcsSUFBSUMseUJBQUosQ0FBZ0JDLGNBQWhCLENBQWI7QUFDQSxRQUFJQyxRQUFRLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxDQUFXLHNCQUFYLEVBQW1DQyxLQUFuQyxDQUF5QyxHQUF6QyxFQUE4QyxJQUE5QyxDQUFmO0FBQ0FWLElBQUFBLGVBQWU7QUFIeUIscUJBSU5oQixPQUpNO0FBQUEsVUFJaEMyQixTQUpnQyxZQUloQ0EsU0FKZ0M7QUFBQSxVQUlyQkMsVUFKcUIsWUFJckJBLFVBSnFCO0FBS3hDQyxJQUFBQSxNQUFNLENBQUNGLFNBQVMsQ0FBQyxXQUFELENBQVYsQ0FBTixDQUErQkcsV0FBL0I7QUFDRCxHQU5DLENBQUY7QUFRQVYsRUFBQUEsRUFBRSxDQUFDLHVCQUFELEVBQTBCLE1BQU07QUFDaENKLElBQUFBLGVBQWU7QUFEaUIsc0JBRWVoQixPQUZmO0FBQUEsVUFFeEI0QixVQUZ3QixhQUV4QkEsVUFGd0I7QUFBQSxVQUVaRyxXQUZZLGFBRVpBLFdBRlk7QUFBQSxVQUVDSixTQUZELGFBRUNBLFNBRkQ7QUFHaEMsVUFBTUssUUFBUSxHQUFHRCxXQUFXLENBQUMsZUFBRCxDQUE1QjtBQUNBLFVBQU1FLFFBQVEsR0FBR0YsV0FBVyxDQUFDLG1CQUFELENBQTVCO0FBQ0EsVUFBTUcsZUFBZSxHQUFHSCxXQUFXLENBQUMsMkJBQUQsQ0FBbkM7QUFDQSxVQUFNSSxJQUFJLEdBQUdKLFdBQVcsQ0FBQyxlQUFELENBQXhCO0FBQ0EsVUFBTUssS0FBSyxHQUFHTCxXQUFXLENBQUMsZ0JBQUQsQ0FBekI7QUFDQSxVQUFNTSxVQUFVLEdBQUdWLFNBQVMsQ0FBQyxRQUFELENBQTVCOztBQUNBVyxzQkFBVUMsT0FBVixDQUFrQlAsUUFBbEIsRUFBNEI7QUFBQ1EsTUFBQUEsR0FBRyxFQUFFLEdBQU47QUFBV0MsTUFBQUEsSUFBSSxFQUFFLEVBQWpCO0FBQXFCQyxNQUFBQSxRQUFRLEVBQUU7QUFBL0IsS0FBNUI7O0FBQ0FKLHNCQUFVQyxPQUFWLENBQWtCUCxRQUFsQixFQUE0QjtBQUFDUSxNQUFBQSxHQUFHLEVBQUUsR0FBTjtBQUFXQyxNQUFBQSxJQUFJLEVBQUUsRUFBakI7QUFBcUJDLE1BQUFBLFFBQVEsRUFBRTtBQUEvQixLQUE1Qjs7QUFDQUosc0JBQVVLLE1BQVYsQ0FBaUJYLFFBQWpCLEVBQTJCO0FBQUNZLE1BQUFBLE1BQU0sRUFBRTtBQUFFQyxRQUFBQSxLQUFLLEVBQUU7QUFBVDtBQUFULEtBQTNCOztBQUNBUCxzQkFBVUMsT0FBVixDQUFrQk4sUUFBbEIsRUFBNEI7QUFBQ08sTUFBQUEsR0FBRyxFQUFFLEdBQU47QUFBV0MsTUFBQUEsSUFBSSxFQUFFLEVBQWpCO0FBQXFCQyxNQUFBQSxRQUFRLEVBQUU7QUFBL0IsS0FBNUI7O0FBQ0FKLHNCQUFVQyxPQUFWLENBQWtCUCxRQUFsQixFQUE0QjtBQUFDUSxNQUFBQSxHQUFHLEVBQUUsR0FBTjtBQUFXQyxNQUFBQSxJQUFJLEVBQUUsRUFBakI7QUFBcUJDLE1BQUFBLFFBQVEsRUFBRTtBQUEvQixLQUE1Qjs7QUFDQUosc0JBQVVLLE1BQVYsQ0FBaUJWLFFBQWpCLEVBQTJCO0FBQUNXLE1BQUFBLE1BQU0sRUFBRTtBQUFFQyxRQUFBQSxLQUFLLEVBQUU7QUFBVDtBQUFULEtBQTNCOztBQUNBUCxzQkFBVUMsT0FBVixDQUFrQkwsZUFBbEIsRUFBbUM7QUFBQ00sTUFBQUEsR0FBRyxFQUFFLEdBQU47QUFBV0MsTUFBQUEsSUFBSSxFQUFFLEVBQWpCO0FBQXFCQyxNQUFBQSxRQUFRLEVBQUU7QUFBL0IsS0FBbkM7O0FBQ0FKLHNCQUFVQyxPQUFWLENBQWtCUCxRQUFsQixFQUE0QjtBQUFDUSxNQUFBQSxHQUFHLEVBQUUsR0FBTjtBQUFXQyxNQUFBQSxJQUFJLEVBQUUsRUFBakI7QUFBcUJDLE1BQUFBLFFBQVEsRUFBRTtBQUEvQixLQUE1Qjs7QUFDQUosc0JBQVVLLE1BQVYsQ0FBaUJULGVBQWpCLEVBQWtDO0FBQUNVLE1BQUFBLE1BQU0sRUFBRTtBQUFFQyxRQUFBQSxLQUFLLEVBQUU7QUFBVDtBQUFULEtBQWxDOztBQUNBUCxzQkFBVUMsT0FBVixDQUFrQkgsS0FBbEIsRUFBeUI7QUFBQ0ksTUFBQUEsR0FBRyxFQUFFLEdBQU47QUFBV0MsTUFBQUEsSUFBSSxFQUFFLEVBQWpCO0FBQXFCQyxNQUFBQSxRQUFRLEVBQUU7QUFBL0IsS0FBekI7O0FBQ0FKLHNCQUFVQyxPQUFWLENBQWtCUCxRQUFsQixFQUE0QjtBQUFDUSxNQUFBQSxHQUFHLEVBQUUsR0FBTjtBQUFXQyxNQUFBQSxJQUFJLEVBQUUsRUFBakI7QUFBcUJDLE1BQUFBLFFBQVEsRUFBRTtBQUEvQixLQUE1Qjs7QUFDQUosc0JBQVVLLE1BQVYsQ0FBaUJQLEtBQWpCLEVBQXdCO0FBQUNRLE1BQUFBLE1BQU0sRUFBRTtBQUFDQyxRQUFBQSxLQUFLLEVBQUU7QUFBUjtBQUFULEtBQXhCOztBQUNBUCxzQkFBVUssTUFBVixDQUFpQlIsSUFBakIsRUFBdUI7QUFBQ1MsTUFBQUEsTUFBTSxFQUFFO0FBQUNDLFFBQUFBLEtBQUssRUFBRTtBQUFSO0FBQVQsS0FBdkI7O0FBQ0FQLHNCQUFVUSxLQUFWLENBQWdCVCxVQUFoQjs7QUFDQVIsSUFBQUEsTUFBTSxDQUFDRixTQUFTLENBQUMsS0FBRCxDQUFWLENBQU4sQ0FBeUJHLFdBQXpCOztBQUNBUSxzQkFBVVEsS0FBVixDQUFnQm5CLFNBQVMsQ0FBQyxLQUFELENBQXpCLEVBeEJnQyxDQXlCaEM7O0FBQ0QsR0ExQkMsQ0FBRjtBQTRCQVAsRUFBQUEsRUFBRSxDQUFDLDZCQUFELEVBQWdDLE1BQU07QUFDdENKLElBQUFBLGVBQWU7QUFEdUIsc0JBRVNoQixPQUZUO0FBQUEsVUFFOUI0QixVQUY4QixhQUU5QkEsVUFGOEI7QUFBQSxVQUVsQkcsV0FGa0IsYUFFbEJBLFdBRmtCO0FBQUEsVUFFTEosU0FGSyxhQUVMQSxTQUZLO0FBR3RDLFVBQU1LLFFBQVEsR0FBR0QsV0FBVyxDQUFDLGVBQUQsQ0FBNUI7QUFDQSxVQUFNZ0IsU0FBUyxHQUFHcEIsU0FBUyxDQUFDLFFBQUQsQ0FBM0I7O0FBQ0FXLHNCQUFVQyxPQUFWLENBQWtCUCxRQUFsQixFQUE0QjtBQUFDUSxNQUFBQSxHQUFHLEVBQUUsR0FBTjtBQUFXQyxNQUFBQSxJQUFJLEVBQUUsRUFBakI7QUFBcUJDLE1BQUFBLFFBQVEsRUFBRTtBQUEvQixLQUE1Qjs7QUFDQUosc0JBQVVLLE1BQVYsQ0FBaUJYLFFBQWpCLEVBQTJCO0FBQUNZLE1BQUFBLE1BQU0sRUFBRTtBQUFFQyxRQUFBQSxLQUFLLEVBQUU7QUFBVDtBQUFULEtBQTNCOztBQUNBUCxzQkFBVVEsS0FBVixDQUFnQkMsU0FBaEI7O0FBQ0FsQixJQUFBQSxNQUFNLENBQUNGLFNBQVMsQ0FBQyxLQUFELENBQVYsQ0FBTixDQUF5QkcsV0FBekI7O0FBQ0FRLHNCQUFVUSxLQUFWLENBQWdCbkIsU0FBUyxDQUFDLElBQUQsQ0FBekIsRUFUc0MsQ0FVdEM7O0FBQ0QsR0FYQyxDQUFGO0FBYUFQLEVBQUFBLEVBQUUsQ0FBQyxpREFBRCxFQUFvRCxNQUFNO0FBQzFESixJQUFBQSxlQUFlO0FBRDJDLHNCQUVwQ2hCLE9BRm9DO0FBQUEsVUFFbEQyQixTQUZrRCxhQUVsREEsU0FGa0Q7QUFHMUQsVUFBTVUsVUFBVSxHQUFHVixTQUFTLENBQUMsUUFBRCxDQUE1Qjs7QUFDQVcsc0JBQVVRLEtBQVYsQ0FBZ0JULFVBQWhCOztBQUNBUixJQUFBQSxNQUFNLENBQUNGLFNBQVMsQ0FBQywrQkFBRCxDQUFWLENBQU4sQ0FBbURHLFdBQW5EO0FBQ0QsR0FOQyxDQUFGO0FBUUFWLEVBQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxZQUFZO0FBQzlDLFVBQU1DLElBQUksR0FBRyxJQUFJQyx5QkFBSixDQUFnQkMsY0FBaEIsQ0FBYjtBQUNBLFFBQUlDLFFBQVEsR0FBR0gsSUFBSSxDQUFDSSxLQUFMLENBQVcsc0JBQVgsRUFDWkMsS0FEWSxDQUNOLEdBRE0sRUFDRCxDQUNWO0FBQ0UsYUFBTyxNQURUO0FBRUUsZUFBUyxlQUZYO0FBR0Usa0JBQVksTUFIZDtBQUlFLHNCQUFnQixJQUpsQjtBQUtFLGNBQVEsT0FMVjtBQU1FLGdCQUFVLElBTlo7QUFPRSxvQkFBYztBQVBoQixLQURVLENBREMsQ0FBZjtBQVlFVixJQUFBQSxlQUFlO0FBZDZCLHNCQWVWaEIsT0FmVTtBQUFBLFVBZXBDMkIsU0Fmb0MsYUFlcENBLFNBZm9DO0FBQUEsVUFlekJDLFVBZnlCLGFBZXpCQSxVQWZ5QjtBQWdCNUMsVUFBTSxvQkFBSSxZQUFZO0FBQ3BCLFlBQU1vQixXQUFXLEdBQUcsTUFBTSw0QkFBZSxNQUFNckIsU0FBUyxDQUFDLE1BQUQsQ0FBOUIsQ0FBMUI7QUFDQUUsTUFBQUEsTUFBTSxDQUFDbUIsV0FBRCxDQUFOLENBQW9CbEIsV0FBcEI7QUFDQUQsTUFBQUEsTUFBTSxDQUFDRCxVQUFVLEVBQVgsQ0FBTixDQUFxQnFCLGVBQXJCO0FBQ0QsS0FKSyxDQUFOO0FBS0gsR0FyQkMsQ0FBRjtBQXVCQTdCLEVBQUFBLEVBQUUsQ0FBQyxvQkFBRCxFQUF1QixZQUFZO0FBQ25DLFVBQU1DLElBQUksR0FBRyxJQUFJQyx5QkFBSixDQUFnQkMsY0FBaEIsQ0FBYjtBQUNBLFFBQUlDLFFBQVEsR0FBR0gsSUFBSSxDQUFDSSxLQUFMLENBQVcsc0JBQVgsRUFDWkMsS0FEWSxDQUNOLEdBRE0sRUFDRCxDQUNWO0FBQ0UsYUFBTyxNQURUO0FBRUUsZUFBUyxlQUZYO0FBR0Usa0JBQVksTUFIZDtBQUlFLHNCQUFnQixJQUpsQjtBQUtFLGNBQVEsT0FMVjtBQU1FLGdCQUFVLElBTlo7QUFPRSxvQkFBYztBQVBoQixLQURVLENBREMsQ0FBZjtBQVlFVixJQUFBQSxlQUFlO0FBZGtCLHNCQWV5Q2hCLE9BZnpDO0FBQUEsVUFlekIyQixTQWZ5QixhQWV6QkEsU0FmeUI7QUFBQSxVQWVkQyxVQWZjLGFBZWRBLFVBZmM7QUFBQSxVQWVGc0IsYUFmRSxhQWVGQSxhQWZFO0FBQUEsVUFlYUMsdUJBZmIsYUFlYUEsdUJBZmI7QUFnQmpDLFVBQU0sb0JBQUksWUFBWTtBQUNwQixZQUFNSCxXQUFXLEdBQUcsTUFBTSw0QkFBZSxNQUFNckIsU0FBUyxDQUFDLE1BQUQsQ0FBOUIsQ0FBMUI7QUFDQUUsTUFBQUEsTUFBTSxDQUFDbUIsV0FBRCxDQUFOLENBQW9CbEIsV0FBcEI7QUFDQSxZQUFNc0IsT0FBTyxHQUFHLE1BQU0sNEJBQWUsTUFBTUYsYUFBYSxDQUFDLE1BQUQsQ0FBYixDQUFzQixDQUF0QixDQUFyQixDQUF0Qjs7QUFDQVosd0JBQVVRLEtBQVYsQ0FBZ0JNLE9BQWhCOztBQUNBLFlBQU1qQixJQUFJLEdBQUcsTUFBTSw0QkFBZSxNQUFNZ0IsdUJBQXVCLENBQUMsbUJBQUQsQ0FBdkIsQ0FBNkMsQ0FBN0MsQ0FBckIsQ0FBbkI7O0FBQ0FiLHdCQUFVSyxNQUFWLENBQWlCUixJQUFqQixFQUF1QjtBQUNyQlMsUUFBQUEsTUFBTSxFQUFFO0FBQUVDLFVBQUFBLEtBQUssRUFBRTtBQUFUO0FBRGEsT0FBdkI7O0FBR0EsWUFBTVQsS0FBSyxHQUFHLE1BQU0sNEJBQWUsTUFBTWUsdUJBQXVCLENBQUMsT0FBRCxDQUF2QixDQUFpQyxDQUFqQyxDQUFyQixDQUFwQjs7QUFDQWIsd0JBQVVLLE1BQVYsQ0FBaUJQLEtBQWpCLEVBQXdCO0FBQ3RCUSxRQUFBQSxNQUFNLEVBQUU7QUFBRUMsVUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFEYyxPQUF4Qjs7QUFHQSxVQUFJUSxHQUFHLEdBQUd4RCxJQUFJLENBQUN5RCxLQUFMLENBQVcvQixjQUFYLEVBQWtCLE1BQWxCLEVBQTBCZ0MsZUFBMUIsQ0FBMEMsR0FBMUMsQ0FBVjtBQUNBLFlBQU1DLE9BQU8sR0FBRyxNQUFNLDRCQUFlLE1BQU1OLGFBQWEsQ0FBQyxNQUFELENBQWIsQ0FBc0IsQ0FBdEIsQ0FBckIsQ0FBdEI7O0FBQ0FaLHdCQUFVUSxLQUFWLENBQWdCVSxPQUFoQjs7QUFDQSxZQUFNLElBQUlDLE9BQUosQ0FBWUMsT0FBTyxJQUFJQyxVQUFVLENBQUNELE9BQUQsRUFBVSxJQUFWLENBQWpDLENBQU47QUFDQTdCLE1BQUFBLE1BQU0sQ0FBQ3dCLEdBQUQsQ0FBTixDQUFZTyxxQkFBWixDQUFrQyxDQUFsQztBQUNELEtBbEJLLENBQU47QUFtQkgsR0FuQ0MsQ0FBRjtBQXFDQXhDLEVBQUFBLEVBQUUsQ0FBQyxtREFBRCxFQUFzRCxZQUFZO0FBQ2xFLFVBQU1DLElBQUksR0FBRyxJQUFJQyx5QkFBSixDQUFnQkMsY0FBaEIsQ0FBYjtBQUNBLFFBQUlDLFFBQVEsR0FBR0gsSUFBSSxDQUFDSSxLQUFMLENBQVcsc0JBQVgsRUFDWkMsS0FEWSxDQUNOLEdBRE0sRUFDRCxDQUNWO0FBQ0UsYUFBTyxNQURUO0FBRUUsZUFBUyxlQUZYO0FBR0Usa0JBQVksTUFIZDtBQUlFLHNCQUFnQixJQUpsQjtBQUtFLGNBQVEsT0FMVjtBQU1FLGdCQUFVLElBTlo7QUFPRSxvQkFBYztBQVBoQixLQURVLENBREMsQ0FBZjtBQVlFVixJQUFBQSxlQUFlO0FBZGlELHNCQWVVaEIsT0FmVjtBQUFBLFVBZXhEMkIsU0Fmd0QsYUFleERBLFNBZndEO0FBQUEsVUFlN0NDLFVBZjZDLGFBZTdDQSxVQWY2QztBQUFBLFVBZWpDc0IsYUFmaUMsYUFlakNBLGFBZmlDO0FBQUEsVUFlbEJDLHVCQWZrQixhQWVsQkEsdUJBZmtCO0FBZ0JoRSxVQUFNLG9CQUFJLFlBQVk7QUFDcEIsWUFBTUgsV0FBVyxHQUFHLE1BQU0sNEJBQWUsTUFBTXJCLFNBQVMsQ0FBQyxNQUFELENBQTlCLENBQTFCO0FBQ0FFLE1BQUFBLE1BQU0sQ0FBQ21CLFdBQUQsQ0FBTixDQUFvQmxCLFdBQXBCO0FBQ0EsWUFBTXNCLE9BQU8sR0FBRyxNQUFNLDRCQUFlLE1BQU1GLGFBQWEsQ0FBQyxNQUFELENBQWIsQ0FBc0IsQ0FBdEIsQ0FBckIsQ0FBdEI7O0FBQ0FaLHdCQUFVUSxLQUFWLENBQWdCTSxPQUFoQjs7QUFDQSxZQUFNakIsSUFBSSxHQUFHLE1BQU0sNEJBQWUsTUFBTWdCLHVCQUF1QixDQUFDLG1CQUFELENBQXZCLENBQTZDLENBQTdDLENBQXJCLENBQW5COztBQUNBYix3QkFBVUssTUFBVixDQUFpQlIsSUFBakIsRUFBdUI7QUFDckJTLFFBQUFBLE1BQU0sRUFBRTtBQUFFQyxVQUFBQSxLQUFLLEVBQUU7QUFBVDtBQURhLE9BQXZCOztBQUdBLFlBQU1ULEtBQUssR0FBRyxNQUFNLDRCQUFlLE1BQU1lLHVCQUF1QixDQUFDLE9BQUQsQ0FBdkIsQ0FBaUMsQ0FBakMsQ0FBckIsQ0FBcEI7O0FBQ0FiLHdCQUFVSyxNQUFWLENBQWlCUCxLQUFqQixFQUF3QjtBQUN0QlEsUUFBQUEsTUFBTSxFQUFFO0FBQUVDLFVBQUFBLEtBQUssRUFBRTtBQUFUO0FBRGMsT0FBeEI7O0FBR0EsVUFBSVEsR0FBRyxHQUFHeEQsSUFBSSxDQUFDeUQsS0FBTCxDQUFXL0IsY0FBWCxFQUFrQixNQUFsQixFQUEwQmdDLGVBQTFCLENBQTBDLEdBQTFDLENBQVY7QUFDQSxZQUFNQyxPQUFPLEdBQUcsTUFBTSw0QkFBZSxNQUFNTixhQUFhLENBQUMsTUFBRCxDQUFiLENBQXNCLENBQXRCLENBQXJCLENBQXRCOztBQUNBWix3QkFBVVEsS0FBVixDQUFnQlUsT0FBaEI7O0FBQ0EsWUFBTSxJQUFJQyxPQUFKLENBQVlDLE9BQU8sSUFBSUMsVUFBVSxDQUFDRCxPQUFELEVBQVUsSUFBVixDQUFqQyxDQUFOO0FBQ0EsWUFBTUcsU0FBUyxHQUFHLE1BQU0sNEJBQWUsTUFBTWxDLFNBQVMsQ0FBQyw0QkFBRCxDQUE5QixDQUF4QjtBQUNBRSxNQUFBQSxNQUFNLENBQUNnQyxTQUFELENBQU4sQ0FBa0IvQixXQUFsQjtBQUNELEtBbkJLLENBQU47QUFvQkgsR0FwQ0MsQ0FBRjtBQXNDQVYsRUFBQUEsRUFBRSxDQUFDLHNCQUFELEVBQXlCLFlBQVk7QUFDckMsVUFBTUMsSUFBSSxHQUFHLElBQUlDLHlCQUFKLENBQWdCQyxjQUFoQixDQUFiO0FBQ0EsUUFBSUMsUUFBUSxHQUFHSCxJQUFJLENBQUNJLEtBQUwsQ0FBVyxzQkFBWCxFQUNaQyxLQURZLENBQ04sR0FETSxFQUNELENBQ1Y7QUFDRSxhQUFPLE1BRFQ7QUFFRSxlQUFTLGVBRlg7QUFHRSxrQkFBWSxNQUhkO0FBSUUsc0JBQWdCLElBSmxCO0FBS0UsY0FBUSxPQUxWO0FBTUUsZ0JBQVUsSUFOWjtBQU9FLG9CQUFjO0FBUGhCLEtBRFUsQ0FEQyxDQUFmO0FBWUVWLElBQUFBLGVBQWU7QUFkb0Isc0JBZXVDaEIsT0FmdkM7QUFBQSxVQWUzQjJCLFNBZjJCLGFBZTNCQSxTQWYyQjtBQUFBLFVBZWhCQyxVQWZnQixhQWVoQkEsVUFmZ0I7QUFBQSxVQWVKc0IsYUFmSSxhQWVKQSxhQWZJO0FBQUEsVUFlV0MsdUJBZlgsYUFlV0EsdUJBZlg7QUFnQm5DLFVBQU0sb0JBQUksWUFBWTtBQUNwQixZQUFNSCxXQUFXLEdBQUcsTUFBTSw0QkFBZSxNQUFNckIsU0FBUyxDQUFDLE1BQUQsQ0FBOUIsQ0FBMUI7QUFDQUUsTUFBQUEsTUFBTSxDQUFDbUIsV0FBRCxDQUFOLENBQW9CbEIsV0FBcEI7QUFDQSxZQUFNZ0MsU0FBUyxHQUFHLE1BQU0sNEJBQWUsTUFBTVosYUFBYSxDQUFDLFFBQUQsQ0FBYixDQUF3QixDQUF4QixDQUFyQixDQUF4Qjs7QUFDQVosd0JBQVVRLEtBQVYsQ0FBZ0JnQixTQUFoQjs7QUFDQSxZQUFNTixPQUFPLEdBQUcsTUFBTSw0QkFBZSxNQUFNTixhQUFhLENBQUMsTUFBRCxDQUFiLENBQXNCLENBQXRCLENBQXJCLENBQXRCOztBQUNBWix3QkFBVVEsS0FBVixDQUFnQlUsT0FBaEI7O0FBQ0EsWUFBTSxJQUFJQyxPQUFKLENBQVlDLE9BQU8sSUFBSUMsVUFBVSxDQUFDRCxPQUFELEVBQVUsSUFBVixDQUFqQyxDQUFOO0FBQ0E3QixNQUFBQSxNQUFNLENBQUNELFVBQVUsRUFBWCxDQUFOLENBQXFCcUIsZUFBckI7QUFDRCxLQVRLLENBQU47QUFVSCxHQTFCQyxDQUFGO0FBNEJBN0IsRUFBQUEsRUFBRSxDQUFDLHVCQUFELEVBQTBCLFlBQVk7QUFDdEMsVUFBTUMsSUFBSSxHQUFHLElBQUlDLHlCQUFKLENBQWdCQyxjQUFoQixDQUFiO0FBQ0EsUUFBSUMsUUFBUSxHQUFHSCxJQUFJLENBQUNJLEtBQUwsQ0FBVyxzQkFBWCxFQUNaQyxLQURZLENBQ04sR0FETSxFQUNELENBQ1Y7QUFDRSxhQUFPLE1BRFQ7QUFFRSxlQUFTLGVBRlg7QUFHRSxrQkFBWSxNQUhkO0FBSUUsc0JBQWdCLElBSmxCO0FBS0UsY0FBUSxPQUxWO0FBTUUsZ0JBQVUsSUFOWjtBQU9FLG9CQUFjO0FBUGhCLEtBRFUsQ0FEQyxDQUFmO0FBWUVWLElBQUFBLGVBQWU7QUFkcUIsc0JBZXNDaEIsT0FmdEM7QUFBQSxVQWU1QjJCLFNBZjRCLGFBZTVCQSxTQWY0QjtBQUFBLFVBZWpCQyxVQWZpQixhQWVqQkEsVUFmaUI7QUFBQSxVQWVMc0IsYUFmSyxhQWVMQSxhQWZLO0FBQUEsVUFlVUMsdUJBZlYsYUFlVUEsdUJBZlY7QUFnQnBDLFVBQU0sb0JBQUksWUFBWTtBQUNwQixZQUFNSCxXQUFXLEdBQUcsTUFBTSw0QkFBZSxNQUFNckIsU0FBUyxDQUFDLE1BQUQsQ0FBOUIsQ0FBMUI7QUFDQUUsTUFBQUEsTUFBTSxDQUFDbUIsV0FBRCxDQUFOLENBQW9CbEIsV0FBcEI7QUFDQSxZQUFNaUMsVUFBVSxHQUFHLE1BQU0sNEJBQWUsTUFBTWIsYUFBYSxDQUFDLFlBQUQsQ0FBYixDQUE0QixDQUE1QixDQUFyQixDQUF6QjtBQUNBLFVBQUlHLEdBQUcsR0FBR3hELElBQUksQ0FBQ3lELEtBQUwsQ0FBVy9CLGNBQVgsRUFBa0IsTUFBbEIsRUFBMEJnQyxlQUExQixDQUEwQyxHQUExQyxDQUFWOztBQUNBakIsd0JBQVVRLEtBQVYsQ0FBZ0JpQixVQUFoQjs7QUFDQSxZQUFNLElBQUlOLE9BQUosQ0FBWUMsT0FBTyxJQUFJQyxVQUFVLENBQUNELE9BQUQsRUFBVSxJQUFWLENBQWpDLENBQU47O0FBQ0FwQix3QkFBVVEsS0FBVixDQUFnQmlCLFVBQWhCOztBQUNBbEMsTUFBQUEsTUFBTSxDQUFDd0IsR0FBRCxDQUFOLENBQVlXLFVBQVo7QUFDRCxLQVRLLENBQU47QUFVSCxHQTFCQyxDQUFGO0FBNEJBNUMsRUFBQUEsRUFBRSxDQUFDLHlCQUFELEVBQTRCLFlBQVk7QUFDeEMsVUFBTUMsSUFBSSxHQUFHLElBQUlDLHlCQUFKLENBQWdCQyxjQUFoQixDQUFiO0FBQ0EsUUFBSUMsUUFBUSxHQUFHSCxJQUFJLENBQUNJLEtBQUwsQ0FBVyxzQkFBWCxFQUNaQyxLQURZLENBQ04sR0FETSxFQUNELENBQ1Y7QUFDRSxhQUFPLE1BRFQ7QUFFRSxlQUFTLGVBRlg7QUFHRSxrQkFBWSxNQUhkO0FBSUUsc0JBQWdCLElBSmxCO0FBS0UsY0FBUSxJQUxWO0FBTUUsZ0JBQVUsSUFOWjtBQU9FLG9CQUFjO0FBUGhCLEtBRFUsQ0FEQyxDQUFmO0FBWUVWLElBQUFBLGVBQWU7QUFkdUIsdUJBZUhoQixPQWZHO0FBQUEsVUFlOUJpRSxXQWY4QixjQWU5QkEsV0FmOEI7QUFBQSxVQWVqQnRDLFNBZmlCLGNBZWpCQSxTQWZpQjtBQWdCdEMsVUFBTSxvQkFBSSxZQUFZO0FBQ3BCLFlBQU1xQixXQUFXLEdBQUcsTUFBTSw0QkFBZSxNQUFNckIsU0FBUyxDQUFDLE1BQUQsQ0FBOUIsQ0FBMUI7QUFDQUUsTUFBQUEsTUFBTSxDQUFDbUIsV0FBRCxDQUFOLENBQW9CbEIsV0FBcEI7QUFDQUQsTUFBQUEsTUFBTSxDQUFDb0MsV0FBVyxDQUFDLFFBQUQsQ0FBWixDQUFOLENBQThCQyxRQUE5QjtBQUNELEtBSkssQ0FBTjtBQUtILEdBckJDLENBQUY7QUFzQkQsQ0FoUk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgQ09QWVJJR0hUIChjKSAyMDE5IFNBTVNVTkcgRUxFQ1RST05JQ1MgQ08uLCBMVEQuICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgIEFMTCBSSUdIVFMgUkVTRVJWRUQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCB0byBsaWNlbnNlZXMgb2YgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gICAgICAgIC9cbi8gICBwcm9kdWN0cyB0byB1c2Ugb3IgYWJzdHJhY3QgdGhpcyBjb21wdXRlciBwcm9ncmFtIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mICAgICAgICAgL1xuLyAgIGltcGxlbWVudGluZyBhIHByb2R1Y3QgYmFzZWQgb24gU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gcHJvZHVjdHMuICAgICAgICAgICAvXG4vICAgTm8gb3RoZXIgcmlnaHRzIHRvIHJlcHJvZHVjZSwgdXNlLCBvciBkaXNzZW1pbmF0ZSB0aGlzIGNvbXB1dGVyIHByb2dyYW0sICAgICAgICAgIC9cbi8gICB3aGV0aGVyIGluIHBhcnQgb3IgaW4gd2hvbGUsIGFyZSBncmFudGVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIG1ha2VzIG5vIHJlcHJlc2VudGF0aW9uIG9yIHdhcnJhbnRpZXMgd2l0aCAgICAgICAgICAvXG4vICAgcmVzcGVjdCB0byB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyBjb21wdXRlciBwcm9ncmFtLCBhbmQgc3BlY2lmaWNhbGx5IGRpc2NsYWltcyAgIC9cbi8gICBhbnkgcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYW1hZ2VzLCBzcGVjaWFsIG9yIGNvbnNlcXVlbnRpYWwsIGNvbm5lY3RlZCAgICAgICAgICAgL1xuLyAgIHdpdGggdGhlIHVzZSBvZiB0aGlzIHByb2dyYW0uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuXG5cbkRFU0NSSVBUSU9OOiBVc2VyIE1hbmFnZW1lbnQgVGVzdCBGaWxlXG5ATkFNRSA6IGluZGV4LnRlc3QuanNcbkBBVVRIT1JTOiBBc3dpbiBLIEtcbkBWZXJzaW9uIDogMS4wICpcbkBSRVZJU0lPTiBISVNUT1JZXG5bMjkvMTEvMjAxOV0gW0Fzd2luIEsgS10gOiBQcm90b3R5cGluZy4uLi4uLi4uLi4vLy8vLy8vLy8vLy8vLy8vLy8vL1xuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgcmVuZGVyLFxuICBmaXJlRXZlbnQsXG4gIGNsZWFudXAsXG4gIHdhaXRGb3JFbGVtZW50LFxuICBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCxcbiAgcXVlcnlCeVRleHRcbn0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBhY3QgfSBmcm9tIFwicmVhY3QtZG9tL3Rlc3QtdXRpbHNcIjtcbmltcG9ydCB7IEkxOG5leHRQcm92aWRlciB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tL2V4dGVuZC1leHBlY3RcIjtcbmltcG9ydCBNb2NrQWRhcHRlciBmcm9tIFwiYXhpb3MtbW9jay1hZGFwdGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UgfSBmcm9tIFwicmVkdXhcIjtcbmltcG9ydCBjcmVhdGVTYWdhTWlkZGxld2FyZSBmcm9tIFwicmVkdXgtc2FnYVwiO1xuaW1wb3J0IHJvb3RTYWdhIGZyb20gXCIuLi8uLi8uLi9zYWdhcy9pbmRleFNhZ2FcIjtcbmltcG9ydCBoZWFkZXJSZWR1Y2VyIGZyb20gXCIuLi8uLi8uLi9zdG9yZS9yZWR1Y2Vycy9oZWFkZXJSZWR1Y2VyXCI7XG5pbXBvcnQgYWxlcnRNYW5hZ2VtZW50UmVkdWNlciBmcm9tIFwiLi4vLi4vLi4vc3RvcmUvcmVkdWNlcnMvYWxlcnRNYW5hZ2VtZW50UmVkdWNlclwiO1xuaW1wb3J0IHVzZXJNYW5hZ2VtZW50UmVkdWNlciBmcm9tIFwiLi4vLi4vLi4vc3RvcmUvcmVkdWNlcnMvdXNlck1hbmFnZW1lbnRSZWR1Y2VyXCI7XG5pbXBvcnQgaTE4biBmcm9tIFwiLi4vLi4vLi4vaTE4blwiO1xuaW1wb3J0IFVzZXJNYW5hZ2VtZW50IGZyb20gXCIuL2luZGV4XCI7XG5cbmplc3QudW5tb2NrKFwiYXhpb3NcIik7XG5cbmRlc2NyaWJlKFwiQ29uZmlndXJhdGlvblNldHRpbmdcIiwgKCkgPT4ge1xuICBsZXQgd3JhcHBlcjtcbiAgbGV0IGhpc3Rvcnk7XG4gIGxldCBzdG9yZTtcbiAgLy8gbGV0IG1vY2s7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNvbnN0IHNhZ2FNaWRkbGV3YXJlID0gY3JlYXRlU2FnYU1pZGRsZXdhcmUoKTtcbiAgICBjb25zdCByb290UmVkdWNlcnMgPSBjb21iaW5lUmVkdWNlcnMoe1xuICAgICAgLy8gaGVhZGVyTGFuZ3VhZ2VSZWR1Y2VyLFxuICAgIC8vICAgaGVhZGVyUmVkdWNlcixcbiAgICAgIGFsZXJ0TWFuYWdlbWVudFJlZHVjZXIsXG4gICAgICB1c2VyTWFuYWdlbWVudFJlZHVjZXJcbiAgICB9KTtcbiAgICBjb25zdCBjb21wb3NlRW5oYW5jZXJzID1cbiAgICAgIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gfHwgY29tcG9zZTtcbiAgICBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxuICAgICAgcm9vdFJlZHVjZXJzLFxuICAgICAgY29tcG9zZUVuaGFuY2VycyhhcHBseU1pZGRsZXdhcmUoc2FnYU1pZGRsZXdhcmUpKVxuICAgICk7XG4gICAgc2FnYU1pZGRsZXdhcmUucnVuKHJvb3RTYWdhKTtcbiAgICBjb25zdCByb3V0ZSA9IFwiL0NvbmZpZ3VyYXRpb25TZXR0aW5nL3VzZXJcIjtcbiAgICBoaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeSh7IGluaXRpYWxFbnRyaWVzOiBbcm91dGVdIH0pO1xuICAgIC8vIG1vY2sgPSBuZXcgTW9ja0FkYXB0ZXIoYXhpb3MpO1xuICB9KTtcblxuICBjb25zdCByZW5kZXJDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgd3JhcHBlciA9IHJlbmRlcihcbiAgICAgIDxSb3V0ZXIgaGlzdG9yeT17aGlzdG9yeX0+XG4gICAgICAgIDxJMThuZXh0UHJvdmlkZXIgaTE4bj17aTE4bn0+XG4gICAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgICAgICA8VXNlck1hbmFnZW1lbnQgLz5cbiAgICAgICAgICA8L1Byb3ZpZGVyPlxuICAgICAgICA8L0kxOG5leHRQcm92aWRlcj5cbiAgICAgIDwvUm91dGVyPlxuICAgICk7XG4gIH07XG5cbiAgYWZ0ZXJFYWNoKGNsZWFudXApO1xuXG4gIGl0KCdyZW5kZXJzIHVzZXIgbWFuYWdlbWVudCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrID0gbmV3IE1vY2tBZGFwdGVyKGF4aW9zKTtcbiAgICBsZXQgcmVzcG9uc2UgPSBtb2NrLm9uR2V0KCcvYXBpL3YxLjAvZ2V0X3VzZXJzLycpLnJlcGx5KDIwMCwgbnVsbCk7XG4gICAgcmVuZGVyQ29tcG9uZW50KCk7XG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGFzRnJhZ21lbnQgfSA9IHdyYXBwZXI7XG4gICAgZXhwZWN0KGdldEJ5VGV4dChcIlVzZXIgTGlzdFwiKSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBhZGQgYSBuZXcgdXNlcicsICgpID0+IHtcbiAgICByZW5kZXJDb21wb25lbnQoKTtcbiAgICBjb25zdCB7IGFzRnJhZ21lbnQsIGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHdyYXBwZXI7XG4gICAgY29uc3QgdXNlcm5hbWUgPSBnZXRCeVRlc3RJZCgnYWRkLXVzZXItbmFtZScpO1xuICAgIGNvbnN0IHBhc3N3b3JkID0gZ2V0QnlUZXN0SWQoJ2FkZC11c2VyLXBhc3N3b3JkJyk7XG4gICAgY29uc3QgY29uZmlybVBhc3N3b3JkID0gZ2V0QnlUZXN0SWQoJ2FkZC11c2VyLWNvbmZpcm0tcGFzc3dvcmQnKTtcbiAgICBjb25zdCBwaG5vID0gZ2V0QnlUZXN0SWQoJ2FkZC11c2VyLXBobm8nKTtcbiAgICBjb25zdCBlbWFpbCA9IGdldEJ5VGVzdElkKCdhZGQtdXNlci1lbWFpbCcpO1xuICAgIGNvbnN0IGNvbmZpcm1CdG4gPSBnZXRCeVRleHQoJ1N1Ym1pdCcpO1xuICAgIGZpcmVFdmVudC5rZXlEb3duKHVzZXJuYW1lLCB7a2V5OiAnQScsIGNvZGU6IDY1LCBjaGFyQ29kZTogNjV9KTtcbiAgICBmaXJlRXZlbnQua2V5RG93bih1c2VybmFtZSwge2tleTogJysnLCBjb2RlOiA0MywgY2hhckNvZGU6IDQzfSk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZSh1c2VybmFtZSwge3RhcmdldDogeyB2YWx1ZTogJ2FiY2QnfX0pO1xuICAgIGZpcmVFdmVudC5rZXlEb3duKHBhc3N3b3JkLCB7a2V5OiAnQScsIGNvZGU6IDY1LCBjaGFyQ29kZTogNjV9KTtcbiAgICBmaXJlRXZlbnQua2V5RG93bih1c2VybmFtZSwge2tleTogJysnLCBjb2RlOiA0MywgY2hhckNvZGU6IDQzfSk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZShwYXNzd29yZCwge3RhcmdldDogeyB2YWx1ZTogJ3Rlc3QnfX0pO1xuICAgIGZpcmVFdmVudC5rZXlEb3duKGNvbmZpcm1QYXNzd29yZCwge2tleTogJ0EnLCBjb2RlOiA2NSwgY2hhckNvZGU6IDY1fSk7XG4gICAgZmlyZUV2ZW50LmtleURvd24odXNlcm5hbWUsIHtrZXk6ICcrJywgY29kZTogNDMsIGNoYXJDb2RlOiA0M30pO1xuICAgIGZpcmVFdmVudC5jaGFuZ2UoY29uZmlybVBhc3N3b3JkLCB7dGFyZ2V0OiB7IHZhbHVlOiAndGVzdCd9fSk7XG4gICAgZmlyZUV2ZW50LmtleURvd24oZW1haWwsIHtrZXk6ICdBJywgY29kZTogNjUsIGNoYXJDb2RlOiA2NX0pO1xuICAgIGZpcmVFdmVudC5rZXlEb3duKHVzZXJuYW1lLCB7a2V5OiAnKycsIGNvZGU6IDQzLCBjaGFyQ29kZTogNDN9KTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlKGVtYWlsLCB7dGFyZ2V0OiB7dmFsdWU6ICdhYmNkQGFiYy5jb20nfX0pO1xuICAgIGZpcmVFdmVudC5jaGFuZ2UocGhubywge3RhcmdldDoge3ZhbHVlOiAnMTIzNDU3ODkwJ319KTtcbiAgICBmaXJlRXZlbnQuY2xpY2soY29uZmlybUJ0bik7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnWWVzJykpLnRvQmVEZWZpbmVkKCk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKGdldEJ5VGV4dCgnWWVzJykpO1xuICAgIC8vIGV4cGVjdCh1c2VybmFtZS52YWx1ZSkudG9CZSgnJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY2FuY2VsIGFkZGluZyBhIHVzZXInLCAoKSA9PiB7XG4gICAgcmVuZGVyQ29tcG9uZW50KCk7XG4gICAgY29uc3QgeyBhc0ZyYWdtZW50LCBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSB3cmFwcGVyO1xuICAgIGNvbnN0IHVzZXJuYW1lID0gZ2V0QnlUZXN0SWQoJ2FkZC11c2VyLW5hbWUnKTtcbiAgICBjb25zdCBjYW5jZWxCdG4gPSBnZXRCeVRleHQoJ0NhbmNlbCcpO1xuICAgIGZpcmVFdmVudC5rZXlEb3duKHVzZXJuYW1lLCB7a2V5OiAnQScsIGNvZGU6IDY1LCBjaGFyQ29kZTogNjV9KTtcbiAgICBmaXJlRXZlbnQuY2hhbmdlKHVzZXJuYW1lLCB7dGFyZ2V0OiB7IHZhbHVlOiAnYWJjZCd9fSk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKGNhbmNlbEJ0bik7XG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnWWVzJykpLnRvQmVEZWZpbmVkKCk7XG4gICAgZmlyZUV2ZW50LmNsaWNrKGdldEJ5VGV4dCgnTm8nKSk7XG4gICAgLy8gZXhwZWN0KHVzZXJuYW1lLnZhbHVlKS50b0JlKCcnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciB3aGVuIHVzZXJuYW1lIGlzIG5vdCBwcmVzZW50JywgKCkgPT4ge1xuICAgIHJlbmRlckNvbXBvbmVudCgpO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSB3cmFwcGVyO1xuICAgIGNvbnN0IGNvbmZpcm1CdG4gPSBnZXRCeVRleHQoJ1N1Ym1pdCcpO1xuICAgIGZpcmVFdmVudC5jbGljayhjb25maXJtQnRuKTtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KFwiUGxlYXNlIEVudGVyIGEgVmFsaWQgVXNlcm5hbWVcIikpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYWRkIGxpc3QgYWxsIHRoZSB1c2VycycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrID0gbmV3IE1vY2tBZGFwdGVyKGF4aW9zKTtcbiAgICBsZXQgcmVzcG9uc2UgPSBtb2NrLm9uR2V0KCcvYXBpL3YxLjAvZ2V0X3VzZXJzLycpXG4gICAgICAucmVwbHkoMjAwLCBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIl9pZFwiOiBcImFiY2RcIixcbiAgICAgICAgICBcImVtYWlsXCI6IFwiYWJjZEBjb3JwLmNvbVwiLFxuICAgICAgICAgIFwicGFzc3dvcmRcIjogXCJEZWZnXCIsXG4gICAgICAgICAgXCJwaG9uZV9udW1iZXJcIjogXCJ4eFwiLFxuICAgICAgICAgIFwicm9sZVwiOiBcImFkbWluXCIsXG4gICAgICAgICAgXCJhY3RpdmVcIjogdHJ1ZSxcbiAgICAgICAgICBcInByaXZpbGVnZXNcIjogXCJDcmVhdGUsIFJlYWQsIEVkaXQsIERlbGV0ZVwiXG4gICAgICAgIH1cbiAgICAgIF0pO1xuICAgICAgcmVuZGVyQ29tcG9uZW50KCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCwgYXNGcmFnbWVudCB9ID0gd3JhcHBlcjtcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWVFbGVtZW50ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QnlUZXh0KFwiYWJjZFwiKSk7XG4gICAgICAgIGV4cGVjdChuYW1lRWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KGFzRnJhZ21lbnQoKSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBlZGl0IGEgdXNlcicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrID0gbmV3IE1vY2tBZGFwdGVyKGF4aW9zKTtcbiAgICBsZXQgcmVzcG9uc2UgPSBtb2NrLm9uR2V0KCcvYXBpL3YxLjAvZ2V0X3VzZXJzLycpXG4gICAgICAucmVwbHkoMjAwLCBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIl9pZFwiOiBcImFiY2RcIixcbiAgICAgICAgICBcImVtYWlsXCI6IFwiYWJjZEBjb3JwLmNvbVwiLFxuICAgICAgICAgIFwicGFzc3dvcmRcIjogXCJEZWZnXCIsXG4gICAgICAgICAgXCJwaG9uZV9udW1iZXJcIjogXCJ4eFwiLFxuICAgICAgICAgIFwicm9sZVwiOiBcImFkbWluXCIsXG4gICAgICAgICAgXCJhY3RpdmVcIjogdHJ1ZSxcbiAgICAgICAgICBcInByaXZpbGVnZXNcIjogXCJDcmVhdGUsIFJlYWQsIEVkaXQsIERlbGV0ZVwiXG4gICAgICAgIH1cbiAgICAgIF0pXG4gICAgICByZW5kZXJDb21wb25lbnQoKTtcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBhc0ZyYWdtZW50LCBnZXRBbGxCeVRpdGxlLCBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCB9ID0gd3JhcHBlcjtcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWVFbGVtZW50ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QnlUZXh0KFwiYWJjZFwiKSk7XG4gICAgICAgIGV4cGVjdChuYW1lRWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgY29uc3QgZWRpdEJ0biA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGl0bGUoXCJFZGl0XCIpWzBdKTtcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKGVkaXRCdG4pO1xuICAgICAgICBjb25zdCBwaG5vID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQoXCIrMSAoNzAyKSAxMjMtNDU2N1wiKVswXSk7XG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2UocGhubywge1xuICAgICAgICAgIHRhcmdldDogeyB2YWx1ZTogXCIrMSAoNzAyKSAxMjMtNDU3OFwiIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVtYWlsID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQoXCJFbWFpbFwiKVswXSk7XG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZW1haWwsIHtcbiAgICAgICAgICB0YXJnZXQ6IHsgdmFsdWU6IFwidGVzdEBhYmMuY29tXCIgfVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHNweSA9IGplc3Quc3B5T24oYXhpb3MsIFwicG9zdFwiKS5tb2NrUmV0dXJuVmFsdWUoMjAwKTtcbiAgICAgICAgY29uc3Qgc2F2ZUJ0biA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGl0bGUoXCJTYXZlXCIpWzBdKTtcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKHNhdmVCdG4pO1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xuICAgICAgICBleHBlY3Qoc3B5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICB9KTtcbiAgfSlcblxuICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHRoZSBlbWFpbGlkIGlzIG5vdCB2YWxpZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrID0gbmV3IE1vY2tBZGFwdGVyKGF4aW9zKTtcbiAgICBsZXQgcmVzcG9uc2UgPSBtb2NrLm9uR2V0KCcvYXBpL3YxLjAvZ2V0X3VzZXJzLycpXG4gICAgICAucmVwbHkoMjAwLCBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIl9pZFwiOiBcImFiY2RcIixcbiAgICAgICAgICBcImVtYWlsXCI6IFwiYWJjZEBjb3JwLmNvbVwiLFxuICAgICAgICAgIFwicGFzc3dvcmRcIjogXCJEZWZnXCIsXG4gICAgICAgICAgXCJwaG9uZV9udW1iZXJcIjogXCJ4eFwiLFxuICAgICAgICAgIFwicm9sZVwiOiBcImFkbWluXCIsXG4gICAgICAgICAgXCJhY3RpdmVcIjogdHJ1ZSxcbiAgICAgICAgICBcInByaXZpbGVnZXNcIjogXCJDcmVhdGUsIFJlYWQsIEVkaXQsIERlbGV0ZVwiXG4gICAgICAgIH1cbiAgICAgIF0pO1xuICAgICAgcmVuZGVyQ29tcG9uZW50KCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCwgYXNGcmFnbWVudCwgZ2V0QWxsQnlUaXRsZSwgZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQgfSA9IHdyYXBwZXI7XG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lRWxlbWVudCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEJ5VGV4dChcImFiY2RcIikpO1xuICAgICAgICBleHBlY3QobmFtZUVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGNvbnN0IGVkaXRCdG4gPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRBbGxCeVRpdGxlKFwiRWRpdFwiKVswXSk7XG4gICAgICAgIGZpcmVFdmVudC5jbGljayhlZGl0QnRuKTtcbiAgICAgICAgY29uc3QgcGhubyA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0KFwiKzEgKDcwMikgMTIzLTQ1NjdcIilbMF0pO1xuICAgICAgICBmaXJlRXZlbnQuY2hhbmdlKHBobm8sIHtcbiAgICAgICAgICB0YXJnZXQ6IHsgdmFsdWU6IFwiKzEgKDcwMikgMTIzLTQ1NzhcIiB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBlbWFpbCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0KFwiRW1haWxcIilbMF0pO1xuICAgICAgICBmaXJlRXZlbnQuY2hhbmdlKGVtYWlsLCB7XG4gICAgICAgICAgdGFyZ2V0OiB7IHZhbHVlOiBcInRlc3RcIiB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgc3B5ID0gamVzdC5zcHlPbihheGlvcywgXCJwb3N0XCIpLm1vY2tSZXR1cm5WYWx1ZSgyMDApO1xuICAgICAgICBjb25zdCBzYXZlQnRuID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUaXRsZShcIlNhdmVcIilbMF0pO1xuICAgICAgICBmaXJlRXZlbnQuY2xpY2soc2F2ZUJ0bik7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICAgIGNvbnN0IGFsZXJ0VGV4dCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEJ5VGV4dChcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGlucHV0XCIpKTtcbiAgICAgICAgZXhwZWN0KGFsZXJ0VGV4dCkudG9CZURlZmluZWQoKTtcbiAgICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRlbGV0ZSBhIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9jayA9IG5ldyBNb2NrQWRhcHRlcihheGlvcyk7XG4gICAgbGV0IHJlc3BvbnNlID0gbW9jay5vbkdldCgnL2FwaS92MS4wL2dldF91c2Vycy8nKVxuICAgICAgLnJlcGx5KDIwMCwgW1xuICAgICAgICB7XG4gICAgICAgICAgXCJfaWRcIjogXCJhYmNkXCIsXG4gICAgICAgICAgXCJlbWFpbFwiOiBcImFiY2RAY29ycC5jb21cIixcbiAgICAgICAgICBcInBhc3N3b3JkXCI6IFwiRGVmZ1wiLFxuICAgICAgICAgIFwicGhvbmVfbnVtYmVyXCI6IFwieHhcIixcbiAgICAgICAgICBcInJvbGVcIjogXCJhZG1pblwiLFxuICAgICAgICAgIFwiYWN0aXZlXCI6IHRydWUsXG4gICAgICAgICAgXCJwcml2aWxlZ2VzXCI6IFwiQ3JlYXRlLCBSZWFkLCBFZGl0LCBEZWxldGVcIlxuICAgICAgICB9XG4gICAgICBdKVxuICAgICAgcmVuZGVyQ29tcG9uZW50KCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCwgYXNGcmFnbWVudCwgZ2V0QWxsQnlUaXRsZSwgZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQgfSA9IHdyYXBwZXI7XG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lRWxlbWVudCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEJ5VGV4dChcImFiY2RcIikpO1xuICAgICAgICBleHBlY3QobmFtZUVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGNvbnN0IGRlbGV0ZUJ0biA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGl0bGUoXCJEZWxldGVcIilbMF0pO1xuICAgICAgICBmaXJlRXZlbnQuY2xpY2soZGVsZXRlQnRuKTtcbiAgICAgICAgY29uc3Qgc2F2ZUJ0biA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGl0bGUoXCJTYXZlXCIpWzBdKTtcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKHNhdmVCdG4pO1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xuICAgICAgICBleHBlY3QoYXNGcmFnbWVudCgpKS50b01hdGNoU25hcHNob3QoKTtcbiAgICAgIH0pO1xuICB9KVxuXG4gIGl0KCdzaG91bGQgZGlzYWJsZSBhIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9jayA9IG5ldyBNb2NrQWRhcHRlcihheGlvcyk7XG4gICAgbGV0IHJlc3BvbnNlID0gbW9jay5vbkdldCgnL2FwaS92MS4wL2dldF91c2Vycy8nKVxuICAgICAgLnJlcGx5KDIwMCwgW1xuICAgICAgICB7XG4gICAgICAgICAgXCJfaWRcIjogXCJhYmNkXCIsXG4gICAgICAgICAgXCJlbWFpbFwiOiBcImFiY2RAY29ycC5jb21cIixcbiAgICAgICAgICBcInBhc3N3b3JkXCI6IFwiRGVmZ1wiLFxuICAgICAgICAgIFwicGhvbmVfbnVtYmVyXCI6IFwieHhcIixcbiAgICAgICAgICBcInJvbGVcIjogXCJhZG1pblwiLFxuICAgICAgICAgIFwiYWN0aXZlXCI6IHRydWUsXG4gICAgICAgICAgXCJwcml2aWxlZ2VzXCI6IFwiQ3JlYXRlLCBSZWFkLCBFZGl0LCBEZWxldGVcIlxuICAgICAgICB9XG4gICAgICBdKVxuICAgICAgcmVuZGVyQ29tcG9uZW50KCk7XG4gICAgICBjb25zdCB7IGdldEJ5VGV4dCwgYXNGcmFnbWVudCwgZ2V0QWxsQnlUaXRsZSwgZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQgfSA9IHdyYXBwZXI7XG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lRWxlbWVudCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEJ5VGV4dChcImFiY2RcIikpO1xuICAgICAgICBleHBlY3QobmFtZUVsZW1lbnQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGNvbnN0IGRpc2FibGVCdG4gPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRBbGxCeVRpdGxlKFwiYXBpLWVuYWJsZVwiKVswXSk7XG4gICAgICAgIGxldCBzcHkgPSBqZXN0LnNweU9uKGF4aW9zLCBcInBvc3RcIikubW9ja1JldHVyblZhbHVlKDIwMCk7XG4gICAgICAgIGZpcmVFdmVudC5jbGljayhkaXNhYmxlQnRuKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKGRpc2FibGVCdG4pO1xuICAgICAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkKCk7XG4gICAgICB9KTtcbiAgfSlcblxuICBpdCgnc2hvdWxkIG5vdCBkaXNwbGF5IHJvbGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9jayA9IG5ldyBNb2NrQWRhcHRlcihheGlvcyk7XG4gICAgbGV0IHJlc3BvbnNlID0gbW9jay5vbkdldCgnL2FwaS92MS4wL2dldF91c2Vycy8nKVxuICAgICAgLnJlcGx5KDIwMCwgW1xuICAgICAgICB7XG4gICAgICAgICAgXCJfaWRcIjogXCJhYmNkXCIsXG4gICAgICAgICAgXCJlbWFpbFwiOiBcImFiY2RAY29ycC5jb21cIixcbiAgICAgICAgICBcInBhc3N3b3JkXCI6IFwiRGVmZ1wiLFxuICAgICAgICAgIFwicGhvbmVfbnVtYmVyXCI6IFwieHhcIixcbiAgICAgICAgICBcInJvbGVcIjogbnVsbCxcbiAgICAgICAgICBcImFjdGl2ZVwiOiB0cnVlLFxuICAgICAgICAgIFwicHJpdmlsZWdlc1wiOiBcIlwiXG4gICAgICAgIH1cbiAgICAgIF0pXG4gICAgICByZW5kZXJDb21wb25lbnQoKTtcbiAgICAgIGNvbnN0IHsgcXVlcnlCeVRleHQsIGdldEJ5VGV4dCB9ID0gd3JhcHBlcjtcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWVFbGVtZW50ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QnlUZXh0KFwiYWJjZFwiKSk7XG4gICAgICAgIGV4cGVjdChuYW1lRWxlbWVudCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KFwiQ3JlYXRlXCIpKS50b0JlTnVsbCgpO1xuICAgICAgfSk7XG4gIH0pXG59KTtcbiJdfQ==