{"version":3,"sources":["storageReducer.js"],"names":["initialState","ssds","volumes","metadisks","loading","alertOpen","alertType","alertTitle","errorMsg","errorCode","arraySize","maxVolumeCount","createVolumeButton","totalVolSize","storagedisks","sparedisks","writebufferdisks","metadiskpath","slots","arrayExists","RAIDLevel","loadText","diskDetails","DevicePath","SerialNumber","ModelNumber","PhysicalSize","UsedBytes","Firmware","critical_warning","temperature","avail_spare","spare_thresh","precent_used","data_units_read","data_units_written","critical_comp_time","warning_temp_time","percent_used","bytesToGB","size","parseInt","storageReducer","state","action","type","actionTypes","FETCH_DEVICE_INFO","STORAGE_SHOW_ALERT","payload","FETCH_ARRAY_SIZE","FETCH_MAX_VOLUME_COUNT","TOGGLE_CREATE_VOLUME_BUTTON","FETCH_ARRAY","SET_NO_ARRAY","FETCH_VOLUMES","CLEAR_VOLUMES","ADD_VOLUME","name","volume","Name","id","Id","Capacity","Data","AllocatedBytes","usedspace","ConsumedBytes","maxiops","Oem","MaxIOPS","maxbw","MaxBandwidth","status","Status","VolumeStatus","SELECT_VOLUME","slice","index","selected","value","SELECT_ALL_VOLUMES","map","vol","STORAGE_CLOSE_ALERT","EDIT_VOLUME","edit","CHANGE_VOLUME_FIELD","STORAGE_START_LOADER","STORAGE_STOP_LOADER","FETCH_DEVICE_DETAILS"],"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\n\nDESCRIPTION: <Contains reducer function for Storage Management Component> *\n@NAME : storageReducer.js\n@AUTHORS: Aswin K K\n@Version : 1.0 *\n@REVISION HISTORY\n[03/06/2019] [Jay] : Prototyping..........////////////////////\n*/\n\nimport * as actionTypes from \"../actions/actionTypes\";\n\nexport const initialState = {\n    ssds: [],\n    volumes: [],\n    metadisks: [],\n    loading: false,\n    alertOpen: false,\n    alertType: 'alert',\n    alertTitle: '',\n    errorMsg: '',\n    errorCode: '',\n    arraySize: 0,\n    maxVolumeCount: 256,\n    createVolumeButton: false,\n    totalVolSize: 0,\n    storagedisks: [],\n    sparedisks: [],\n    writebufferdisks: [],\n    metadiskpath: '',\n    slots: [],\n    arrayExists: false,\n    RAIDLevel: '',\n    loadText: 'Loading...',\n    diskDetails: {\n        DevicePath: 'NA',\n        SerialNumber: 'NA',\n        ModelNumber: 'NA',\n        PhysicalSize: 'NA',\n        UsedBytes: 'NA',\n        Firmware: 'NA',\n        critical_warning: 'NA',\n        temperature: 'NA',\n        avail_spare: 'NA',\n        spare_thresh: 'NA',\n        precent_used: 'NA',\n        data_units_read: 'NA',\n        data_units_written: 'NA',\n        critical_comp_time: 'NA',\n        warning_temp_time: 'NA',\n        percent_used: 'NA',\n    }\n}\n\nconst bytesToGB = (size) => {\n    return parseInt(size/(1024 * 1024 * 1024), 10)\n}\n\nconst storageReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_DEVICE_INFO:\n            return {\n                ...state,\n                ssds: action.ssds,\n                metadisks: action.metadisks\n            }\n        case actionTypes.STORAGE_SHOW_ALERT:\n            return {\n                ...state,\n                alertOpen: true,\n                ...action.payload\n            }\n        case actionTypes.FETCH_ARRAY_SIZE:\n            return {\n                ...state,\n                arraySize: action.payload\n            }\n        case actionTypes.FETCH_MAX_VOLUME_COUNT:\n            return {\n                ...state,\n                maxVolumeCount: action.payload\n            }\n        case actionTypes.TOGGLE_CREATE_VOLUME_BUTTON:\n            return {\n                ...state,\n                createVolumeButton: action.payload\n            }\n        case actionTypes.FETCH_ARRAY:\n            return {\n                ...state,\n                ...action.payload,\n                arrayExists: true\n            }\n        case actionTypes.SET_NO_ARRAY:\n            return {\n                ...state,\n                arrayExists: false\n            }\n        case actionTypes.FETCH_VOLUMES: {\n            return {\n                ...state,\n                ...action.payload\n            }\n        }\n        case actionTypes.CLEAR_VOLUMES: {\n            return {\n                ...state,\n                volumes: []\n            }\n        }\n        case actionTypes.ADD_VOLUME: {\n            return {\n                ...state,\n                volumes: [\n                    ...state.volumes,\n                    {\n                        name: action.volume.Name,\n                        id: action.volume.Id,\n                        size: bytesToGB(action.volume.Capacity.Data.AllocatedBytes),\n                        usedspace: bytesToGB(action.volume.Capacity.Data.ConsumedBytes),\n                        maxiops: action.volume.Oem.MaxIOPS,\n                        maxbw: action.volume.Oem.MaxBandwidth,\n                        status: action.volume.Status.Oem.VolumeStatus\n                    }\n                ]\n            }\n        }\n        case actionTypes.SELECT_VOLUME:\n            return {\n                ...state,\n                volumes: [\n                    ...state.volumes.slice(0, action.payload.index),\n                    {\n                        ...state.volumes[action.payload.index],\n                        selected: action.payload.value\n                    },\n                    ...state.volumes.slice(action.payload.index + 1)\n                ]\n            }\n        case actionTypes.SELECT_ALL_VOLUMES:\n            return {\n                ...state,\n                volumes: state.volumes.map(vol => {\n                    return {\n                        ...vol,\n                        selected: action.payload.value\n                    }\n                })\n            }\n        case actionTypes.STORAGE_CLOSE_ALERT:\n            return {\n                ...state,\n                alertOpen: false,\n            }\n        case actionTypes.EDIT_VOLUME: {\n            const volumes = state.volumes.map((vol) => {\n                return vol.id === action.payload.id ? {\n                    ...vol,\n                    edit: true\n                } : {\n                        ...vol,\n                        edit: false\n                    };\n            });\n            return {\n                ...state,\n                volumes\n            }\n        }\n        case actionTypes.CHANGE_VOLUME_FIELD: {\n            const volumes = state.volumes.map((vol) => {\n                return vol.id === action.payload.id ? {\n                    ...vol,\n                    [action.payload.name]: action.payload.value\n                } : {\n                        ...vol,\n                    };\n            });\n            return {\n                ...state,\n                volumes\n            }\n        }\n        case actionTypes.STORAGE_START_LOADER:\n            return {\n                ...state,\n                loading: true,\n                loadText: action.payload\n            }\n        case actionTypes.STORAGE_STOP_LOADER:\n            return {\n                ...state,\n                loading: false\n            }\n        case actionTypes.FETCH_DEVICE_DETAILS:\n            return {\n                ...state,\n                diskDetails: action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport default storageReducer;\n"]}