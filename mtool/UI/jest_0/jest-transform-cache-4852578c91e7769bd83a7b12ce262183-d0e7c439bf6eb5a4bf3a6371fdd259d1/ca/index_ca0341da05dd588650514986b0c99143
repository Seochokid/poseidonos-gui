94ff4c8f7e3a7bb69768a6179d7bb351
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _core = require("@material-ui/core");

var _materialUiPhoneNumber = _interopRequireDefault(require("material-ui-phone-number"));

require("./AddNewUser.css");

var _theme = require("../../theme");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AddNewUser/index.js";

const styles = theme => {
  return {
    addNewUserOuterGrid: {
      maxWidth: '100%',
      flexBasis: '100%',
      justifyContent: 'center'
    },
    addNewUserFirstInnerGrid: {
      border: '1px solid gray',
      paddingBottom: theme.spacing(2),
      backgroundColor: '#fff'
    },
    gridTypography: {
      maxWidth: '100%',
      flexBasis: '100%',
      maxHeight: '5%'
    },
    addNewUserTypography: {
      textAlign: 'left',
      fontSize: '14px',
      fontWeight: 'bold',
      color: '#424780',
      margin: theme.spacing(1.5)
    },
    addNewUserSecondInnerGrid: {
      maxWidth: '40%',
      maxHeight: '70%',
      flexBasis: '40%'
    },
    addNewUserThirdInnerGrid: {
      maxWidth: '20%',
      flexBasis: '20%',
      maxHeight: '70%'
    },
    textField: {
      marginLeft: theme.spacing(3),
      width: '70%',
      [theme.breakpoints.down('xs')]: {
        marginLeft: 0
      }
    },
    fieldContainer: {
      [theme.breakpoints.down('xs')]: {
        display: 'flex',
        justifyContent: 'center'
      }
    },
    formWrapper: {
      paddingTop: theme.spacing(2)
    },
    textFieldAfterDropdown: {
      marginLeft: theme.spacing(3),
      width: '70%',
      marginTop: theme.spacing(1)
    },
    selectFieldItem: {
      marginLeft: theme.spacing(3),
      marginTop: theme.spacing(2),
      color: 'black',
      width: '70%',
      textTransform: 'uppercase',
      [theme.breakpoints.down('xs')]: {
        marginLeft: 0
      }
    },
    selectMenuItem: {
      color: 'black',
      textTransform: 'uppercase'
    },
    button: {
      margin: theme.spacing(1),
      textTransform: 'none',
      paddingTop: '1px',
      maxHeight: '25px',
      color: 'white',
      marginBottom: 0,
      '&:hover': {
        background: 'rgb(94,104,116)',
        // borderColor: 'black',
        color: 'white'
      }
    },
    buttonGroup: {
      alignItems: 'flex-end'
    },
    buttonContainer: {
      [theme.breakpoints.down('xs')]: {
        justifyContent: 'center'
      }
    }
  };
};

class AddNewUser extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      sm: 6,
      xs: 12,
      direction: "row",
      className: classes.addNewUserOuterGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 142
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      direction: "row",
      className: classes.addNewUserFirstInnerGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 144
      },
      __self: this
    }, _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 145
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      xs: 12,
      item: true,
      className: classes.gridTypography,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 146
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.addNewUserTypography,
      variant: "h3",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 147
      },
      __self: this
    }, "Add New User")), _react.default.createElement(_core.Grid, {
      sm: 8,
      md: 10,
      xs: 12,
      item: true,
      container: true,
      className: classes.formWrapper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 149
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      className: classes.fieldContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 150
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      className: classes.textField,
      required: true,
      multiline: true,
      rowsMax: "1",
      inputProps: {
        "data-testid": "add-user-name"
      },
      margin: "none",
      value: this.props.username,
      name: "username",
      label: "User Name",
      placeholder: "Enter User Name",
      onChange: event => this.props.OnHandleChange(event),
      onKeyDown: e => /[+-,#, ,]$/.test(e.key) && e.preventDefault(),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 151
      },
      __self: this
    })), _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      className: classes.fieldContainer,
      item: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 167
      },
      __self: this
    }, _react.default.createElement(_core.Select, {
      disabled: true,
      className: classes.selectFieldItem,
      value: "admin",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 168
      },
      __self: this
    }, _react.default.createElement(_core.MenuItem, {
      className: classes.selectMenuItem,
      value: "admin",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 173
      },
      __self: this
    }, " admin "))), _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      className: classes.fieldContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 180
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      className: classes.textField,
      required: true,
      inputProps: {
        "data-testid": "add-user-password"
      },
      margin: "none",
      value: this.props.password,
      name: "password",
      type: "password",
      label: "Password",
      placeholder: "Enter Initial Password",
      onChange: this.props.OnHandleChange,
      onKeyDown: e => /[+-,#, ,]$/.test(e.key) && e.preventDefault(),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 181
      },
      __self: this
    })), _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      className: classes.fieldContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 196
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      className: classes.textField,
      required: true,
      inputProps: {
        "data-testid": "add-user-confirm-password"
      },
      type: "password",
      margin: "none",
      value: this.props.confirmpassword,
      name: "confirmpassword",
      label: "Confirm Password",
      placeholder: "Please Confirm Password",
      onChange: this.props.OnHandleChange,
      onKeyDown: e => /[+-,#, ,]$/.test(e.key) && e.preventDefault(),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 197
      },
      __self: this
    })), _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      className: classes.fieldContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 212
      },
      __self: this
    }, _react.default.createElement(_materialUiPhoneNumber.default, {
      inputClass: classes.textField,
      onChange: value => this.props.OnHandleChange({
        target: {
          value,
          name: 'mobilenumber'
        }
      }),
      inputProps: {
        'data-testid': "add-user-phno",
        name: 'mobilenumber',
        label: 'Mobile Number',
        value: this.props.mobilenumber
      },
      required: true,
      label: "Phone Number" // onlyCountries={['in', 'kr']}
      ,
      defaultCountry: "kr",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 213
      },
      __self: this
    })), _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      className: classes.fieldContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 228
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      className: classes.textField,
      required: true,
      multiline: true,
      rowsMax: "1",
      inputProps: {
        "data-testid": "add-user-email"
      },
      margin: "none",
      value: this.props.emailid,
      name: "emailid",
      label: "Email ID",
      placeholder: "Enter Email Id",
      onChange: this.props.OnHandleChange,
      onKeyDown: e => /[+-,#, ,]$/.test(e.key) && e.preventDefault(),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 229
      },
      __self: this
    }))), _react.default.createElement(_core.Grid, {
      sm: 4,
      md: 2,
      xs: 12,
      item: true,
      container: true,
      className: classes.buttonContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 246
      },
      __self: this
    }, _react.default.createElement(_core.ButtonGroup, {
      size: "small",
      color: "primary",
      className: classes.buttonGroup,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 247
      },
      __self: this
    }, _react.default.createElement(_core.Button, {
      color: "primary",
      variant: "contained",
      onClick: () => {
        this.props.openAlert("Cancel");
      },
      className: classes.button,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 248
      },
      __self: this
    }, "Cancel"), _react.default.createElement(_core.Button, {
      color: "primary",
      variant: "contained",
      onClick: () => {
        this.props.openAlert("Submit");
      },
      className: classes.button,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 249
      },
      __self: this
    }, "Submit"))))));
  }

}

var _default = (0, _core.withStyles)(styles)(AddNewUser);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,