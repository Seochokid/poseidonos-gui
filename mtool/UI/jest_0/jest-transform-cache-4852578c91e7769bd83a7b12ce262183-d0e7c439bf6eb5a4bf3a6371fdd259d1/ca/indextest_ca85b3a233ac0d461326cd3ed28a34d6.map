{"version":3,"sources":["index.test.js"],"names":["jest","unmock","describe","wrapper","history","store","beforeEach","sagaMiddleware","rootReducers","alertManagementReducer","hardwareOverviewReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","run","rootSaga","route","initialEntries","renderComponent","i18n","afterEach","cleanup","it","getByTestId","container","expect","toBeDefined","mock","MockAdapter","axios","onPost","reply","onAny","getByText","powerBtn","fireEvent","click","noBtn"],"mappings":"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\n\nDESCRIPTION: Hardware Container Test File\n@NAME : index.test.js\n@AUTHORS: Jay Sanghavi\n@Version : 1.0 *\n@REVISION HISTORY\n[03/06/2019] [Jay] : Prototyping..........////////////////////\n*/\n\nimport React from \"react\";\nimport {\n    render,\n    fireEvent,\n    cleanup,\n    waitForElement\n} from \"@testing-library/react\";\nimport { Provider } from \"react-redux\";\nimport { act } from \"react-dom/test-utils\";\nimport { I18nextProvider } from \"react-i18next\";\nimport axios from \"axios\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport { createMemoryHistory } from \"history\";\nimport { Router } from \"react-router-dom\";\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../../../sagas/indexSaga\";\nimport alertManagementReducer from \"../../../store/reducers/alertManagementReducer\";\nimport hardwareOverviewReducer from \"../../../store/reducers/hardwareOverviewReducer\";\nimport i18n from \"../../../i18n\";\nimport OverviewTab from './index'\njest.unmock(\"axios\");\n\ndescribe(\"OverviewTab\", () => {\n    let wrapper;\n    let history;\n    let store;\n    // let mock;\n    beforeEach(() => {\n        const sagaMiddleware = createSagaMiddleware();\n        const rootReducers = combineReducers({\n            alertManagementReducer,\n            hardwareOverviewReducer,\n            hardwareOverviewReducer\n        });\n        const composeEnhancers =\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n        store = createStore(\n            rootReducers,\n            composeEnhancers(applyMiddleware(sagaMiddleware))\n        );\n        sagaMiddleware.run(rootSaga);\n        const route = \"/Hardware/Overview\";\n        history = createMemoryHistory({ initialEntries: [route] });\n        // mock = new MockAdapter(axios);\n    });\n\n    const renderComponent = () => {\n        wrapper = render(\n            <Router history={history}>\n                <I18nextProvider i18n={i18n}>\n                    <Provider store={store}>\n                        {\" \"}\n                        <OverviewTab />\n                    </Provider>\n                </I18nextProvider>\n            </Router>\n        );\n    };\n\n    afterEach(cleanup);\n\n    it(\"renders overview page\", async () => {\n        renderComponent();\n        const { getByTestId } = wrapper;\n        const container = await waitForElement(() =>\n            getByTestId(\"OverviewTab-container\")\n        );\n        expect(container).toBeDefined();\n    });\n\n    it(\"should not power on the server\", async () => {\n        const mock = new MockAdapter(axios);\n        mock.onPost('/*').reply(200, [])\n            .onAny().reply(200, []);\n        renderComponent();\n        const { getByTestId, getByText } = wrapper;\n        const container = await waitForElement(() =>\n            getByTestId(\"OverviewTab-container\")\n        );\n        expect(container).toBeDefined();\n        const powerBtn = await waitForElement(() => getByTestId(\"PowerOnButton\"));\n        fireEvent.click(powerBtn);\n\n        const noBtn = await waitForElement(() => getByText(\"No\"));\n        expect(noBtn).toBeDefined();\n        fireEvent.click(noBtn);\n    });\n});"]}