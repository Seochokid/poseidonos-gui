59c99183c423a88946eb2a8ea1fa6a37
"use strict";

jest.unmock("axios");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactRedux = require("react-redux");

var _testUtils = require("react-dom/test-utils");

var _reactI18next = require("react-i18next");

var _axios = _interopRequireDefault(require("axios"));

require("@testing-library/jest-dom/extend-expect");

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _history = require("history");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _indexSaga = _interopRequireDefault(require("../../../sagas/indexSaga"));

var _alertManagementReducer = _interopRequireDefault(require("../../../store/reducers/alertManagementReducer"));

var _hardwareOverviewReducer = _interopRequireDefault(require("../../../store/reducers/hardwareOverviewReducer"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _index = _interopRequireDefault(require("./index"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Hardware/Overview/index.test.js";
describe("OverviewTab", () => {
  let wrapper;
  let history;
  let store; // let mock;

  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      alertManagementReducer: _alertManagementReducer.default,
      hardwareOverviewReducer: _hardwareOverviewReducer.default,
      hardwareOverviewReducer: _hardwareOverviewReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = "/Hardware/Overview";
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    }); // mock = new MockAdapter(axios);
  });

  const renderComponent = () => {
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 78
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 79
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 80
      },
      __self: void 0
    }, " ", _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82
      },
      __self: void 0
    })))));
  };

  afterEach(_react2.cleanup);
  it("renders overview page", async () => {
    renderComponent();
    const _wrapper = wrapper,
          getByTestId = _wrapper.getByTestId;
    const container = await (0, _react2.waitForElement)(() => getByTestId("OverviewTab-container"));
    expect(container).toBeDefined();
  });
  it("should not power on the server", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onPost('/*').reply(200, []).onAny().reply(200, []);
    renderComponent();
    const _wrapper2 = wrapper,
          getByTestId = _wrapper2.getByTestId,
          getByText = _wrapper2.getByText;
    const container = await (0, _react2.waitForElement)(() => getByTestId("OverviewTab-container"));
    expect(container).toBeDefined();
    const powerBtn = await (0, _react2.waitForElement)(() => getByTestId("PowerOnButton"));

    _react2.fireEvent.click(powerBtn);

    const noBtn = await (0, _react2.waitForElement)(() => getByText("No"));
    expect(noBtn).toBeDefined();

    _react2.fireEvent.click(noBtn);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,