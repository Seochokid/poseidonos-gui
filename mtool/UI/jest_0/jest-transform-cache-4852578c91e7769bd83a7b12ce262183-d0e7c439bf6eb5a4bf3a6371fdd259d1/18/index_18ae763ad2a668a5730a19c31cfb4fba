81c2135d0ebd2db881954f0984b076ea
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _core = require("@material-ui/core");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _Dialog = _interopRequireDefault(require("../../../components/Dialog"));

var _theme = require("../../../theme");

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../../../store/actions/exportActionCreators"));

var _Chassis = _interopRequireDefault(require("../../../components/OverviewComponents/Chassis"));

var _ServiceStatus = _interopRequireDefault(require("../../../components/HealthComponents/ServiceStatus"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Hardware/Health/index.js";

const styles = theme => ({
  overviewContainer: {
    margin: 0,
    maxWidth: "100%"
  },
  content: {
    flexGrow: 1,
    width: '100%',
    boxSizing: 'border-box',
    padding: theme.spacing(2, 0)
  },
  toolbar: _theme.customTheme.toolbar,
  cardHeader: _theme.customTheme.card.header,
  overviewPaper: {
    width: '100%'
  }
});

class HealthTab extends _react.Component {
  constructor(props) {
    super(props);
    this.openAlert = this.openAlert.bind(this);
    this.handleAlertClose = this.handleAlertClose.bind(this);
    this.triggerCommand = this.triggerCommand.bind(this);
  }

  componentDidMount() {}

  openAlert(operationType) {
    this.props.openAlertBox({
      alertOpen: true,
      addDeleteSend: operationType,
      alerttype: 'delete',
      istypealert: false,
      alerttitle: `${operationType} System`,
      alertdescription: `Are you sure you want to ${operationType} the system?`
    });
  }

  triggerCommand() {
    if (this.props.addDeleteSend === 'Reboot') {
      this.props.rebootSystem();
      this.handleAlertClose();
    } else if (this.props.addDeleteSend === 'Shutdown') {
      this.props.shutdownSystem();
      this.handleAlertClose();
    }
  }

  handleAlertClose() {
    this.props.openAlertBox({
      alertOpen: false
    });
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 98
      },
      __self: this
    }, _react.default.createElement("main", {
      className: classes.content,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 99
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      "data-testid": "Health-container",
      container: true,
      className: classes.overviewContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 100
      },
      __self: this
    }, _react.default.createElement(_core.Paper, {
      className: classes.overviewPaper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 101
      },
      __self: this
    }, _react.default.createElement(_Chassis.default, {
      openAlert: this.openAlert,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 102
      },
      __self: this
    }), _react.default.createElement(_ServiceStatus.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105
      },
      __self: this
    })))), _react.default.createElement(_Dialog.default, {
      title: this.props.alerttitle,
      description: this.props.alertdescription,
      open: this.props.alertOpen,
      type: this.props.alerttype,
      handleClose: this.handleAlertClose,
      onConfirm: this.triggerCommand,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 109
      },
      __self: this
    }));
  }

}

const mapStateToProps = state => {
  return {
    alertOpen: state.alertManagementReducer.alertOpen,
    addDeleteSend: state.alertManagementReducer.addDeleteSend,
    alerttype: state.alertManagementReducer.alerttype,
    istypealert: state.alertManagementReducer.istypealert,
    alerttitle: state.alertManagementReducer.alerttitle,
    alertdescription: state.alertManagementReducer.alertdescription
  };
};

const mapDispatchToProps = dispatch => {
  return {
    openAlertBox: alertParam => dispatch(actionCreators.openAlertBox(alertParam))
  };
};

var _default = (0, _core.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(HealthTab));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,