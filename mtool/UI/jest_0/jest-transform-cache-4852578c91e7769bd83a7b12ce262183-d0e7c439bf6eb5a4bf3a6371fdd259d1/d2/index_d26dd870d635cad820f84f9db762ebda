69f0f894a098abb469a6b749484161a2
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _core = require("@material-ui/core");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _Dialog = _interopRequireDefault(require("../../../components/Dialog"));

var _theme = require("../../../theme");

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../../../store/actions/exportActionCreators"));

var _PowerSummary = _interopRequireDefault(require("../../../components/PowerManagementComponents/PowerSummary"));

var _PowerStateTable = _interopRequireDefault(require("../../../components/PowerManagementComponents/PowerStateTable"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Hardware/PowerManagement/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => ({
  powerMgmtContainer: {
    margin: 0,
    maxWidth: "100%"
  },
  content: {
    flexGrow: 1,
    width: '100%',
    boxSizing: 'border-box',
    padding: theme.spacing(2, 0)
  },
  toolbar: _theme.customTheme.toolbar,
  cardHeader: _theme.customTheme.card.header,
  powerMgmtPaper: {
    width: '100%'
  }
});

class PowerManagement extends _react.Component {
  constructor(props) {
    super(props);
    this.openAlert = this.openAlert.bind(this);
    this.handleAlertClose = this.handleAlertClose.bind(this);
    this.triggerCommand = this.triggerCommand.bind(this);
    this.onHandleChange = this.onHandleChange.bind(this);
    this.state = {
      powermode: 'Manual'
    };
  }

  componentDidMount() {}

  openAlert(operationType) {
    this.props.openAlertBox({
      alertOpen: true,
      addDeleteSend: operationType,
      alerttype: 'delete',
      istypealert: false,
      alerttitle: `${operationType} System`,
      alertdescription: `Are you sure you want to ${operationType} the system?`
    });
  }

  triggerCommand() {
    if (this.props.addDeleteSend === 'Reboot') {
      this.props.rebootSystem();
      this.handleAlertClose();
    } else if (this.props.addDeleteSend === 'Shutdown') {
      this.props.shutdownSystem();
      this.handleAlertClose();
    }
  }

  handleAlertClose() {
    this.props.openAlertBox({
      alertOpen: false
    });
  }

  onHandleChange(event) {
    const _event$target = event.target,
          name = _event$target.name,
          value = _event$target.value;
    this.setState(_objectSpread({}, this.state, {
      [name]: value
    }));
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 110
      },
      __self: this
    }, _react.default.createElement("main", {
      className: classes.content,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 111
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      "data-testid": "PowerManagement-container",
      container: true,
      className: classes.powerMgmtContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 112
      },
      __self: this
    }, _react.default.createElement(_core.Paper, {
      className: classes.powerMgmtPaper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113
      },
      __self: this
    }, _react.default.createElement(_PowerSummary.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 114
      },
      __self: this
    }), _react.default.createElement(_PowerStateTable.default, {
      powermode: this.state.powermode,
      handleChange: this.onHandleChange,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 115
      },
      __self: this
    })))), _react.default.createElement(_Dialog.default, {
      title: this.props.alerttitle,
      description: this.props.alertdescription,
      open: this.props.alertOpen,
      type: this.props.alerttype,
      handleClose: this.handleAlertClose,
      onConfirm: this.triggerCommand,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 119
      },
      __self: this
    }));
  }

}

const mapStateToProps = state => {
  return {
    alertOpen: state.alertManagementReducer.alertOpen,
    addDeleteSend: state.alertManagementReducer.addDeleteSend,
    alerttype: state.alertManagementReducer.alerttype,
    istypealert: state.alertManagementReducer.istypealert,
    alerttitle: state.alertManagementReducer.alerttitle,
    alertdescription: state.alertManagementReducer.alertdescription
  };
};

const mapDispatchToProps = dispatch => {
  return {
    openAlertBox: alertParam => dispatch(actionCreators.openAlertBox(alertParam))
  };
};

var _default = (0, _core.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PowerManagement));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,