40bc2539156ef1cff9a7d6a780475b1e
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _LinearProgress = _interopRequireDefault(require("@material-ui/core/LinearProgress"));

var _styles = require("@material-ui/core/styles");

var _materialTable = _interopRequireWildcard(require("material-table"));

var _core = require("@material-ui/core");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _SaveAlt = _interopRequireDefault(require("@material-ui/icons/SaveAlt"));

var _ChevronLeft = _interopRequireDefault(require("@material-ui/icons/ChevronLeft"));

var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var _FirstPage = _interopRequireDefault(require("@material-ui/icons/FirstPage"));

var _LastPage = _interopRequireDefault(require("@material-ui/icons/LastPage"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _FilterList = _interopRequireDefault(require("@material-ui/icons/FilterList"));

var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));

var _Edit = _interopRequireDefault(require("@material-ui/icons/Edit"));

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _ArrowUpward = _interopRequireDefault(require("@material-ui/icons/ArrowUpward"));

var _Switch = _interopRequireDefault(require("@material-ui/core/Switch"));

var _Clear = _interopRequireDefault(require("@material-ui/icons/Clear"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _Card = _interopRequireDefault(require("@material-ui/core/Card"));

var _Refresh = _interopRequireDefault(require("@material-ui/icons/Refresh"));

var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));

var _FormGroup = _interopRequireDefault(require("@material-ui/core/FormGroup"));

var _FormControlLabel = _interopRequireDefault(require("@material-ui/core/FormControlLabel"));

var _Checkbox = _interopRequireDefault(require("@material-ui/core/Checkbox"));

var _Select = _interopRequireDefault(require("@material-ui/core/Select"));

var _Input = _interopRequireDefault(require("@material-ui/core/Input"));

var _InputLabel = _interopRequireDefault(require("@material-ui/core/InputLabel"));

var _MenuItem = _interopRequireDefault(require("@material-ui/core/MenuItem"));

var _ListItemText = _interopRequireDefault(require("@material-ui/core/ListItemText"));

var _ListSubheader = _interopRequireDefault(require("@material-ui/core/ListSubheader"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _ClearAll = _interopRequireDefault(require("@material-ui/icons/ClearAll"));

var _theme = require("../../../theme");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/OverviewComponents/BmcLogTable/index.js";

const styles = theme => ({
  root: {
    flexGrow: 1
  }
});

class BmcLogTable extends _react.Component {
  constructor(props) {
    super(props);
    this.tableRef = _react.default.createRef();
    this.handleSourceChange = this.handleSourceChange.bind(this);
    this.handleEntryTypeChange = this.handleEntryTypeChange.bind(this);
    this.handleSeverityChange = this.handleSeverityChange.bind(this);
    this.handleSelectAll = this.handleSelectAll.bind(this);
    this.theme = (0, _core.createMuiTheme)({
      switch: {
        margin: "100px"
      },
      overrides: {
        MuiMenuItem: {
          root: {
            paddingTop: "0px",
            paddingBottom: "0px",
            minHeight: "0px"
          }
        },
        MuiListSubheader: {
          root: {
            lineHeight: "15px"
          }
        },
        MuiSelect: {
          selectMenu: {
            maxWidth: "200px",
            minWidth: "150px",
            fontSize: "12px",
            backgroundColor: "#78859514",
            paddingLeft: "15px"
          }
        },
        MuiSvgIcon: {
          //  stylesheet name
          root: {
            //  rule name
            color: "#808080"
          }
        },
        MuiListItemText: {
          root: {
            overflowX: "scrollable",
            overflowY: "hidden",
            paddingLeft: "0px"
          }
        },
        MuiInput: {
          formControl: {
            maxWidth: "200px",
            minWidth: "200px"
          }
        },
        MuiFormControl: {
          root: {
            minWidth: "100px"
          }
        },
        MTableToolbar: {
          root: {
            marginBottom: "-20px"
          }
        },
        MuiCard: {
          root: {
            height: "2.5rem",
            padding: "15px",
            marginTop: "1rem",
            display: "flex",
            alignItems: "center",
            justifyContent: "center"
          }
        },
        MuiPopover: {
          paper: {
            width: "auto !important",
            maxWidth: "700px"
          }
        },
        MuiTypography: {
          h6: {
            fontSize: "14px",
            color: "rgb(33,34,37,0.6)",
            fontWeight: "600",
            paddingBottom: "30px"
          },
          caption: {
            paddingBottom: "2px"
          },
          body1: {
            fontSize: "12px"
          }
        },
        MuiTextField: {
          root: {
            float: "none",
            marginBottom: "-6px"
          }
        },
        MuiIconButton: {
          root: {
            marginRight: "10px"
          },
          colorInherit: {
            marginTop: "-30px"
          }
        },
        MuiFormLabel: {
          root: {
            fontSize: "14px"
          }
        },
        MuiTablePagination: {
          menuItem: {
            fontSize: "12px",
            minHeight: "0px"
          }
        },
        MuiInputBase: {
          input: {
            fontSize: "14px"
          }
        }
      },
      palette: {
        primary: {
          main: "#4caf50"
        },
        secondary: {
          main: "#808080"
        }
      }
    });
    this.state = {
      component: {
        Toolbar: props => _react.default.createElement("div", {
          style: {
            height: "35px",
            fontSize: "12px"
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 211
          },
          __self: this
        }, _react.default.createElement(_materialTable.MTableToolbar, Object.assign({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 212
          },
          __self: this
        }))),
        Pagination: props => _react.default.createElement(_core.TablePagination, Object.assign({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 215
          },
          __self: this
        })),
        FilterRow: props => _react.default.createElement("tr", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 217
          },
          __self: this
        }, _react.default.createElement("td", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 218
          },
          __self: this
        }), _react.default.createElement("td", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 219
          },
          __self: this
        }, _react.default.createElement(_FormControl.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 220
          },
          __self: this
        }, _react.default.createElement(_InputLabel.default, {
          style: {
            fontSize: "12px",
            marginLeft: "15px"
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 221
          },
          __self: this
        }, "Source Filter"), _react.default.createElement(_Select.default, {
          SelectDisplayProps: {
            'data-testid': "sourceSelect"
          } // data-testid="sourceSelect"
          ,
          multiple: true,
          value: this.state.sourceFilter,
          onChange: this.handleSourceChange,
          input: _react.default.createElement(_Input.default, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 232
            },
            __self: this
          }),
          renderValue: selected => selected.join(", "),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 224
          },
          __self: this
        }, _react.default.createElement(_Checkbox.default, {
          checked: this.state.sourceSelectAll,
          onChange: this.handleSelectAll,
          value: "Select All",
          name: "source_select_all",
          "data-testid": "sourceSelectAll" // inputProps={{
          //   'data-testid' :"sourceSelectAll"
          // }}
          ,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 235
          },
          __self: this
        }), _react.default.createElement(_Typography.default, {
          value: "Select All",
          variant: "caption",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 245
          },
          __self: this
        }, " ", "Select All", " "), _react.default.createElement(_ListSubheader.default, {
          style: {
            fontSize: "12px"
          },
          value: "subheader",
          "data-testid": "sourceSelectAllSubheader",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 249
          },
          __self: this
        }, "Choose Filters"), this.state.source_filter_array.map(item => _react.default.createElement(_MenuItem.default, {
          key: item,
          value: item,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 254
          },
          __self: this
        }, _react.default.createElement(_Checkbox.default, {
          checked: this.state.sourceFilter.indexOf(item) > -1,
          size: "small",
          "data-testid": item,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 255
          },
          __self: this
        }), _react.default.createElement(_ListItemText.default, {
          primary: item,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 260
          },
          __self: this
        })))))), _react.default.createElement("td", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 266
          },
          __self: this
        }, _react.default.createElement(_FormControl.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 267
          },
          __self: this
        }, _react.default.createElement(_InputLabel.default, {
          style: {
            fontSize: "12px",
            marginLeft: "15px"
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 268
          },
          __self: this
        }, "Entry Type Filter"), _react.default.createElement(_Select.default, {
          SelectDisplayProps: {
            'data-testid': "entryTypeSelect"
          },
          multiple: true,
          value: this.state.entryTypeFilter,
          onChange: this.handleEntryTypeChange,
          input: _react.default.createElement(_Input.default, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 278
            },
            __self: this
          }),
          renderValue: selected => selected.join(", "),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 271
          },
          __self: this
        }, _react.default.createElement(_Checkbox.default, {
          checked: this.state.entryTypeSelectAll,
          onChange: this.handleSelectAll,
          value: "Select All",
          name: "entrytype_select_all",
          "data-testid": "entryTypeSelectAll",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 281
          },
          __self: this
        }), _react.default.createElement(_Typography.default, {
          value: "Select All",
          variant: "caption",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 288
          },
          __self: this
        }, " ", "Select All", " "), _react.default.createElement(_ListSubheader.default, {
          style: {
            fontSize: "12px"
          },
          value: "subheader",
          "data-testid": "entryTypeSelectAllSubheader",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 292
          },
          __self: this
        }, "Choose Filters"), this.state.entryType_filter_array.map(item => _react.default.createElement(_MenuItem.default, {
          key: item,
          value: item,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 296
          },
          __self: this
        }, _react.default.createElement(_Checkbox.default, {
          checked: this.state.entryTypeFilter.indexOf(item) > -1,
          "data-testid": item,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 297
          },
          __self: this
        }), _react.default.createElement(_ListItemText.default, {
          primary: item,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 301
          },
          __self: this
        })))))), _react.default.createElement("td", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 307
          },
          __self: this
        }, _react.default.createElement(_FormControl.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 308
          },
          __self: this
        }, _react.default.createElement(_InputLabel.default, {
          style: {
            fontSize: "12px",
            marginLeft: "15px"
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 309
          },
          __self: this
        }, "Severity Filter"), _react.default.createElement(_Select.default, {
          multiple: true,
          value: this.state.severityFilter,
          onChange: this.handleSeverityChange,
          input: _react.default.createElement(_Input.default, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 317
            },
            __self: this
          }),
          renderValue: selected => selected.join(", "),
          SelectDisplayProps: {
            'data-testid': "severitySelect"
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 313
          },
          __self: this
        }, _react.default.createElement(_Checkbox.default, {
          checked: this.state.severitySelectAll,
          onChange: this.handleSelectAll,
          value: "Select All",
          name: "severity_select_all",
          "data-testid": "severitySelectAll",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 323
          },
          __self: this
        }), _react.default.createElement(_Typography.default, {
          value: "Select All",
          variant: "caption",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 330
          },
          __self: this
        }, " ", "Select All", " "), _react.default.createElement(_ListSubheader.default, {
          style: {
            fontSize: "12px"
          },
          value: "subheader",
          "data-testid": "severitySelectAllSubheader",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 334
          },
          __self: this
        }, "Choose Filters"), this.state.severity_filter_array.map(item => _react.default.createElement(_MenuItem.default, {
          key: item,
          value: item,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 338
          },
          __self: this
        }, _react.default.createElement(_Checkbox.default, {
          checked: this.state.severityFilter.indexOf(item) > -1,
          "data-testid": item,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 339
          },
          __self: this
        }), _react.default.createElement(_ListItemText.default, {
          primary: item,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 343
          },
          __self: this
        })))))))
      },
      data: [],
      source_filter_array: [],
      sourceFilter: [],
      entryType_filter_array: [],
      entryTypeFilter: [],
      severity_filter_array: [],
      severityFilter: [],
      filter_applied: "no",
      filter_query: "",
      sourceSelectAll: false,
      entryTypeSelectAll: false,
      severitySelectAll: false
    };
  }

  handleSelectAll(event) {
    if (event.target.name === "source_select_all") {
      if (event.target.checked === true) {
        this.setState({
          sourceFilter: this.state.source_filter_array
        });
        this.setState({
          sourceSelectAll: true
        });
      } else {
        this.setState({
          sourceFilter: []
        });
        this.setState({
          sourceSelectAll: false
        });
      }
    } else if (event.target.name === "entrytype_select_all") {
      if (event.target.checked === true) {
        this.setState({
          entryTypeFilter: this.state.entryType_filter_array
        });
        this.setState({
          entryTypeSelectAll: true
        });
      } else {
        this.setState({
          entryTypeFilter: []
        });
        this.setState({
          entryTypeSelectAll: false
        });
      }
    } else if (event.target.name === "severity_select_all") {
      if (event.target.checked === true) {
        this.setState({
          severityFilter: this.state.severity_filter_array
        });
        this.setState({
          severitySelectAll: true
        });
      } else {
        this.setState({
          severityFilter: []
        });
        this.setState({
          severitySelectAll: false
        });
      }
    }

    this.setState({
      filter_applied: "yes"
    });
    this.tableRef.current && this.tableRef.current.onQueryChange();
  }

  handleSourceChange(event) {
    const value = event.target.value;
    const index = value.indexOf("Select All");
    const subheader_index = value.indexOf("subheader");
    if (subheader_index > -1) return;
    if (index > -1 && index === value.length - 1) return;
    this.setState({
      sourceFilter: value
    });
    if (value.length === this.state.source_filter_array.length) this.setState({
      sourceSelectAll: true
    });
    if (value.length < this.state.source_filter_array.length) this.setState({
      sourceSelectAll: false
    });
    this.setState({
      filter_applied: "yes"
    });
    this.tableRef.current && this.tableRef.current.onQueryChange();
  }

  handleEntryTypeChange(event) {
    const value = event.target.value;
    const index = value.indexOf("Select All");
    const subheader_index = value.indexOf("subheader");
    if (subheader_index > -1) return;
    if (index > -1 && index === value.length - 1) return;
    this.setState({
      entryTypeFilter: value
    });
    if (value.length === this.state.entryType_filter_array.length) this.setState({
      entryTypeSelectAll: true
    });
    if (value.length < this.state.entryType_filter_array.length) this.setState({
      entryTypeSelectAll: false
    });
    this.setState({
      filter_applied: "yes"
    });
    this.tableRef.current && this.tableRef.current.onQueryChange();
  }

  handleSeverityChange(event) {
    const value = event.target.value;
    const index = value.indexOf("Select All");
    const subheader_index = value.indexOf("subheader");
    if (subheader_index > -1) return;
    if (index > -1 && index === value.length - 1) return;
    if (value.length === this.state.severity_filter_array.length) this.setState({
      severitySelectAll: true
    });
    if (value.length < this.state.severity_filter_array.length) this.setState({
      severitySelectAll: false
    });
    this.setState({
      severityFilter: value
    });
    this.setState({
      filter_applied: "yes"
    });
    this.tableRef.current && this.tableRef.current.onQueryChange();
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: this.theme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 450
      },
      __self: this
    }, _react.default.createElement(_materialTable.default, {
      title: "BMC Logs",
      tableRef: this.tableRef,
      style: {
        flexBasis: "100%",
        marginTop: "10px"
      },
      icons: {
        Check: _Check.default,
        FirstPage: _FirstPage.default,
        LastPage: _LastPage.default,
        NextPage: _ChevronRight.default,
        PreviousPage: _ChevronLeft.default,
        Search: _Search.default,
        ThirdStateCheck: _Remove.default,
        DetailPanel: _ChevronRight.default,
        Export: _SaveAlt.default,
        Filter: _FilterList.default,
        Add: _Add.default,
        Edit: _Edit.default,
        Delete: _Delete.default,
        SortArrow: _ArrowUpward.default,
        Clear: _Clear.default
      },
      components: this.state.component,
      actions: [{
        icon: _Refresh.default,
        tooltip: "Refresh Logs",
        isFreeAction: true,
        onClick: () => this.tableRef.current && this.tableRef.current.onQueryChange()
      }],
      options: {
        rowStyle: {
          fontSize: "4px"
        },
        header: true,
        search: false,
        paginationType: "normal",
        loadingType: "overlay",
        actionsColumnIndex: -1,
        headerStyle: _theme.customTheme.table.header,
        showTitle: true,
        toolbarButtonAlignment: "right",
        pageSizeOptions: [],
        pageSize: 10,
        filtering: true
      } // columns={this.state.columns}
      ,
      columns: [{
        title: "Timestamp",
        field: "timestamp",
        cellStyle: {
          fontSize: "12px",
          minWidth: "200px"
        }
      }, {
        title: "Source",
        field: "source",
        cellStyle: {
          fontSize: "12px"
        },
        headerStyle: {
          height: "10px"
        }
      }, {
        title: "Entry Type",
        field: "entryType",
        cellStyle: {
          fontSize: "12px"
        }
      }, {
        title: "Severity",
        field: "severity",
        cellStyle: {
          fontSize: "12px"
        }
      }, {
        title: "Description",
        field: "description",
        cellStyle: {
          fontSize: "12px",
          maxWidth: "20%"
        },
        filterCellStyle: {
          paddingBottom: "1px"
        }
      }] // data={this.state.data}
      ,
      data: query => new Promise((resolve, reject) => {
        const page = this.state.filter_applied === "yes" ? 0 : query.page;
        let url = "/api/v1.0/get_Bmc_Logs/?";
        url += `per_page=${query.pageSize}`;
        url += `&page=${page}`;
        let filterSubQuery = "";
        let flag = false;

        if (this.state.sourceFilter.length > 0) {
          flag = true;
          filterSubQuery += `where (Source = '${this.state.sourceFilter[0]}'`;

          for (var i = 1; i < this.state.sourceFilter.length; i += 1) {
            filterSubQuery += ` OR Source = '${this.state.sourceFilter[i]}'`;
          }

          filterSubQuery += ") ";
        }

        if (this.state.entryTypeFilter.length > 0) {
          if (flag === false) {
            filterSubQuery += `where (EntryType = '${this.state.entryTypeFilter[0]}'`;
            flag = true;
          } else {
            filterSubQuery += `AND (EntryType = '${this.state.entryTypeFilter[0]}'`;
          }

          for (var i = 1; i < this.state.entryTypeFilter.length; i += 1) {
            filterSubQuery += ` OR EntryType = '${this.state.entryTypeFilter[i]}'`;
          }

          filterSubQuery += ") ";
        }

        if (this.state.severityFilter.length > 0) {
          if (flag === false) {
            filterSubQuery += `where (Severity = '${this.state.severityFilter[0]}'`;
            flag = true;
          } else {
            filterSubQuery += `AND (Severity = '${this.state.severityFilter[0]}'`;
          }

          for (var i = 1; i < this.state.severityFilter.length; i += 1) {
            filterSubQuery += ` OR Severity = '${this.state.severityFilter[i]}'`;
          }

          filterSubQuery += ") ";
        }

        url += `&filterSubQuery=${filterSubQuery}`;
        url += `&filter_applied=${this.state.filter_applied}`;
        fetch(url).then(response => response.json()).then(result => {
          this.setState({
            source_filter_array: result.source_filter_array,
            entryType_filter_array: result.entryType_filter_array,
            severity_filter_array: result.severity_filter_array
          });
          resolve({
            data: result.resp,
            page: result.page,
            totalCount: result.count
          });
        });
        this.setState({
          filter_applied: "no"
        });
      }),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 451
      },
      __self: this
    }));
  }

}

var _default = (0, _styles.withStyles)(styles)(BmcLogTable);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,