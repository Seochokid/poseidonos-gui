cc32488cdc5ace40433700db03e8607a
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _styles = require("@material-ui/core/styles");

var _materialTable = _interopRequireDefault(require("material-table"));

var _core = require("@material-ui/core");

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _SaveAlt = _interopRequireDefault(require("@material-ui/icons/SaveAlt"));

var _ChevronLeft = _interopRequireDefault(require("@material-ui/icons/ChevronLeft"));

var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var _FirstPage = _interopRequireDefault(require("@material-ui/icons/FirstPage"));

var _LastPage = _interopRequireDefault(require("@material-ui/icons/LastPage"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _FilterList = _interopRequireDefault(require("@material-ui/icons/FilterList"));

var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));

var _Edit = _interopRequireDefault(require("@material-ui/icons/Edit"));

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _ArrowUpward = _interopRequireDefault(require("@material-ui/icons/ArrowUpward"));

var _Clear = _interopRequireDefault(require("@material-ui/icons/Clear"));

var _Ok14x = _interopRequireDefault(require("../../../assets/images/Ok14x14.png"));

var _NotOk14x = _interopRequireDefault(require("../../../assets/images/Not-Ok14x14.png"));

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/DriveComponents/DriveTable/index.js";

const styles = theme => ({
  multilineColor: {
    color: 'black'
  },
  root: {
    flexGrow: 1
  },
  Paper: {
    marginTop: theme.spacing(2),
    width: '100%',
    maxHeight: '100%'
  },
  powerParentGrid: {
    maxWidth: '100%',
    flexBasis: '100%',
    minHeight: '100%'
  },
  powerOuterGrid: {
    border: '1px solid gray',
    maxWidth: '100%',
    flexBasis: '100%',
    overflowY: 'auto',
    overflowX: 'hidden',
    background: '#fff'
  }
});

class DriveTable extends _react.Component {
  constructor(props) {
    super(props);
    this.theme = (0, _core.createMuiTheme)({
      overrides: {
        MuiSvgIcon: {
          //  stylesheet name
          root: {
            //  rule name
            color: '#808080'
          }
        },
        MuiTablePagination: {
          menuItem: {
            fontSize: "12px",
            minHeight: "0px"
          },
          select: {
            width: "45px"
          },
          toolbar: {
            maxHeight: '50px',
            minHeight: '20px'
          }
        }
      },
      palette: {
        primary: {
          main: '#4caf50'
        },
        secondary: {
          main: '#808080'
        }
      }
    });
    this.state = {
      columns: [{
        title: 'Slot Number',
        field: 'SlotNumber',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("p", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 131
          },
          __self: this
        }, rowData.SlotNumber ? rowData.SlotNumber : 'NA')
      }, {
        title: 'Health',
        field: 'Status.Health',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("img", {
          src: rowData.Status && rowData.Status.Health === 'OK' ? _Ok14x.default : _NotOk14x.default,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 143
          },
          __self: this
        })
      }, {
        title: 'Serial Number',
        field: 'SerialNumber',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("p", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 155
          },
          __self: this
        }, rowData.SerialNumber !== '' ? rowData.SerialNumber : 'NA')
      }, {
        title: 'Firmware',
        field: 'Firmware',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("p", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 167
          },
          __self: this
        }, rowData.Firmware ? rowData.Firmware : 'NA')
      }, {
        title: 'State',
        field: 'State',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("p", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 179
          },
          __self: this
        }, rowData.State ? rowData.State : 'NA')
      }, {
        title: 'Raw Capacity',
        field: 'RawCapacity',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("p", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 191
          },
          __self: this
        }, rowData.Capacity ? rowData.Capacity : 'NA')
      }, {
        title: 'LED',
        field: 'active',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement(_core.Switch, {
          size: "small",
          checked: rowData.active,
          onChange: () => console.log("Switch") // this.props.togglealertstatus(row.tableData.id)}
          ,
          color: "primary",
          inputProps: {
            'aria-label': 'primary checkbox'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 203
          },
          __self: this
        })
      }]
    };
  }

  componentDidMount() {}

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_core.Paper, {
      className: classes.Paper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 222
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      sm: 6,
      xs: 12,
      item: true,
      container: true,
      className: classes.powerParentGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 223
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      xs: 12,
      item: true,
      className: classes.powerOuterGrid,
      "data-testid": "DriveTable-table",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 224
      },
      __self: this
    }, _react.default.createElement(_MuiThemeProvider.default, {
      theme: this.theme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 225
      },
      __self: this
    }, _react.default.createElement(_materialTable.default, {
      icons: {
        Check: _Check.default,
        FirstPage: _FirstPage.default,
        LastPage: _LastPage.default,
        NextPage: _ChevronRight.default,
        PreviousPage: _ChevronLeft.default,
        Search: _Search.default,
        ThirdStateCheck: _Remove.default,
        DetailPanel: _ChevronRight.default,
        Export: _SaveAlt.default,
        Filter: _FilterList.default,
        Add: _Add.default,
        Edit: _Edit.default,
        Delete: _Delete.default,
        SortArrow: _ArrowUpward.default,
        Clear: _Clear.default
      },
      columns: this.state.columns,
      data: this.props.chassis_front_list,
      options: {
        actionsColumnIndex: -1,
        selection: false,
        sorting: true,
        toolbar: false,
        rowStyle: {
          fontSize: '4px'
        },
        search: false,
        paginationType: 'normal',
        loadingType: 'linear',
        maxBodyHeight: '260px',
        headerStyle: {
          backgroundColor: '#788595',
          color: 'rgba(255, 255, 255, 0.87)',
          fontSize: '14px',
          height: '10%',
          paddingTop: '2px',
          paddingBottom: '2px'
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 226
      },
      __self: this
    })))));
  }

}

const mapStateToProps = state => {
  return {
    chassis_front_list: state.hardwareOverviewReducer.chassis_front_list
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps)(DriveTable));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,