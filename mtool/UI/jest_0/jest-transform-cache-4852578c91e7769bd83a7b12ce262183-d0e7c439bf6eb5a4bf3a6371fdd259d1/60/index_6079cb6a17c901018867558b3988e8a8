3745223efc34c9ed201709317482c91c
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _core = require("@material-ui/core");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _styles = require("@material-ui/core/styles");

var _ArrowDropDown = _interopRequireDefault(require("@material-ui/icons/ArrowDropDown"));

var _Menu = _interopRequireDefault(require("@material-ui/icons/Menu"));

var _reactRouterDom = require("react-router-dom");

var _MoreVert = _interopRequireDefault(require("@material-ui/icons/MoreVert"));

var _HeaderLogo = _interopRequireDefault(require("../../assets/images/Header-logo.png"));

var _Dialog = _interopRequireDefault(require("../Dialog"));

require("./Header.css");

var _Samsung_iBOF_Management_Tool_User_Manual = _interopRequireDefault(require("../../assets/Samsung_iBOF_Management_Tool_User_Manual.pdf"));

var _Dropdown = _interopRequireDefault(require("./Dropdown"));

var _MobileMenu = _interopRequireDefault(require("./MobileMenu"));

var actionTypes = _interopRequireWildcard(require("../../store/actions/actionTypes"));

var _theme = _interopRequireDefault(require("../../theme"));

var actionCreators = _interopRequireWildcard(require("../../store/actions/exportActionCreators"));

var _ChangePassword = _interopRequireDefault(require("../ChangePassword"));

var _LinearProgressBarComponent = _interopRequireDefault(require("../IbofOsOperationComponents/LinearProgressBarComponent"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/Header/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => ({
  appBar: {
    zIndex: theme.zIndex.drawer + 1,
    backgroundImage: 'linear-gradient(to right, #171719, #788595)',
    boxShadow: 'none',
    height: "55px" // backgroundColor: theme.palette.primary

  },
  userLink: {
    display: 'flex',
    cursor: 'pointer'
  },
  grow: {
    flexGrow: 1
  },
  sectionDesktop: {
    display: 'none',
    [theme.breakpoints.up('md')]: {
      display: 'flex'
    },
    alignItems: 'center'
  },
  sectionMobile: {
    display: 'flex',
    [theme.breakpoints.up('md')]: {
      display: 'none'
    }
  },
  version: {
    [theme.breakpoints.down('md')]: {
      display: 'none'
    },
    marginTop: "2px"
  },
  separator: {
    padding: '0 10px',
    marginTop: '-2px'
  },
  nextSeparator: {
    padding: '0 3px',
    marginTop: '-2px'
  },
  caret: {
    position: 'relative',
    padding: '3px',
    '&:before': {
      content: '',
      position: 'absolute',
      top: 0,
      left: '5px',
      borderTop: '7px solid #eeeeee',
      borderLeft: '7px solid transparent',
      borderRight: '7px solid transparent'
    },
    '&:after': {
      content: '',
      position: 'absolute',
      left: '5px',
      top: 0,
      borderTop: '7px solid #eeeeee',
      borderLeft: '7px solid transparent',
      borderRight: '7px solid transparent'
    }
  },
  menuButton: {
    marginRight: theme.spacing(2),
    [theme.breakpoints.up('md')]: {
      display: 'none'
    }
  }
});

class Header extends _react.Component {
  constructor(props) {
    super(props);
    this.renderDropDown = this.renderDropDown.bind(this);
    this.renderPopup = this.renderPopup.bind(this);
    this.closeDropdown = this.closeDropdown.bind(this);
    this.alertClose = this.alertClose.bind(this);
    this.onHandleSubmit = this.onHandleSubmit.bind(this);
    this.updateDropdown = this.updateDropdown.bind(this);
    this.printLastTimestamp = this.printLastTimestamp.bind(this);
    this.userLogout = this.userLogout.bind(this);
    this.goHome = this.goHome.bind(this);
    this.handleMobileMenuOpen = this.handleMobileMenuOpen.bind(this);
    this.handleMobileMenuClose = this.handleMobileMenuClose.bind(this);
    this.OnHandleChange = this.OnHandleChange.bind(this);
    this.state = {
      dropdown: false,
      popup: false,
      oldPassword: '',
      newPassword: '',
      msg: '',
      confirmPassword: '',
      userid: localStorage.getItem('userid'),
      alertOpen: false,
      alertType: 'alert',
      title: 'Error',
      style: {
        left: '1000px',
        top: '65px'
      },
      anchorEl: null,
      mobileMoreAnchorEl: null,
      isMobileMenuOpen: false
    };
    this.interval = null;
  }

  componentDidMount() {
    this.props.getIbofOSTimeInterval();
    clearInterval(this.interval);
    const val = this.props.timeintervalue;
    this.interval = setInterval(() => {
      this.IsIbofOSRunning();
    }, (val || 4) * 1000);
  }

  componentDidUpdate() {
    const val = this.props.timeintervalue;
    clearInterval(this.interval);
    this.interval = setInterval(() => {
      this.IsIbofOSRunning();
    }, (val || 4) * 1000);
  }

  componentWillUnmount() {
    document.removeEventListener('mousedown', this.handleClickOutside);
    window.removeEventListener('resize', this.updateDropdown);
    clearInterval(this.interval);
  }

  onHandleSubmit() {
    if (!this.state.oldPassword) {
      this.setState(_objectSpread({}, this.state, {
        msg: 'Enter your old Password',
        alertOpen: true,
        // title: "Error",
        title: 'Change Password',
        alertType: 'alert'
      }));
    } else if (!this.state.newPassword || !this.state.confirmPassword) {
      this.setState(_objectSpread({}, this.state, {
        msg: 'Enter a valid Password',
        alertOpen: true,
        // title: "Error",
        title: 'Change Password',
        alertType: 'alert'
      }));
    } else if (this.state.newPassword !== this.state.confirmPassword) {
      this.setState(_objectSpread({}, this.state, {
        msg: 'Passwords do not match',
        alertOpen: true,
        // title: "Error",
        title: 'Change Password',
        alertType: 'alert'
      }));
    } else {
      fetch('/api/v1.0/update_password/', {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          oldPassword: this.state.oldPassword,
          newPassword: this.state.newPassword,
          confirmPassword: this.state.confirmPassword,
          userid: this.state.userid
        })
      }).then(result => {
        if (result.status === 200) {
          this.setState(_objectSpread({}, this.state, {
            msg: 'Password changed successfully',
            alertOpen: true,
            // title: "Success",
            title: 'Change Password',
            alertType: 'info'
          }));
          this.setState({
            dropdown: false,
            popup: false,
            oldPassword: '',
            newPassword: '',
            confirmPassword: ''
          });
        } else if (result.status === 401) {
          this.props.history.push('/');
        } else {
          this.setState(_objectSpread({}, this.state, {
            msg: 'Error in setting Password',
            alertOpen: true,
            alertType: 'alert',
            // title: "Error"
            title: 'Change Password'
          }));
        }
      });
    }
  }

  OnHandleChange(event) {
    const _event$target = event.target,
          name = _event$target.name,
          value = _event$target.value;
    this.setState(_objectSpread({}, this.state, {
      [name]: value
    }));
  }

  IsIbofOSRunning() {
    this.props.Get_Is_iBOFOS_Running_Status(this.props.history);
  }

  closeDropdown() {
    this.setState(_objectSpread({}, this.state, {
      dropdown: false
    }));
  }

  updateDropdown() {
    const left = document.getElementById('user-link').getBoundingClientRect().left - 50;
    this.setState(_objectSpread({}, this.state, {
      style: _objectSpread({}, this.state.style, {
        left: `${left}px`
      })
    }));
  }

  alertClose() {
    this.setState(_objectSpread({}, this.state, {
      alertOpen: false
    }));
  }

  goHome() {
    this.props.history.push('/dashboard');
  }

  printLastTimestamp(value) {
    this.setState(_objectSpread({}, this.state, {
      timestamp: value
    }));
  }

  userLogout() {
    localStorage.setItem("user", null);
    this.props.resetIsLoggedIn();
    this.props.history.push('/');
  }

  handleMobileMenuClose() {
    this.setState(_objectSpread({}, this.state, {
      mobileMoreAnchorEl: null,
      isMobileMenuOpen: false
    }));
  }

  handleMobileMenuOpen(event) {
    this.setState(_objectSpread({}, this.state, {
      isMobileMenuOpen: true,
      mobileMoreAnchorEl: event.currentTarget
    }));
  }

  renderPopup() {
    const popup = !this.state.popup;
    this.setState(_objectSpread({}, this.state, {
      popup,
      dropdown: false,
      isMobileMenuOpen: false
    }));
  }

  renderDropDown(event) {
    const dropdown = !this.state.dropdown;
    this.setState(_objectSpread({}, this.state, {
      dropdown,
      anchorEl: event.currentTarget
    }));
  }

  render() {
    const username = localStorage.getItem('userid');
    const classes = this.props.classes;
    const mobileMenuId = 'primary-search-account-menu-mobile';
    return _react.default.createElement(_MuiThemeProvider.default, {
      "data-testid": "headerTag",
      theme: _theme.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 359
      },
      __self: this
    }, _react.default.createElement(_core.AppBar, {
      className: classes.appBar,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 360
      },
      __self: this
    }, _react.default.createElement(_core.Toolbar, {
      className: classes.toolbar,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 361
      },
      __self: this
    }, _react.default.createElement(_core.IconButton, {
      color: "inherit",
      "aria-label": "open drawer",
      edge: "start",
      className: classes.menuButton,
      onClick: this.props.toggleDrawer,
      "data-testid": "sidebar-toggle",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 362
      },
      __self: this
    }, _react.default.createElement(_Menu.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 370
      },
      __self: this
    })), _react.default.createElement("img", {
      src: _HeaderLogo.default,
      style: {
        cursor: 'default',
        marginBottom: '0.4rem'
      },
      alt: "Samsung iBOF Management Tool",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 372
      },
      __self: this
    }), _react.default.createElement(_core.Typography, {
      className: classes.version,
      variant: "caption",
      display: "block",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 377
      },
      __self: this
    }, "Version 0.1, Release - a4c0bf15e06"), _react.default.createElement("div", {
      className: classes.grow,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 380
      },
      __self: this
    }), this.props.timestamp !== '' ? _react.default.createElement("span", {
      className: "IBOFOS_Status_Header",
      title: "Poseidon OS last running timestamp",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 382
      },
      __self: this
    }, "Poseidon OS Last Updated: ", this.props.timestamp) : _react.default.createElement("span", {
      className: "IBOFOS_Status_Header",
      title: "Poseidon OS last running timestamp",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 389
      },
      __self: this
    }), _react.default.createElement("div", {
      className: classes.sectionDesktop,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 394
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.separator,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 395
      },
      __self: this
    }, "|"), _react.default.createElement(_core.Typography, {
      className: classes.nextSeparator,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 396
      },
      __self: this
    }, " Poseidon OS status:"), _react.default.createElement(_core.Typography, {
      className: classes.nextSeparator,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 397
      },
      __self: this
    }), this.props.status ? _react.default.createElement(_core.Typography, {
      className: classes.running,
      style: {
        color: 'rgb(61, 249, 50)'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 399
      },
      __self: this
    }, "Running") : _react.default.createElement(_core.Typography, {
      className: classes.notRunning,
      style: {
        color: 'rgb(243, 168, 55)'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 406
      },
      __self: this
    }, this.props.OS_Running_Status), this.props.OS_Running_Status !== 'Not Running' && this.props.OS_Running_Status !== 'Running' ? _react.default.createElement(_LinearProgressBarComponent.default, {
      percent: localStorage.getItem('Rebuilding_Value'),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 415
      },
      __self: this
    }) : null, _react.default.createElement(_core.Typography, {
      className: classes.separator,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 421
      },
      __self: this
    }, "|"), _react.default.createElement(_core.Typography, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 422
      },
      __self: this
    }, _react.default.createElement("a", {
      href: _Samsung_iBOF_Management_Tool_User_Manual.default,
      target: "_blank",
      rel: "noopener noreferrer",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 423
      },
      __self: this
    }, "Help")), _react.default.createElement(_core.Typography, {
      className: classes.separator,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 427
      },
      __self: this
    }, "|"), _react.default.createElement("span", {
      className: `${classes.userLink} ${window.location.href.indexOf('user') > 0 ? 'active' : ''}`,
      "aria-hidden": "true",
      id: "user-link",
      "data-testid": "header-dropdown",
      onClick: this.renderDropDown,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 428
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 437
      },
      __self: this
    }, username), _react.default.createElement(_ArrowDropDown.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 438
      },
      __self: this
    })), _react.default.createElement(_Dropdown.default, {
      anchorEl: this.state.anchorEl,
      dropdown: this.state.dropdown,
      closeDropdown: this.closeDropdown,
      renderPopup: this.renderPopup,
      userLogout: this.userLogout,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 440
      },
      __self: this
    }), _react.default.createElement(_core.Typography, {
      className: classes.separator,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 447
      },
      __self: this
    }, "|")), _react.default.createElement("div", {
      className: classes.sectionMobile,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 457
      },
      __self: this
    }, _react.default.createElement(_core.IconButton, {
      "aria-label": "show more",
      "aria-controls": mobileMenuId,
      "aria-haspopup": "true",
      onClick: this.handleMobileMenuOpen,
      color: "inherit",
      "data-testid": "mobile-show-more",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 458
      },
      __self: this
    }, _react.default.createElement(_MoreVert.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 466
      },
      __self: this
    }))), _react.default.createElement(_MobileMenu.default, {
      mobileMoreAnchorEl: this.state.mobileMoreAnchorEl,
      mobileMenuId: mobileMenuId,
      isMobileMenuOpen: this.state.isMobileMenuOpen,
      handleMobileMenuClose: this.handleMobileMenuClose,
      renderPopup: this.renderPopup,
      userLogout: this.userLogout,
      username: username,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 469
      },
      __self: this
    }))), this.state.popup ? _react.default.createElement(_ChangePassword.default, {
      open: this.state.popup,
      oldPassword: this.state.oldPassword,
      confirmPassword: this.state.confirmPassword,
      newPassword: this.state.newPassword,
      OnHandleChange: this.OnHandleChange,
      onConfirm: this.onHandleSubmit,
      handleClose: this.renderPopup,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 481
      },
      __self: this
    }) : null, _react.default.createElement(_Dialog.default, {
      title: this.state.title,
      type: this.state.alertType,
      description: this.state.msg,
      open: this.state.alertOpen,
      handleClose: this.alertClose,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 492
      },
      __self: this
    }));
  }

}

const mapStateToProps = state => {
  return {
    timestamp: state.headerReducer.timestamp,
    status: state.headerReducer.status,
    OS_Running_Status: state.headerReducer.OS_Running_Status,
    timeintervalue: state.configurationsettingReducer.timeinterval
  };
};

const mapDispatchToProps = dispatch => {
  return {
    getIbofOSTimeInterval: () => dispatch({
      type: actionTypes.SAGA_GET_IBOFOS_TIME_INTERVAL
    }),
    Get_Is_iBOFOS_Running_Status: payload => dispatch({
      type: actionTypes.SAGA_GET_IS_IBOF_OS_RUNNING,
      payload
    }),
    resetIsLoggedIn: () => dispatch(actionCreators.resetIsLoggedIn())
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)((0, _reactRouterDom.withRouter)(Header)));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInN0eWxlcyIsInRoZW1lIiwiYXBwQmFyIiwiekluZGV4IiwiZHJhd2VyIiwiYmFja2dyb3VuZEltYWdlIiwiYm94U2hhZG93IiwiaGVpZ2h0IiwidXNlckxpbmsiLCJkaXNwbGF5IiwiY3Vyc29yIiwiZ3JvdyIsImZsZXhHcm93Iiwic2VjdGlvbkRlc2t0b3AiLCJicmVha3BvaW50cyIsInVwIiwiYWxpZ25JdGVtcyIsInNlY3Rpb25Nb2JpbGUiLCJ2ZXJzaW9uIiwiZG93biIsIm1hcmdpblRvcCIsInNlcGFyYXRvciIsInBhZGRpbmciLCJuZXh0U2VwYXJhdG9yIiwiY2FyZXQiLCJwb3NpdGlvbiIsImNvbnRlbnQiLCJ0b3AiLCJsZWZ0IiwiYm9yZGVyVG9wIiwiYm9yZGVyTGVmdCIsImJvcmRlclJpZ2h0IiwibWVudUJ1dHRvbiIsIm1hcmdpblJpZ2h0Iiwic3BhY2luZyIsIkhlYWRlciIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJyZW5kZXJEcm9wRG93biIsImJpbmQiLCJyZW5kZXJQb3B1cCIsImNsb3NlRHJvcGRvd24iLCJhbGVydENsb3NlIiwib25IYW5kbGVTdWJtaXQiLCJ1cGRhdGVEcm9wZG93biIsInByaW50TGFzdFRpbWVzdGFtcCIsInVzZXJMb2dvdXQiLCJnb0hvbWUiLCJoYW5kbGVNb2JpbGVNZW51T3BlbiIsImhhbmRsZU1vYmlsZU1lbnVDbG9zZSIsIk9uSGFuZGxlQ2hhbmdlIiwic3RhdGUiLCJkcm9wZG93biIsInBvcHVwIiwib2xkUGFzc3dvcmQiLCJuZXdQYXNzd29yZCIsIm1zZyIsImNvbmZpcm1QYXNzd29yZCIsInVzZXJpZCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJhbGVydE9wZW4iLCJhbGVydFR5cGUiLCJ0aXRsZSIsInN0eWxlIiwiYW5jaG9yRWwiLCJtb2JpbGVNb3JlQW5jaG9yRWwiLCJpc01vYmlsZU1lbnVPcGVuIiwiaW50ZXJ2YWwiLCJjb21wb25lbnREaWRNb3VudCIsImdldElib2ZPU1RpbWVJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ2YWwiLCJ0aW1laW50ZXJ2YWx1ZSIsInNldEludGVydmFsIiwiSXNJYm9mT1NSdW5uaW5nIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJkb2N1bWVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVDbGlja091dHNpZGUiLCJ3aW5kb3ciLCJzZXRTdGF0ZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIkFjY2VwdCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwidGhlbiIsInJlc3VsdCIsInN0YXR1cyIsImhpc3RvcnkiLCJwdXNoIiwiZXZlbnQiLCJ0YXJnZXQiLCJuYW1lIiwidmFsdWUiLCJHZXRfSXNfaUJPRk9TX1J1bm5pbmdfU3RhdHVzIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0aW1lc3RhbXAiLCJzZXRJdGVtIiwicmVzZXRJc0xvZ2dlZEluIiwiY3VycmVudFRhcmdldCIsInJlbmRlciIsInVzZXJuYW1lIiwiY2xhc3NlcyIsIm1vYmlsZU1lbnVJZCIsIk1Ub29sVGhlbWUiLCJ0b29sYmFyIiwidG9nZ2xlRHJhd2VyIiwiSGVhZGluZyIsIm1hcmdpbkJvdHRvbSIsInJ1bm5pbmciLCJjb2xvciIsIm5vdFJ1bm5pbmciLCJPU19SdW5uaW5nX1N0YXR1cyIsIlBERiIsImxvY2F0aW9uIiwiaHJlZiIsImluZGV4T2YiLCJtYXBTdGF0ZVRvUHJvcHMiLCJoZWFkZXJSZWR1Y2VyIiwiY29uZmlndXJhdGlvbnNldHRpbmdSZWR1Y2VyIiwidGltZWludGVydmFsIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwiZGlzcGF0Y2giLCJ0eXBlIiwiYWN0aW9uVHlwZXMiLCJTQUdBX0dFVF9JQk9GT1NfVElNRV9JTlRFUlZBTCIsInBheWxvYWQiLCJTQUdBX0dFVF9JU19JQk9GX09TX1JVTk5JTkciLCJhY3Rpb25DcmVhdG9ycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQTJCQTs7QUFDQTs7QUFFQTs7QUFNQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFFQSxNQUFNQSxNQUFNLEdBQUdDLEtBQUssS0FBSztBQUN2QkMsRUFBQUEsTUFBTSxFQUFFO0FBQ05DLElBQUFBLE1BQU0sRUFBRUYsS0FBSyxDQUFDRSxNQUFOLENBQWFDLE1BQWIsR0FBc0IsQ0FEeEI7QUFFTkMsSUFBQUEsZUFBZSxFQUFFLDZDQUZYO0FBR05DLElBQUFBLFNBQVMsRUFBRSxNQUhMO0FBSU5DLElBQUFBLE1BQU0sRUFBQyxNQUpELENBS047O0FBTE0sR0FEZTtBQVN2QkMsRUFBQUEsUUFBUSxFQUFFO0FBQ1JDLElBQUFBLE9BQU8sRUFBRSxNQUREO0FBRVJDLElBQUFBLE1BQU0sRUFBRTtBQUZBLEdBVGE7QUFhdkJDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxRQUFRLEVBQUU7QUFETixHQWJpQjtBQWdCdkJDLEVBQUFBLGNBQWMsRUFBRTtBQUNkSixJQUFBQSxPQUFPLEVBQUUsTUFESztBQUVkLEtBQUNSLEtBQUssQ0FBQ2EsV0FBTixDQUFrQkMsRUFBbEIsQ0FBcUIsSUFBckIsQ0FBRCxHQUE4QjtBQUM1Qk4sTUFBQUEsT0FBTyxFQUFFO0FBRG1CLEtBRmhCO0FBS2RPLElBQUFBLFVBQVUsRUFBRTtBQUxFLEdBaEJPO0FBdUJ2QkMsRUFBQUEsYUFBYSxFQUFFO0FBQ2JSLElBQUFBLE9BQU8sRUFBRSxNQURJO0FBRWIsS0FBQ1IsS0FBSyxDQUFDYSxXQUFOLENBQWtCQyxFQUFsQixDQUFxQixJQUFyQixDQUFELEdBQThCO0FBQzVCTixNQUFBQSxPQUFPLEVBQUU7QUFEbUI7QUFGakIsR0F2QlE7QUE2QnZCUyxFQUFBQSxPQUFPLEVBQUU7QUFDUCxLQUFDakIsS0FBSyxDQUFDYSxXQUFOLENBQWtCSyxJQUFsQixDQUF1QixJQUF2QixDQUFELEdBQWdDO0FBQzlCVixNQUFBQSxPQUFPLEVBQUU7QUFEcUIsS0FEekI7QUFJUFcsSUFBQUEsU0FBUyxFQUFFO0FBSkosR0E3QmM7QUFtQ3ZCQyxFQUFBQSxTQUFTLEVBQUU7QUFDVEMsSUFBQUEsT0FBTyxFQUFFLFFBREE7QUFFVEYsSUFBQUEsU0FBUyxFQUFFO0FBRkYsR0FuQ1k7QUF1Q3ZCRyxFQUFBQSxhQUFhLEVBQUU7QUFDYkQsSUFBQUEsT0FBTyxFQUFFLE9BREk7QUFFYkYsSUFBQUEsU0FBUyxFQUFFO0FBRkUsR0F2Q1E7QUEyQ3ZCSSxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsUUFBUSxFQUFFLFVBREw7QUFFTEgsSUFBQUEsT0FBTyxFQUFFLEtBRko7QUFHTCxnQkFBWTtBQUNWSSxNQUFBQSxPQUFPLEVBQUUsRUFEQztBQUVWRCxNQUFBQSxRQUFRLEVBQUUsVUFGQTtBQUdWRSxNQUFBQSxHQUFHLEVBQUUsQ0FISztBQUlWQyxNQUFBQSxJQUFJLEVBQUUsS0FKSTtBQUtWQyxNQUFBQSxTQUFTLEVBQUUsbUJBTEQ7QUFNVkMsTUFBQUEsVUFBVSxFQUFFLHVCQU5GO0FBT1ZDLE1BQUFBLFdBQVcsRUFBRTtBQVBILEtBSFA7QUFZTCxlQUFXO0FBQ1RMLE1BQUFBLE9BQU8sRUFBRSxFQURBO0FBRVRELE1BQUFBLFFBQVEsRUFBRSxVQUZEO0FBR1RHLE1BQUFBLElBQUksRUFBRSxLQUhHO0FBSVRELE1BQUFBLEdBQUcsRUFBRSxDQUpJO0FBS1RFLE1BQUFBLFNBQVMsRUFBRSxtQkFMRjtBQU1UQyxNQUFBQSxVQUFVLEVBQUUsdUJBTkg7QUFPVEMsTUFBQUEsV0FBVyxFQUFFO0FBUEo7QUFaTixHQTNDZ0I7QUFpRXZCQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsV0FBVyxFQUFFaEMsS0FBSyxDQUFDaUMsT0FBTixDQUFjLENBQWQsQ0FESDtBQUVWLEtBQUNqQyxLQUFLLENBQUNhLFdBQU4sQ0FBa0JDLEVBQWxCLENBQXFCLElBQXJCLENBQUQsR0FBOEI7QUFDNUJOLE1BQUFBLE9BQU8sRUFBRTtBQURtQjtBQUZwQjtBQWpFVyxDQUFMLENBQXBCOztBQXdFQSxNQUFNMEIsTUFBTixTQUFxQkMsZ0JBQXJCLENBQStCO0FBQzdCQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUTtBQUNqQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQixLQUFLQSxjQUFMLENBQW9CQyxJQUFwQixDQUF5QixJQUF6QixDQUF0QjtBQUNBLFNBQUtDLFdBQUwsR0FBbUIsS0FBS0EsV0FBTCxDQUFpQkQsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBbkI7QUFDQSxTQUFLRSxhQUFMLEdBQXFCLEtBQUtBLGFBQUwsQ0FBbUJGLElBQW5CLENBQXdCLElBQXhCLENBQXJCO0FBQ0EsU0FBS0csVUFBTCxHQUFrQixLQUFLQSxVQUFMLENBQWdCSCxJQUFoQixDQUFxQixJQUFyQixDQUFsQjtBQUNBLFNBQUtJLGNBQUwsR0FBc0IsS0FBS0EsY0FBTCxDQUFvQkosSUFBcEIsQ0FBeUIsSUFBekIsQ0FBdEI7QUFDQSxTQUFLSyxjQUFMLEdBQXNCLEtBQUtBLGNBQUwsQ0FBb0JMLElBQXBCLENBQXlCLElBQXpCLENBQXRCO0FBQ0EsU0FBS00sa0JBQUwsR0FBMEIsS0FBS0Esa0JBQUwsQ0FBd0JOLElBQXhCLENBQTZCLElBQTdCLENBQTFCO0FBQ0EsU0FBS08sVUFBTCxHQUFrQixLQUFLQSxVQUFMLENBQWdCUCxJQUFoQixDQUFxQixJQUFyQixDQUFsQjtBQUNBLFNBQUtRLE1BQUwsR0FBYyxLQUFLQSxNQUFMLENBQVlSLElBQVosQ0FBaUIsSUFBakIsQ0FBZDtBQUNBLFNBQUtTLG9CQUFMLEdBQTRCLEtBQUtBLG9CQUFMLENBQTBCVCxJQUExQixDQUErQixJQUEvQixDQUE1QjtBQUNBLFNBQUtVLHFCQUFMLEdBQTZCLEtBQUtBLHFCQUFMLENBQTJCVixJQUEzQixDQUFnQyxJQUFoQyxDQUE3QjtBQUNBLFNBQUtXLGNBQUwsR0FBc0IsS0FBS0EsY0FBTCxDQUFvQlgsSUFBcEIsQ0FBeUIsSUFBekIsQ0FBdEI7QUFDQSxTQUFLWSxLQUFMLEdBQWE7QUFDWEMsTUFBQUEsUUFBUSxFQUFFLEtBREM7QUFFWEMsTUFBQUEsS0FBSyxFQUFFLEtBRkk7QUFHWEMsTUFBQUEsV0FBVyxFQUFFLEVBSEY7QUFJWEMsTUFBQUEsV0FBVyxFQUFFLEVBSkY7QUFLWEMsTUFBQUEsR0FBRyxFQUFFLEVBTE07QUFNWEMsTUFBQUEsZUFBZSxFQUFFLEVBTk47QUFPWEMsTUFBQUEsTUFBTSxFQUFFQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsUUFBckIsQ0FQRztBQVFYQyxNQUFBQSxTQUFTLEVBQUUsS0FSQTtBQVNYQyxNQUFBQSxTQUFTLEVBQUUsT0FUQTtBQVVYQyxNQUFBQSxLQUFLLEVBQUUsT0FWSTtBQVdYQyxNQUFBQSxLQUFLLEVBQUU7QUFDTHJDLFFBQUFBLElBQUksRUFBRSxRQUREO0FBRUxELFFBQUFBLEdBQUcsRUFBRTtBQUZBLE9BWEk7QUFlWHVDLE1BQUFBLFFBQVEsRUFBRSxJQWZDO0FBZ0JYQyxNQUFBQSxrQkFBa0IsRUFBRSxJQWhCVDtBQWlCWEMsTUFBQUEsZ0JBQWdCLEVBQUU7QUFqQlAsS0FBYjtBQW1CQSxTQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0Q7O0FBR0RDLEVBQUFBLGlCQUFpQixHQUFHO0FBQ2xCLFNBQUtoQyxLQUFMLENBQVdpQyxxQkFBWDtBQUNBQyxJQUFBQSxhQUFhLENBQUMsS0FBS0gsUUFBTixDQUFiO0FBQ0EsVUFBTUksR0FBRyxHQUFHLEtBQUtuQyxLQUFMLENBQVdvQyxjQUF2QjtBQUNBLFNBQUtMLFFBQUwsR0FBZ0JNLFdBQVcsQ0FBQyxNQUFNO0FBQ2hDLFdBQUtDLGVBQUw7QUFDRCxLQUYwQixFQUV6QixDQUFDSCxHQUFHLElBQUksQ0FBUixJQUFXLElBRmMsQ0FBM0I7QUFHRDs7QUFFREksRUFBQUEsa0JBQWtCLEdBQUU7QUFDbEIsVUFBTUosR0FBRyxHQUFHLEtBQUtuQyxLQUFMLENBQVdvQyxjQUF2QjtBQUNBRixJQUFBQSxhQUFhLENBQUMsS0FBS0gsUUFBTixDQUFiO0FBQ0EsU0FBS0EsUUFBTCxHQUFnQk0sV0FBVyxDQUFDLE1BQU07QUFDaEMsV0FBS0MsZUFBTDtBQUNELEtBRjBCLEVBRXpCLENBQUNILEdBQUcsSUFBSSxDQUFSLElBQVcsSUFGYyxDQUEzQjtBQUdEOztBQUVESyxFQUFBQSxvQkFBb0IsR0FBRztBQUNyQkMsSUFBQUEsUUFBUSxDQUFDQyxtQkFBVCxDQUE2QixXQUE3QixFQUEwQyxLQUFLQyxrQkFBL0M7QUFDQUMsSUFBQUEsTUFBTSxDQUFDRixtQkFBUCxDQUEyQixRQUEzQixFQUFxQyxLQUFLbkMsY0FBMUM7QUFDQTJCLElBQUFBLGFBQWEsQ0FBQyxLQUFLSCxRQUFOLENBQWI7QUFDRDs7QUFFRHpCLEVBQUFBLGNBQWMsR0FBRztBQUNmLFFBQUksQ0FBQyxLQUFLUSxLQUFMLENBQVdHLFdBQWhCLEVBQTZCO0FBQzNCLFdBQUs0QixRQUFMLG1CQUNLLEtBQUsvQixLQURWO0FBRUVLLFFBQUFBLEdBQUcsRUFBRSx5QkFGUDtBQUdFSyxRQUFBQSxTQUFTLEVBQUUsSUFIYjtBQUlFO0FBQ0FFLFFBQUFBLEtBQUssRUFBRSxpQkFMVDtBQU1FRCxRQUFBQSxTQUFTLEVBQUU7QUFOYjtBQVFELEtBVEQsTUFTTyxJQUFJLENBQUMsS0FBS1gsS0FBTCxDQUFXSSxXQUFaLElBQTJCLENBQUMsS0FBS0osS0FBTCxDQUFXTSxlQUEzQyxFQUE0RDtBQUNqRSxXQUFLeUIsUUFBTCxtQkFDSyxLQUFLL0IsS0FEVjtBQUVFSyxRQUFBQSxHQUFHLEVBQUUsd0JBRlA7QUFHRUssUUFBQUEsU0FBUyxFQUFFLElBSGI7QUFJRTtBQUNBRSxRQUFBQSxLQUFLLEVBQUUsaUJBTFQ7QUFNRUQsUUFBQUEsU0FBUyxFQUFFO0FBTmI7QUFRRCxLQVRNLE1BU0EsSUFBSSxLQUFLWCxLQUFMLENBQVdJLFdBQVgsS0FBMkIsS0FBS0osS0FBTCxDQUFXTSxlQUExQyxFQUEyRDtBQUNoRSxXQUFLeUIsUUFBTCxtQkFDSyxLQUFLL0IsS0FEVjtBQUVFSyxRQUFBQSxHQUFHLEVBQUUsd0JBRlA7QUFHRUssUUFBQUEsU0FBUyxFQUFFLElBSGI7QUFJRTtBQUNBRSxRQUFBQSxLQUFLLEVBQUUsaUJBTFQ7QUFNRUQsUUFBQUEsU0FBUyxFQUFFO0FBTmI7QUFRRCxLQVRNLE1BU0E7QUFDTHFCLE1BQUFBLEtBQUssQ0FBQyw0QkFBRCxFQUErQjtBQUNsQ0MsUUFBQUEsTUFBTSxFQUFFLE1BRDBCO0FBRWxDQyxRQUFBQSxPQUFPLEVBQUU7QUFDUEMsVUFBQUEsTUFBTSxFQUFFLGtCQUREO0FBRVAsMEJBQWdCO0FBRlQsU0FGeUI7QUFNbENDLFFBQUFBLElBQUksRUFBRUMsSUFBSSxDQUFDQyxTQUFMLENBQWU7QUFDbkJuQyxVQUFBQSxXQUFXLEVBQUUsS0FBS0gsS0FBTCxDQUFXRyxXQURMO0FBRW5CQyxVQUFBQSxXQUFXLEVBQUUsS0FBS0osS0FBTCxDQUFXSSxXQUZMO0FBR25CRSxVQUFBQSxlQUFlLEVBQUUsS0FBS04sS0FBTCxDQUFXTSxlQUhUO0FBSW5CQyxVQUFBQSxNQUFNLEVBQUUsS0FBS1AsS0FBTCxDQUFXTztBQUpBLFNBQWY7QUFONEIsT0FBL0IsQ0FBTCxDQVlHZ0MsSUFaSCxDQVlRQyxNQUFNLElBQUk7QUFDaEIsWUFBSUEsTUFBTSxDQUFDQyxNQUFQLEtBQWtCLEdBQXRCLEVBQTJCO0FBQ3pCLGVBQUtWLFFBQUwsbUJBQ0ssS0FBSy9CLEtBRFY7QUFFRUssWUFBQUEsR0FBRyxFQUFFLCtCQUZQO0FBR0VLLFlBQUFBLFNBQVMsRUFBRSxJQUhiO0FBSUU7QUFDQUUsWUFBQUEsS0FBSyxFQUFFLGlCQUxUO0FBTUVELFlBQUFBLFNBQVMsRUFBRTtBQU5iO0FBUUEsZUFBS29CLFFBQUwsQ0FBYztBQUNaOUIsWUFBQUEsUUFBUSxFQUFFLEtBREU7QUFFWkMsWUFBQUEsS0FBSyxFQUFFLEtBRks7QUFHWkMsWUFBQUEsV0FBVyxFQUFFLEVBSEQ7QUFJWkMsWUFBQUEsV0FBVyxFQUFFLEVBSkQ7QUFLWkUsWUFBQUEsZUFBZSxFQUFFO0FBTEwsV0FBZDtBQU9ELFNBaEJELE1BZ0JPLElBQUlrQyxNQUFNLENBQUNDLE1BQVAsS0FBa0IsR0FBdEIsRUFBMkI7QUFDaEMsZUFBS3ZELEtBQUwsQ0FBV3dELE9BQVgsQ0FBbUJDLElBQW5CLENBQXdCLEdBQXhCO0FBQ0QsU0FGTSxNQUVBO0FBQ0wsZUFBS1osUUFBTCxtQkFDSyxLQUFLL0IsS0FEVjtBQUVFSyxZQUFBQSxHQUFHLEVBQUUsMkJBRlA7QUFHRUssWUFBQUEsU0FBUyxFQUFFLElBSGI7QUFJRUMsWUFBQUEsU0FBUyxFQUFFLE9BSmI7QUFLRTtBQUNBQyxZQUFBQSxLQUFLLEVBQUU7QUFOVDtBQVFEO0FBQ0YsT0F6Q0Q7QUEwQ0Q7QUFDRjs7QUFFRGIsRUFBQUEsY0FBYyxDQUFDNkMsS0FBRCxFQUFRO0FBQUEsMEJBQ0lBLEtBQUssQ0FBQ0MsTUFEVjtBQUFBLFVBQ1pDLElBRFksaUJBQ1pBLElBRFk7QUFBQSxVQUNOQyxLQURNLGlCQUNOQSxLQURNO0FBRXBCLFNBQUtoQixRQUFMLG1CQUNLLEtBQUsvQixLQURWO0FBRUUsT0FBQzhDLElBQUQsR0FBUUM7QUFGVjtBQUlEOztBQUVEdkIsRUFBQUEsZUFBZSxHQUFHO0FBQ2hCLFNBQUt0QyxLQUFMLENBQVc4RCw0QkFBWCxDQUF3QyxLQUFLOUQsS0FBTCxDQUFXd0QsT0FBbkQ7QUFDRDs7QUFFRHBELEVBQUFBLGFBQWEsR0FBRztBQUNkLFNBQUt5QyxRQUFMLG1CQUNLLEtBQUsvQixLQURWO0FBRUVDLE1BQUFBLFFBQVEsRUFBRTtBQUZaO0FBSUQ7O0FBRURSLEVBQUFBLGNBQWMsR0FBRztBQUNmLFVBQU1qQixJQUFJLEdBQ1JtRCxRQUFRLENBQUNzQixjQUFULENBQXdCLFdBQXhCLEVBQXFDQyxxQkFBckMsR0FBNkQxRSxJQUE3RCxHQUFvRSxFQUR0RTtBQUVBLFNBQUt1RCxRQUFMLG1CQUNLLEtBQUsvQixLQURWO0FBRUVhLE1BQUFBLEtBQUssb0JBQ0EsS0FBS2IsS0FBTCxDQUFXYSxLQURYO0FBRUhyQyxRQUFBQSxJQUFJLEVBQUcsR0FBRUEsSUFBSztBQUZYO0FBRlA7QUFPRDs7QUFFRGUsRUFBQUEsVUFBVSxHQUFHO0FBQ1gsU0FBS3dDLFFBQUwsbUJBQ0ssS0FBSy9CLEtBRFY7QUFFRVUsTUFBQUEsU0FBUyxFQUFFO0FBRmI7QUFJRDs7QUFFRGQsRUFBQUEsTUFBTSxHQUFHO0FBQ1AsU0FBS1YsS0FBTCxDQUFXd0QsT0FBWCxDQUFtQkMsSUFBbkIsQ0FBd0IsWUFBeEI7QUFDRDs7QUFFRGpELEVBQUFBLGtCQUFrQixDQUFDcUQsS0FBRCxFQUFRO0FBQ3hCLFNBQUtoQixRQUFMLG1CQUNLLEtBQUsvQixLQURWO0FBRUVtRCxNQUFBQSxTQUFTLEVBQUVKO0FBRmI7QUFJRDs7QUFFRHBELEVBQUFBLFVBQVUsR0FBRztBQUNYYSxJQUFBQSxZQUFZLENBQUM0QyxPQUFiLENBQXFCLE1BQXJCLEVBQTZCLElBQTdCO0FBQ0EsU0FBS2xFLEtBQUwsQ0FBV21FLGVBQVg7QUFDQSxTQUFLbkUsS0FBTCxDQUFXd0QsT0FBWCxDQUFtQkMsSUFBbkIsQ0FBd0IsR0FBeEI7QUFDRDs7QUFFRDdDLEVBQUFBLHFCQUFxQixHQUFHO0FBQ3RCLFNBQUtpQyxRQUFMLG1CQUNLLEtBQUsvQixLQURWO0FBRUVlLE1BQUFBLGtCQUFrQixFQUFFLElBRnRCO0FBR0VDLE1BQUFBLGdCQUFnQixFQUFFO0FBSHBCO0FBS0Q7O0FBRURuQixFQUFBQSxvQkFBb0IsQ0FBQytDLEtBQUQsRUFBUTtBQUMxQixTQUFLYixRQUFMLG1CQUNLLEtBQUsvQixLQURWO0FBRUVnQixNQUFBQSxnQkFBZ0IsRUFBRSxJQUZwQjtBQUdFRCxNQUFBQSxrQkFBa0IsRUFBRTZCLEtBQUssQ0FBQ1U7QUFINUI7QUFNRDs7QUFFRGpFLEVBQUFBLFdBQVcsR0FBRztBQUNaLFVBQU1hLEtBQUssR0FBRyxDQUFDLEtBQUtGLEtBQUwsQ0FBV0UsS0FBMUI7QUFDQSxTQUFLNkIsUUFBTCxtQkFDSyxLQUFLL0IsS0FEVjtBQUVFRSxNQUFBQSxLQUZGO0FBR0VELE1BQUFBLFFBQVEsRUFBRSxLQUhaO0FBSUVlLE1BQUFBLGdCQUFnQixFQUFFO0FBSnBCO0FBTUQ7O0FBRUQ3QixFQUFBQSxjQUFjLENBQUN5RCxLQUFELEVBQVE7QUFDcEIsVUFBTTNDLFFBQVEsR0FBRyxDQUFDLEtBQUtELEtBQUwsQ0FBV0MsUUFBN0I7QUFDQSxTQUFLOEIsUUFBTCxtQkFDSyxLQUFLL0IsS0FEVjtBQUVFQyxNQUFBQSxRQUZGO0FBR0VhLE1BQUFBLFFBQVEsRUFBRThCLEtBQUssQ0FBQ1U7QUFIbEI7QUFLRDs7QUFFREMsRUFBQUEsTUFBTSxHQUFHO0FBQ1AsVUFBTUMsUUFBUSxHQUFHaEQsWUFBWSxDQUFDQyxPQUFiLENBQXFCLFFBQXJCLENBQWpCO0FBRE8sVUFFQ2dELE9BRkQsR0FFYSxLQUFLdkUsS0FGbEIsQ0FFQ3VFLE9BRkQ7QUFHUCxVQUFNQyxZQUFZLEdBQUcsb0NBQXJCO0FBQ0EsV0FDRSw2QkFBQyx5QkFBRDtBQUFlLHFCQUFZLFdBQTNCO0FBQXVDLE1BQUEsS0FBSyxFQUFFQyxjQUE5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUNFLDZCQUFDLFlBQUQ7QUFBUSxNQUFBLFNBQVMsRUFBRUYsT0FBTyxDQUFDM0csTUFBM0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FDRSw2QkFBQyxhQUFEO0FBQVMsTUFBQSxTQUFTLEVBQUUyRyxPQUFPLENBQUNHLE9BQTVCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQ0UsNkJBQUMsZ0JBQUQ7QUFDRSxNQUFBLEtBQUssRUFBQyxTQURSO0FBRUUsb0JBQVcsYUFGYjtBQUdFLE1BQUEsSUFBSSxFQUFDLE9BSFA7QUFJRSxNQUFBLFNBQVMsRUFBRUgsT0FBTyxDQUFDN0UsVUFKckI7QUFLRSxNQUFBLE9BQU8sRUFBRSxLQUFLTSxLQUFMLENBQVcyRSxZQUx0QjtBQU1FLHFCQUFZLGdCQU5kO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BUUUsNkJBQUMsYUFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVJGLENBREYsRUFXRTtBQUNFLE1BQUEsR0FBRyxFQUFFQyxtQkFEUDtBQUVFLE1BQUEsS0FBSyxFQUFFO0FBQUV4RyxRQUFBQSxNQUFNLEVBQUUsU0FBVjtBQUFxQnlHLFFBQUFBLFlBQVksRUFBRTtBQUFuQyxPQUZUO0FBR0UsTUFBQSxHQUFHLEVBQUMsOEJBSE47QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFYRixFQWdCRSw2QkFBQyxnQkFBRDtBQUFZLE1BQUEsU0FBUyxFQUFFTixPQUFPLENBQUMzRixPQUEvQjtBQUF3QyxNQUFBLE9BQU8sRUFBQyxTQUFoRDtBQUEwRCxNQUFBLE9BQU8sRUFBQyxPQUFsRTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSw0Q0FoQkYsRUFtQkU7QUFBSyxNQUFBLFNBQVMsRUFBRTJGLE9BQU8sQ0FBQ2xHLElBQXhCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BbkJGLEVBb0JHLEtBQUsyQixLQUFMLENBQVdpRSxTQUFYLEtBQXlCLEVBQXpCLEdBQ0M7QUFDRSxNQUFBLFNBQVMsRUFBQyxzQkFEWjtBQUVFLE1BQUEsS0FBSyxFQUFDLG9DQUZSO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHFDQUk2QixLQUFLakUsS0FBTCxDQUFXaUUsU0FKeEMsQ0FERCxHQVFHO0FBQ0UsTUFBQSxTQUFTLEVBQUMsc0JBRFo7QUFFRSxNQUFBLEtBQUssRUFBQyxvQ0FGUjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQTVCTixFQWlDRTtBQUFLLE1BQUEsU0FBUyxFQUFFTSxPQUFPLENBQUNoRyxjQUF4QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUNFLDZCQUFDLGdCQUFEO0FBQVksTUFBQSxTQUFTLEVBQUVnRyxPQUFPLENBQUN4RixTQUEvQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQURGLEVBRUUsNkJBQUMsZ0JBQUQ7QUFBWSxNQUFBLFNBQVMsRUFBRXdGLE9BQU8sQ0FBQ3RGLGFBQS9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDhCQUZGLEVBR0UsNkJBQUMsZ0JBQUQ7QUFBWSxNQUFBLFNBQVMsRUFBRXNGLE9BQU8sQ0FBQ3RGLGFBQS9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BSEYsRUFJRyxLQUFLZSxLQUFMLENBQVd1RCxNQUFYLEdBQ0MsNkJBQUMsZ0JBQUQ7QUFDRSxNQUFBLFNBQVMsRUFBRWdCLE9BQU8sQ0FBQ08sT0FEckI7QUFFRSxNQUFBLEtBQUssRUFBRTtBQUFFQyxRQUFBQSxLQUFLLEVBQUU7QUFBVCxPQUZUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQURELEdBUUcsNkJBQUMsZ0JBQUQ7QUFDRSxNQUFBLFNBQVMsRUFBRVIsT0FBTyxDQUFDUyxVQURyQjtBQUVFLE1BQUEsS0FBSyxFQUFFO0FBQUVELFFBQUFBLEtBQUssRUFBRTtBQUFULE9BRlQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FJRyxLQUFLL0UsS0FBTCxDQUFXaUYsaUJBSmQsQ0FaTixFQW9CRyxLQUFLakYsS0FBTCxDQUFXaUYsaUJBQVgsS0FBaUMsYUFBakMsSUFBa0QsS0FBS2pGLEtBQUwsQ0FBV2lGLGlCQUFYLEtBQWlDLFNBQW5GLEdBQ0MsNkJBQUMsbUNBQUQ7QUFDRSxNQUFBLE9BQU8sRUFBRTNELFlBQVksQ0FBQ0MsT0FBYixDQUFxQixrQkFBckIsQ0FEWDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQURELEdBSUcsSUF4Qk4sRUEyQkUsNkJBQUMsZ0JBQUQ7QUFBWSxNQUFBLFNBQVMsRUFBRWdELE9BQU8sQ0FBQ3hGLFNBQS9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBM0JGLEVBNEJFLDZCQUFDLGdCQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQ0U7QUFBRyxNQUFBLElBQUksRUFBRW1HLGlEQUFUO0FBQWMsTUFBQSxNQUFNLEVBQUMsUUFBckI7QUFBOEIsTUFBQSxHQUFHLEVBQUMscUJBQWxDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGNBREYsQ0E1QkYsRUFpQ0UsNkJBQUMsZ0JBQUQ7QUFBWSxNQUFBLFNBQVMsRUFBRVgsT0FBTyxDQUFDeEYsU0FBL0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsV0FqQ0YsRUFrQ0U7QUFDRSxNQUFBLFNBQVMsRUFBRyxHQUFFd0YsT0FBTyxDQUFDckcsUUFBUyxJQUM3QjBFLE1BQU0sQ0FBQ3VDLFFBQVAsQ0FBZ0JDLElBQWhCLENBQXFCQyxPQUFyQixDQUE2QixNQUE3QixJQUF1QyxDQUF2QyxHQUEyQyxRQUEzQyxHQUFzRCxFQUNyRCxFQUhMO0FBSUwscUJBQVksTUFKUDtBQUtFLE1BQUEsRUFBRSxFQUFDLFdBTEw7QUFNRSxxQkFBWSxpQkFOZDtBQU9FLE1BQUEsT0FBTyxFQUFFLEtBQUtwRixjQVBoQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQVNFLDZCQUFDLGdCQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BQWFxRSxRQUFiLENBVEYsRUFVRSw2QkFBQyxzQkFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQVZGLENBbENGLEVBOENFLDZCQUFDLGlCQUFEO0FBQ0UsTUFBQSxRQUFRLEVBQUUsS0FBS3hELEtBQUwsQ0FBV2MsUUFEdkI7QUFFRSxNQUFBLFFBQVEsRUFBRSxLQUFLZCxLQUFMLENBQVdDLFFBRnZCO0FBR0UsTUFBQSxhQUFhLEVBQUUsS0FBS1gsYUFIdEI7QUFJRSxNQUFBLFdBQVcsRUFBRSxLQUFLRCxXQUpwQjtBQUtFLE1BQUEsVUFBVSxFQUFFLEtBQUtNLFVBTG5CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BOUNGLEVBcURFLDZCQUFDLGdCQUFEO0FBQVksTUFBQSxTQUFTLEVBQUU4RCxPQUFPLENBQUN4RixTQUEvQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxXQXJERixDQWpDRixFQWdHRTtBQUFLLE1BQUEsU0FBUyxFQUFFd0YsT0FBTyxDQUFDNUYsYUFBeEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FDRSw2QkFBQyxnQkFBRDtBQUNFLG9CQUFXLFdBRGI7QUFFRSx1QkFBZTZGLFlBRmpCO0FBR0UsdUJBQWMsTUFIaEI7QUFJRSxNQUFBLE9BQU8sRUFBRSxLQUFLN0Qsb0JBSmhCO0FBS0UsTUFBQSxLQUFLLEVBQUMsU0FMUjtBQU1FLHFCQUFZLGtCQU5kO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BUUUsNkJBQUMsaUJBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFSRixDQURGLENBaEdGLEVBNEdFLDZCQUFDLG1CQUFEO0FBQ0UsTUFBQSxrQkFBa0IsRUFBRSxLQUFLRyxLQUFMLENBQVdlLGtCQURqQztBQUVFLE1BQUEsWUFBWSxFQUFFMkMsWUFGaEI7QUFHRSxNQUFBLGdCQUFnQixFQUFFLEtBQUsxRCxLQUFMLENBQVdnQixnQkFIL0I7QUFJRSxNQUFBLHFCQUFxQixFQUFFLEtBQUtsQixxQkFKOUI7QUFLRSxNQUFBLFdBQVcsRUFBRSxLQUFLVCxXQUxwQjtBQU1FLE1BQUEsVUFBVSxFQUFFLEtBQUtNLFVBTm5CO0FBT0UsTUFBQSxRQUFRLEVBQUU2RCxRQVBaO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BNUdGLENBREYsQ0FERixFQXlIRyxLQUFLeEQsS0FBTCxDQUFXRSxLQUFYLEdBQ0MsNkJBQUMsdUJBQUQ7QUFDRSxNQUFBLElBQUksRUFBRSxLQUFLRixLQUFMLENBQVdFLEtBRG5CO0FBRUUsTUFBQSxXQUFXLEVBQUUsS0FBS0YsS0FBTCxDQUFXRyxXQUYxQjtBQUdFLE1BQUEsZUFBZSxFQUFFLEtBQUtILEtBQUwsQ0FBV00sZUFIOUI7QUFJRSxNQUFBLFdBQVcsRUFBRSxLQUFLTixLQUFMLENBQVdJLFdBSjFCO0FBS0UsTUFBQSxjQUFjLEVBQUUsS0FBS0wsY0FMdkI7QUFNRSxNQUFBLFNBQVMsRUFBRSxLQUFLUCxjQU5sQjtBQU9FLE1BQUEsV0FBVyxFQUFFLEtBQUtILFdBUHBCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BREQsR0FVRyxJQW5JTixFQXFJRSw2QkFBQyxlQUFEO0FBQ0UsTUFBQSxLQUFLLEVBQUUsS0FBS1csS0FBTCxDQUFXWSxLQURwQjtBQUVFLE1BQUEsSUFBSSxFQUFFLEtBQUtaLEtBQUwsQ0FBV1csU0FGbkI7QUFHRSxNQUFBLFdBQVcsRUFBRSxLQUFLWCxLQUFMLENBQVdLLEdBSDFCO0FBSUUsTUFBQSxJQUFJLEVBQUUsS0FBS0wsS0FBTCxDQUFXVSxTQUpuQjtBQUtFLE1BQUEsV0FBVyxFQUFFLEtBQUtuQixVQUxwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQXJJRixDQURGO0FBK0lEOztBQXJYNEI7O0FBd1gvQixNQUFNaUYsZUFBZSxHQUFHeEUsS0FBSyxJQUFJO0FBQy9CLFNBQU87QUFDTG1ELElBQUFBLFNBQVMsRUFBRW5ELEtBQUssQ0FBQ3lFLGFBQU4sQ0FBb0J0QixTQUQxQjtBQUVMVixJQUFBQSxNQUFNLEVBQUV6QyxLQUFLLENBQUN5RSxhQUFOLENBQW9CaEMsTUFGdkI7QUFHTDBCLElBQUFBLGlCQUFpQixFQUFFbkUsS0FBSyxDQUFDeUUsYUFBTixDQUFvQk4saUJBSGxDO0FBSUw3QyxJQUFBQSxjQUFjLEVBQUV0QixLQUFLLENBQUMwRSwyQkFBTixDQUFrQ0M7QUFKN0MsR0FBUDtBQU1ELENBUEQ7O0FBUUEsTUFBTUMsa0JBQWtCLEdBQUdDLFFBQVEsSUFBSTtBQUNyQyxTQUFPO0FBQ0wxRCxJQUFBQSxxQkFBcUIsRUFBRSxNQUFNMEQsUUFBUSxDQUFDO0FBQUVDLE1BQUFBLElBQUksRUFBRUMsV0FBVyxDQUFDQztBQUFwQixLQUFELENBRGhDO0FBRUxoQyxJQUFBQSw0QkFBNEIsRUFBR2lDLE9BQUQsSUFBYUosUUFBUSxDQUFDO0FBQUVDLE1BQUFBLElBQUksRUFBRUMsV0FBVyxDQUFDRywyQkFBcEI7QUFBaURELE1BQUFBO0FBQWpELEtBQUQsQ0FGOUM7QUFHTDVCLElBQUFBLGVBQWUsRUFBRSxNQUFNd0IsUUFBUSxDQUFDTSxjQUFjLENBQUM5QixlQUFmLEVBQUQ7QUFIMUIsR0FBUDtBQUtELENBTkQ7O2VBT2Usd0JBQVd6RyxNQUFYLEVBQW9CLHlCQUFRNEgsZUFBUixFQUF5Qkksa0JBQXpCLENBQUQsQ0FBK0MsZ0NBQVc3RixNQUFYLENBQS9DLENBQW5CLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgIENPUFlSSUdIVCAoYykgMjAxOSBTQU1TVU5HIEVMRUNUUk9OSUNTIENPLiwgTFRELiAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICBBTEwgUklHSFRTIFJFU0VSVkVEICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQgdG8gbGljZW5zZWVzIG9mIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuICAgICAgICAvXG4vICAgcHJvZHVjdHMgdG8gdXNlIG9yIGFic3RyYWN0IHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSBmb3IgdGhlIHNvbGUgcHVycG9zZSBvZiAgICAgICAgIC9cbi8gICBpbXBsZW1lbnRpbmcgYSBwcm9kdWN0IGJhc2VkIG9uIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIHByb2R1Y3RzLiAgICAgICAgICAgL1xuLyAgIE5vIG90aGVyIHJpZ2h0cyB0byByZXByb2R1Y2UsIHVzZSwgb3IgZGlzc2VtaW5hdGUgdGhpcyBjb21wdXRlciBwcm9ncmFtLCAgICAgICAgICAvXG4vICAgd2hldGhlciBpbiBwYXJ0IG9yIGluIHdob2xlLCBhcmUgZ3JhbnRlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8gXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBtYWtlcyBubyByZXByZXNlbnRhdGlvbiBvciB3YXJyYW50aWVzIHdpdGggICAgICAgICAgL1xuLyAgIHJlc3BlY3QgdG8gdGhlIHBlcmZvcm1hbmNlIG9mIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgYW5kIHNwZWNpZmljYWxseSBkaXNjbGFpbXMgICAvXG4vICAgYW55IHJlc3BvbnNpYmlsaXR5IGZvciBhbnkgZGFtYWdlcywgc3BlY2lhbCBvciBjb25zZXF1ZW50aWFsLCBjb25uZWN0ZWQgICAgICAgICAgIC9cbi8gICB3aXRoIHRoZSB1c2Ugb2YgdGhpcyBwcm9ncmFtLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cblxuXG5ERVNDUklQVElPTjogTVRvb2wgSGVhZGVyIGNvbXBvbmVudFxuQE5BTUUgOiBpbmRleC5qc1xuQEFVVEhPUlM6IEpheSBIaXRlc2ggU2FuZ2hhdmksIEFzd2luIEsgS1xuQFZlcnNpb24gOiAxLjAgKlxuQFJFVklTSU9OIEhJU1RPUllcblswMy8wNi8yMDE5XSBbSmF5XSA6IFByb3RvdHlwaW5nLi4uLi4uLi4uLi8vLy8vLy8vLy8vLy8vLy8vLy8vXG5bMDcvMDgvMjAxOV0gW0Fzd2luXSA6IEFkZGVkIE1hdGVyaWFsIFVJXG4qL1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHtcbiAgQXBwQmFyLFxuICBUb29sYmFyLFxuICBUeXBvZ3JhcGh5LFxuICBJY29uQnV0dG9uLFxufSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XG5pbXBvcnQgVGhlbWVQcm92aWRlciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvTXVpVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCBBcnJvd0Ryb3BEb3duIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9BcnJvd0Ryb3BEb3duJztcbmltcG9ydCBNZW51SWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvTWVudSc7XG5pbXBvcnQgeyB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgTW9yZUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2ljb25zL01vcmVWZXJ0JztcbmltcG9ydCBIZWFkaW5nIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvSGVhZGVyLWxvZ28ucG5nJztcbi8vIGltcG9ydCBEcm9wZG93biBmcm9tICcuL0Ryb3Bkb3duJztcbmltcG9ydCBBbGVydERpYWxvZyBmcm9tICcuLi9EaWFsb2cnO1xuaW1wb3J0ICcuL0hlYWRlci5jc3MnO1xuaW1wb3J0IFBERiBmcm9tICcuLi8uLi9hc3NldHMvU2Ftc3VuZ19pQk9GX01hbmFnZW1lbnRfVG9vbF9Vc2VyX01hbnVhbC5wZGYnO1xuaW1wb3J0IERyb3Bkb3duIGZyb20gJy4vRHJvcGRvd24nO1xuaW1wb3J0IE1vYmlsZU1lbnUgZnJvbSAnLi9Nb2JpbGVNZW51JztcbmltcG9ydCAqIGFzIGFjdGlvblR5cGVzIGZyb20gXCIuLi8uLi9zdG9yZS9hY3Rpb25zL2FjdGlvblR5cGVzXCI7XG5pbXBvcnQgTVRvb2xUaGVtZSBmcm9tIFwiLi4vLi4vdGhlbWVcIjtcbmltcG9ydCAqIGFzIGFjdGlvbkNyZWF0b3JzIGZyb20gJy4uLy4uL3N0b3JlL2FjdGlvbnMvZXhwb3J0QWN0aW9uQ3JlYXRvcnMnO1xuaW1wb3J0IENoYW5nZVBhc3N3b3JkIGZyb20gXCIuLi9DaGFuZ2VQYXNzd29yZFwiO1xuaW1wb3J0IExpbmVhclByb2dyZXNzQmFyQ29tcG9uZW50IGZyb20gXCIuLi9JYm9mT3NPcGVyYXRpb25Db21wb25lbnRzL0xpbmVhclByb2dyZXNzQmFyQ29tcG9uZW50XCJcblxuY29uc3Qgc3R5bGVzID0gdGhlbWUgPT4gKHtcbiAgYXBwQmFyOiB7XG4gICAgekluZGV4OiB0aGVtZS56SW5kZXguZHJhd2VyICsgMSxcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMxNzE3MTksICM3ODg1OTUpJyxcbiAgICBib3hTaGFkb3c6ICdub25lJyxcbiAgICBoZWlnaHQ6XCI1NXB4XCIsXG4gICAgLy8gYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnlcbiAgfSxcblxuICB1c2VyTGluazoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICB9LFxuICBncm93OiB7XG4gICAgZmxleEdyb3c6IDEsXG4gIH0sXG4gIHNlY3Rpb25EZXNrdG9wOiB7XG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKV06IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICB9LFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9LFxuICBzZWN0aW9uTW9iaWxlOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKV06IHtcbiAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICB9LFxuICB9LFxuICB2ZXJzaW9uOiB7XG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLmRvd24oJ21kJyldOiB7XG4gICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgfSxcbiAgICBtYXJnaW5Ub3A6IFwiMnB4XCJcbiAgfSxcbiAgc2VwYXJhdG9yOiB7XG4gICAgcGFkZGluZzogJzAgMTBweCcsXG4gICAgbWFyZ2luVG9wOiAnLTJweCcsXG4gIH0sXG4gIG5leHRTZXBhcmF0b3I6IHtcbiAgICBwYWRkaW5nOiAnMCAzcHgnLFxuICAgIG1hcmdpblRvcDogJy0ycHgnLFxuICB9LFxuICBjYXJldDoge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHBhZGRpbmc6ICczcHgnLFxuICAgICcmOmJlZm9yZSc6IHtcbiAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnNXB4JyxcbiAgICAgIGJvcmRlclRvcDogJzdweCBzb2xpZCAjZWVlZWVlJyxcbiAgICAgIGJvcmRlckxlZnQ6ICc3cHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAgICAgYm9yZGVyUmlnaHQ6ICc3cHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAgIH0sXG4gICAgJyY6YWZ0ZXInOiB7XG4gICAgICBjb250ZW50OiAnJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogJzVweCcsXG4gICAgICB0b3A6IDAsXG4gICAgICBib3JkZXJUb3A6ICc3cHggc29saWQgI2VlZWVlZScsXG4gICAgICBib3JkZXJMZWZ0OiAnN3B4IHNvbGlkIHRyYW5zcGFyZW50JyxcbiAgICAgIGJvcmRlclJpZ2h0OiAnN3B4IHNvbGlkIHRyYW5zcGFyZW50JyxcbiAgICB9LFxuICB9LFxuICBtZW51QnV0dG9uOiB7XG4gICAgbWFyZ2luUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpXToge1xuICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgIH0sXG4gIH0sXG59KTtcbmNsYXNzIEhlYWRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMucmVuZGVyRHJvcERvd24gPSB0aGlzLnJlbmRlckRyb3BEb3duLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW5kZXJQb3B1cCA9IHRoaXMucmVuZGVyUG9wdXAuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNsb3NlRHJvcGRvd24gPSB0aGlzLmNsb3NlRHJvcGRvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLmFsZXJ0Q2xvc2UgPSB0aGlzLmFsZXJ0Q2xvc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSGFuZGxlU3VibWl0ID0gdGhpcy5vbkhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMudXBkYXRlRHJvcGRvd24gPSB0aGlzLnVwZGF0ZURyb3Bkb3duLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wcmludExhc3RUaW1lc3RhbXAgPSB0aGlzLnByaW50TGFzdFRpbWVzdGFtcC5iaW5kKHRoaXMpO1xuICAgIHRoaXMudXNlckxvZ291dCA9IHRoaXMudXNlckxvZ291dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ29Ib21lID0gdGhpcy5nb0hvbWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZU1vYmlsZU1lbnVPcGVuID0gdGhpcy5oYW5kbGVNb2JpbGVNZW51T3Blbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlTW9iaWxlTWVudUNsb3NlID0gdGhpcy5oYW5kbGVNb2JpbGVNZW51Q2xvc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLk9uSGFuZGxlQ2hhbmdlID0gdGhpcy5PbkhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkcm9wZG93bjogZmFsc2UsXG4gICAgICBwb3B1cDogZmFsc2UsXG4gICAgICBvbGRQYXNzd29yZDogJycsXG4gICAgICBuZXdQYXNzd29yZDogJycsXG4gICAgICBtc2c6ICcnLFxuICAgICAgY29uZmlybVBhc3N3b3JkOiAnJyxcbiAgICAgIHVzZXJpZDogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJpZCcpLFxuICAgICAgYWxlcnRPcGVuOiBmYWxzZSxcbiAgICAgIGFsZXJ0VHlwZTogJ2FsZXJ0JyxcbiAgICAgIHRpdGxlOiAnRXJyb3InLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgbGVmdDogJzEwMDBweCcsXG4gICAgICAgIHRvcDogJzY1cHgnLFxuICAgICAgfSxcbiAgICAgIGFuY2hvckVsOiBudWxsLFxuICAgICAgbW9iaWxlTW9yZUFuY2hvckVsOiBudWxsLFxuICAgICAgaXNNb2JpbGVNZW51T3BlbjogZmFsc2VcbiAgICB9O1xuICAgIHRoaXMuaW50ZXJ2YWwgPSBudWxsO1xuICB9XG5cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmdldElib2ZPU1RpbWVJbnRlcnZhbCgpO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgY29uc3QgdmFsID0gdGhpcy5wcm9wcy50aW1laW50ZXJ2YWx1ZTtcbiAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy5Jc0lib2ZPU1J1bm5pbmcoKTtcbiAgICB9LCh2YWwgfHwgNCkqMTAwMCk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKXtcbiAgICBjb25zdCB2YWwgPSB0aGlzLnByb3BzLnRpbWVpbnRlcnZhbHVlO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XG4gICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMuSXNJYm9mT1NSdW5uaW5nKCk7XG4gICAgfSwodmFsIHx8IDQpKjEwMDApO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnVwZGF0ZURyb3Bkb3duKTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICB9XG5cbiAgb25IYW5kbGVTdWJtaXQoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLm9sZFBhc3N3b3JkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgbXNnOiAnRW50ZXIgeW91ciBvbGQgUGFzc3dvcmQnLFxuICAgICAgICBhbGVydE9wZW46IHRydWUsXG4gICAgICAgIC8vIHRpdGxlOiBcIkVycm9yXCIsXG4gICAgICAgIHRpdGxlOiAnQ2hhbmdlIFBhc3N3b3JkJyxcbiAgICAgICAgYWxlcnRUeXBlOiAnYWxlcnQnLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZS5uZXdQYXNzd29yZCB8fCAhdGhpcy5zdGF0ZS5jb25maXJtUGFzc3dvcmQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgICBtc2c6ICdFbnRlciBhIHZhbGlkIFBhc3N3b3JkJyxcbiAgICAgICAgYWxlcnRPcGVuOiB0cnVlLFxuICAgICAgICAvLyB0aXRsZTogXCJFcnJvclwiLFxuICAgICAgICB0aXRsZTogJ0NoYW5nZSBQYXNzd29yZCcsXG4gICAgICAgIGFsZXJ0VHlwZTogJ2FsZXJ0JyxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5uZXdQYXNzd29yZCAhPT0gdGhpcy5zdGF0ZS5jb25maXJtUGFzc3dvcmQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgICBtc2c6ICdQYXNzd29yZHMgZG8gbm90IG1hdGNoJyxcbiAgICAgICAgYWxlcnRPcGVuOiB0cnVlLFxuICAgICAgICAvLyB0aXRsZTogXCJFcnJvclwiLFxuICAgICAgICB0aXRsZTogJ0NoYW5nZSBQYXNzd29yZCcsXG4gICAgICAgIGFsZXJ0VHlwZTogJ2FsZXJ0JyxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmZXRjaCgnL2FwaS92MS4wL3VwZGF0ZV9wYXNzd29yZC8nLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIG9sZFBhc3N3b3JkOiB0aGlzLnN0YXRlLm9sZFBhc3N3b3JkLFxuICAgICAgICAgIG5ld1Bhc3N3b3JkOiB0aGlzLnN0YXRlLm5ld1Bhc3N3b3JkLFxuICAgICAgICAgIGNvbmZpcm1QYXNzd29yZDogdGhpcy5zdGF0ZS5jb25maXJtUGFzc3dvcmQsXG4gICAgICAgICAgdXNlcmlkOiB0aGlzLnN0YXRlLnVzZXJpZFxuICAgICAgICB9KSxcbiAgICAgIH0pLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIG1zZzogJ1Bhc3N3b3JkIGNoYW5nZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgICAgIGFsZXJ0T3BlbjogdHJ1ZSxcbiAgICAgICAgICAgIC8vIHRpdGxlOiBcIlN1Y2Nlc3NcIixcbiAgICAgICAgICAgIHRpdGxlOiAnQ2hhbmdlIFBhc3N3b3JkJyxcbiAgICAgICAgICAgIGFsZXJ0VHlwZTogJ2luZm8nLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZHJvcGRvd246IGZhbHNlLFxuICAgICAgICAgICAgcG9wdXA6IGZhbHNlLFxuICAgICAgICAgICAgb2xkUGFzc3dvcmQ6ICcnLFxuICAgICAgICAgICAgbmV3UGFzc3dvcmQ6ICcnLFxuICAgICAgICAgICAgY29uZmlybVBhc3N3b3JkOiAnJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnLycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIG1zZzogJ0Vycm9yIGluIHNldHRpbmcgUGFzc3dvcmQnLFxuICAgICAgICAgICAgYWxlcnRPcGVuOiB0cnVlLFxuICAgICAgICAgICAgYWxlcnRUeXBlOiAnYWxlcnQnLFxuICAgICAgICAgICAgLy8gdGl0bGU6IFwiRXJyb3JcIlxuICAgICAgICAgICAgdGl0bGU6ICdDaGFuZ2UgUGFzc3dvcmQnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBPbkhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGV2ZW50LnRhcmdldDtcbiAgICB0aGlzLnNldFN0YXRlKHsgXG4gICAgICAuLi50aGlzLnN0YXRlLCBcbiAgICAgIFtuYW1lXTogdmFsdWUgXG4gICAgfSk7XG4gIH1cblxuICBJc0lib2ZPU1J1bm5pbmcoKSB7XG4gICAgdGhpcy5wcm9wcy5HZXRfSXNfaUJPRk9TX1J1bm5pbmdfU3RhdHVzKHRoaXMucHJvcHMuaGlzdG9yeSk7XG4gIH1cblxuICBjbG9zZURyb3Bkb3duKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIGRyb3Bkb3duOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZURyb3Bkb3duKCkge1xuICAgIGNvbnN0IGxlZnQgPVxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXItbGluaycpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSA1MDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICBzdHlsZToge1xuICAgICAgICAuLi50aGlzLnN0YXRlLnN0eWxlLFxuICAgICAgICBsZWZ0OiBgJHtsZWZ0fXB4YCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBhbGVydENsb3NlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIGFsZXJ0T3BlbjogZmFsc2UsXG4gICAgfSk7XG4gIH1cblxuICBnb0hvbWUoKSB7XG4gICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy9kYXNoYm9hcmQnKTtcbiAgfVxuXG4gIHByaW50TGFzdFRpbWVzdGFtcCh2YWx1ZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIHRpbWVzdGFtcDogdmFsdWUsXG4gICAgfSk7XG4gIH1cblxuICB1c2VyTG9nb3V0KCkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidXNlclwiLCBudWxsKTtcbiAgICB0aGlzLnByb3BzLnJlc2V0SXNMb2dnZWRJbigpO1xuICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJyk7XG4gIH1cblxuICBoYW5kbGVNb2JpbGVNZW51Q2xvc2UoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgbW9iaWxlTW9yZUFuY2hvckVsOiBudWxsLFxuICAgICAgaXNNb2JpbGVNZW51T3BlbjogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZU1vYmlsZU1lbnVPcGVuKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAuLi50aGlzLnN0YXRlLFxuICAgICAgaXNNb2JpbGVNZW51T3BlbjogdHJ1ZSxcbiAgICAgIG1vYmlsZU1vcmVBbmNob3JFbDogZXZlbnQuY3VycmVudFRhcmdldFxuICAgIH0pO1xuXG4gIH1cblxuICByZW5kZXJQb3B1cCgpIHtcbiAgICBjb25zdCBwb3B1cCA9ICF0aGlzLnN0YXRlLnBvcHVwO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIHBvcHVwLFxuICAgICAgZHJvcGRvd246IGZhbHNlLFxuICAgICAgaXNNb2JpbGVNZW51T3BlbjogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlckRyb3BEb3duKGV2ZW50KSB7XG4gICAgY29uc3QgZHJvcGRvd24gPSAhdGhpcy5zdGF0ZS5kcm9wZG93bjtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICBkcm9wZG93bixcbiAgICAgIGFuY2hvckVsOiBldmVudC5jdXJyZW50VGFyZ2V0LFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHVzZXJuYW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJpZCcpO1xuICAgIGNvbnN0IHsgY2xhc3NlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBtb2JpbGVNZW51SWQgPSAncHJpbWFyeS1zZWFyY2gtYWNjb3VudC1tZW51LW1vYmlsZSc7XG4gICAgcmV0dXJuIChcbiAgICAgIDxUaGVtZVByb3ZpZGVyIGRhdGEtdGVzdGlkPVwiaGVhZGVyVGFnXCIgdGhlbWU9e01Ub29sVGhlbWV9PlxuICAgICAgICA8QXBwQmFyIGNsYXNzTmFtZT17Y2xhc3Nlcy5hcHBCYXJ9PlxuICAgICAgICAgIDxUb29sYmFyIGNsYXNzTmFtZT17Y2xhc3Nlcy50b29sYmFyfT5cbiAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgIGNvbG9yPVwiaW5oZXJpdFwiXG4gICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJvcGVuIGRyYXdlclwiXG4gICAgICAgICAgICAgIGVkZ2U9XCJzdGFydFwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5tZW51QnV0dG9ufVxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLnRvZ2dsZURyYXdlcn1cbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJzaWRlYmFyLXRvZ2dsZVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxNZW51SWNvbiAvPlxuICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBzcmM9e0hlYWRpbmd9XG4gICAgICAgICAgICAgIHN0eWxlPXt7IGN1cnNvcjogJ2RlZmF1bHQnLCBtYXJnaW5Cb3R0b206ICcwLjRyZW0nIH19XG4gICAgICAgICAgICAgIGFsdD1cIlNhbXN1bmcgaUJPRiBNYW5hZ2VtZW50IFRvb2xcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy52ZXJzaW9ufSB2YXJpYW50PVwiY2FwdGlvblwiIGRpc3BsYXk9XCJibG9ja1wiPlxuICAgICAgICAgICAgICBWZXJzaW9uIDAuMSwgUmVsZWFzZSAtIGE0YzBiZjE1ZTA2XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5ncm93fSAvPlxuICAgICAgICAgICAge3RoaXMucHJvcHMudGltZXN0YW1wICE9PSAnJyA/IChcbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJJQk9GT1NfU3RhdHVzX0hlYWRlclwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJQb3NlaWRvbiBPUyBsYXN0IHJ1bm5pbmcgdGltZXN0YW1wXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFBvc2VpZG9uIE9TIExhc3QgVXBkYXRlZDoge3RoaXMucHJvcHMudGltZXN0YW1wfVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJJQk9GT1NfU3RhdHVzX0hlYWRlclwiXG4gICAgICAgICAgICAgICAgICB0aXRsZT1cIlBvc2VpZG9uIE9TIGxhc3QgcnVubmluZyB0aW1lc3RhbXBcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5zZWN0aW9uRGVza3RvcH0+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy5zZXBhcmF0b3J9Pnw8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy5uZXh0U2VwYXJhdG9yfT4gUG9zZWlkb24gT1Mgc3RhdHVzOjwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY2xhc3NOYW1lPXtjbGFzc2VzLm5leHRTZXBhcmF0b3J9IC8+XG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLnN0YXR1cyA/IChcbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJ1bm5pbmd9XG4gICAgICAgICAgICAgICAgICBzdHlsZT17eyBjb2xvcjogJ3JnYig2MSwgMjQ5LCA1MCknIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgUnVubmluZ1xuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5ub3RSdW5uaW5nfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBjb2xvcjogJ3JnYigyNDMsIDE2OCwgNTUpJ319XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLk9TX1J1bm5pbmdfU3RhdHVzfVxuICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAge3RoaXMucHJvcHMuT1NfUnVubmluZ19TdGF0dXMgIT09ICdOb3QgUnVubmluZycgJiYgdGhpcy5wcm9wcy5PU19SdW5uaW5nX1N0YXR1cyAhPT0gJ1J1bm5pbmcnID8gKFxuICAgICAgICAgICAgICAgIDxMaW5lYXJQcm9ncmVzc0JhckNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgcGVyY2VudD17bG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1JlYnVpbGRpbmdfVmFsdWUnKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApIDogbnVsbH1cblxuXG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNsYXNzTmFtZT17Y2xhc3Nlcy5zZXBhcmF0b3J9Pnw8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9e1BERn0gdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPlxuICAgICAgICAgICAgICAgICAgSGVscFxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuc2VwYXJhdG9yfT58PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7Y2xhc3Nlcy51c2VyTGlua30gJHtcbiAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJ3VzZXInKSA+IDAgPyAnYWN0aXZlJyA6ICcnXG4gICAgICAgICAgICAgICAgICB9YH1cblx0ICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgICAgICAgIGlkPVwidXNlci1saW5rXCJcbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImhlYWRlci1kcm9wZG93blwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5yZW5kZXJEcm9wRG93bn1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5Pnt1c2VybmFtZX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPEFycm93RHJvcERvd24gLz5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICBhbmNob3JFbD17dGhpcy5zdGF0ZS5hbmNob3JFbH1cbiAgICAgICAgICAgICAgICBkcm9wZG93bj17dGhpcy5zdGF0ZS5kcm9wZG93bn1cbiAgICAgICAgICAgICAgICBjbG9zZURyb3Bkb3duPXt0aGlzLmNsb3NlRHJvcGRvd259XG4gICAgICAgICAgICAgICAgcmVuZGVyUG9wdXA9e3RoaXMucmVuZGVyUG9wdXB9XG4gICAgICAgICAgICAgICAgdXNlckxvZ291dD17dGhpcy51c2VyTG9nb3V0fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuc2VwYXJhdG9yfT58PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICB7LyogPFR5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCBkZWZhdWx0VmFsdWU9XCJlbmdsaXNoXCI+XG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZW5nbGlzaFwiPkVuZ2xpc2g8L29wdGlvbj5cbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuc2VwYXJhdG9yfT58PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeT5TdXBwb3J0PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuc2VwYXJhdG9yfT58PC9UeXBvZ3JhcGh5PiAqL31cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuc2VjdGlvbk1vYmlsZX0+XG4gICAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cInNob3cgbW9yZVwiXG4gICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz17bW9iaWxlTWVudUlkfVxuICAgICAgICAgICAgICAgIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZU1vYmlsZU1lbnVPcGVufVxuICAgICAgICAgICAgICAgIGNvbG9yPVwiaW5oZXJpdFwiXG4gICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJtb2JpbGUtc2hvdy1tb3JlXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxNb3JlSWNvbiAvPlxuICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxNb2JpbGVNZW51XG4gICAgICAgICAgICAgIG1vYmlsZU1vcmVBbmNob3JFbD17dGhpcy5zdGF0ZS5tb2JpbGVNb3JlQW5jaG9yRWx9XG4gICAgICAgICAgICAgIG1vYmlsZU1lbnVJZD17bW9iaWxlTWVudUlkfVxuICAgICAgICAgICAgICBpc01vYmlsZU1lbnVPcGVuPXt0aGlzLnN0YXRlLmlzTW9iaWxlTWVudU9wZW59XG4gICAgICAgICAgICAgIGhhbmRsZU1vYmlsZU1lbnVDbG9zZT17dGhpcy5oYW5kbGVNb2JpbGVNZW51Q2xvc2V9XG4gICAgICAgICAgICAgIHJlbmRlclBvcHVwPXt0aGlzLnJlbmRlclBvcHVwfVxuICAgICAgICAgICAgICB1c2VyTG9nb3V0PXt0aGlzLnVzZXJMb2dvdXR9XG4gICAgICAgICAgICAgIHVzZXJuYW1lPXt1c2VybmFtZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Ub29sYmFyPlxuICAgICAgICA8L0FwcEJhcj5cbiAgICAgICAge3RoaXMuc3RhdGUucG9wdXAgPyAoXG4gICAgICAgICAgPENoYW5nZVBhc3N3b3JkXG4gICAgICAgICAgICBvcGVuPXt0aGlzLnN0YXRlLnBvcHVwfVxuICAgICAgICAgICAgb2xkUGFzc3dvcmQ9e3RoaXMuc3RhdGUub2xkUGFzc3dvcmR9XG4gICAgICAgICAgICBjb25maXJtUGFzc3dvcmQ9e3RoaXMuc3RhdGUuY29uZmlybVBhc3N3b3JkfVxuICAgICAgICAgICAgbmV3UGFzc3dvcmQ9e3RoaXMuc3RhdGUubmV3UGFzc3dvcmR9XG4gICAgICAgICAgICBPbkhhbmRsZUNoYW5nZT17dGhpcy5PbkhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgIG9uQ29uZmlybT17dGhpcy5vbkhhbmRsZVN1Ym1pdH1cbiAgICAgICAgICAgIGhhbmRsZUNsb3NlPXt0aGlzLnJlbmRlclBvcHVwfVxuICAgICAgICAgIC8+XG4gICAgICAgICkgOiBudWxsfVxuXG4gICAgICAgIDxBbGVydERpYWxvZ1xuICAgICAgICAgIHRpdGxlPXt0aGlzLnN0YXRlLnRpdGxlfVxuICAgICAgICAgIHR5cGU9e3RoaXMuc3RhdGUuYWxlcnRUeXBlfVxuICAgICAgICAgIGRlc2NyaXB0aW9uPXt0aGlzLnN0YXRlLm1zZ31cbiAgICAgICAgICBvcGVuPXt0aGlzLnN0YXRlLmFsZXJ0T3Blbn1cbiAgICAgICAgICBoYW5kbGVDbG9zZT17dGhpcy5hbGVydENsb3NlfVxuICAgICAgICAvPlxuICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4geyAgXG4gIHJldHVybiB7XG4gICAgdGltZXN0YW1wOiBzdGF0ZS5oZWFkZXJSZWR1Y2VyLnRpbWVzdGFtcCxcbiAgICBzdGF0dXM6IHN0YXRlLmhlYWRlclJlZHVjZXIuc3RhdHVzLFxuICAgIE9TX1J1bm5pbmdfU3RhdHVzOiBzdGF0ZS5oZWFkZXJSZWR1Y2VyLk9TX1J1bm5pbmdfU3RhdHVzLFxuICAgIHRpbWVpbnRlcnZhbHVlOiBzdGF0ZS5jb25maWd1cmF0aW9uc2V0dGluZ1JlZHVjZXIudGltZWludGVydmFsLFxuICB9O1xufVxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4ge1xuICAgIGdldElib2ZPU1RpbWVJbnRlcnZhbDogKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5TQUdBX0dFVF9JQk9GT1NfVElNRV9JTlRFUlZBTCwgfSksXG4gICAgR2V0X0lzX2lCT0ZPU19SdW5uaW5nX1N0YXR1czogKHBheWxvYWQpID0+IGRpc3BhdGNoKHsgdHlwZTogYWN0aW9uVHlwZXMuU0FHQV9HRVRfSVNfSUJPRl9PU19SVU5OSU5HLCBwYXlsb2FkIH0pLFxuICAgIHJlc2V0SXNMb2dnZWRJbjogKCkgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMucmVzZXRJc0xvZ2dlZEluKCkpLFxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMpKChjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKSkod2l0aFJvdXRlcihIZWFkZXIpKSk7XG4iXX0=