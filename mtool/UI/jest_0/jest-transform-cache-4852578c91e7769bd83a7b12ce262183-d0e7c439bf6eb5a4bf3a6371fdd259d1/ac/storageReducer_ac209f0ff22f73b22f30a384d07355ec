0c9ea677463f5976e9376cd863e79b37
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.initialState = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState = {
  ssds: [],
  volumes: [],
  metadisks: [],
  loading: false,
  alertOpen: false,
  alertType: 'alert',
  alertTitle: '',
  errorMsg: '',
  errorCode: '',
  arraySize: 0,
  maxVolumeCount: 256,
  createVolumeButton: false,
  totalVolSize: 0,
  storagedisks: [],
  sparedisks: [],
  writebufferdisks: [],
  metadiskpath: '',
  slots: [],
  arrayExists: false,
  RAIDLevel: '',
  loadText: 'Loading...',
  diskDetails: {
    DevicePath: 'NA',
    SerialNumber: 'NA',
    ModelNumber: 'NA',
    PhysicalSize: 'NA',
    UsedBytes: 'NA',
    Firmware: 'NA',
    critical_warning: 'NA',
    temperature: 'NA',
    avail_spare: 'NA',
    spare_thresh: 'NA',
    precent_used: 'NA',
    data_units_read: 'NA',
    data_units_written: 'NA',
    critical_comp_time: 'NA',
    warning_temp_time: 'NA',
    percent_used: 'NA'
  }
};
exports.initialState = initialState;

const bytesToGB = size => {
  return parseInt(size / (1024 * 1024 * 1024), 10);
};

const storageReducer = (state = initialState, action) => {
  switch (action.type) {
    case actionTypes.FETCH_DEVICE_INFO:
      return _objectSpread({}, state, {
        ssds: action.ssds,
        metadisks: action.metadisks
      });

    case actionTypes.STORAGE_SHOW_ALERT:
      return _objectSpread({}, state, {
        alertOpen: true
      }, action.payload);

    case actionTypes.FETCH_ARRAY_SIZE:
      return _objectSpread({}, state, {
        arraySize: action.payload
      });

    case actionTypes.FETCH_MAX_VOLUME_COUNT:
      return _objectSpread({}, state, {
        maxVolumeCount: action.payload
      });

    case actionTypes.TOGGLE_CREATE_VOLUME_BUTTON:
      return _objectSpread({}, state, {
        createVolumeButton: action.payload
      });

    case actionTypes.FETCH_ARRAY:
      return _objectSpread({}, state, {}, action.payload, {
        arrayExists: true
      });

    case actionTypes.SET_NO_ARRAY:
      return _objectSpread({}, state, {
        arrayExists: false
      });

    case actionTypes.FETCH_VOLUMES:
      {
        return _objectSpread({}, state, {}, action.payload);
      }

    case actionTypes.CLEAR_VOLUMES:
      {
        return _objectSpread({}, state, {
          volumes: []
        });
      }

    case actionTypes.ADD_VOLUME:
      {
        return _objectSpread({}, state, {
          volumes: [...state.volumes, {
            name: action.volume.Name,
            id: action.volume.Id,
            size: bytesToGB(action.volume.Capacity.Data.AllocatedBytes),
            usedspace: bytesToGB(action.volume.Capacity.Data.ConsumedBytes),
            maxiops: action.volume.Oem.MaxIOPS,
            maxbw: action.volume.Oem.MaxBandwidth,
            status: action.volume.Status.Oem.VolumeStatus
          }]
        });
      }

    case actionTypes.SELECT_VOLUME:
      return _objectSpread({}, state, {
        volumes: [...state.volumes.slice(0, action.payload.index), _objectSpread({}, state.volumes[action.payload.index], {
          selected: action.payload.value
        }), ...state.volumes.slice(action.payload.index + 1)]
      });

    case actionTypes.SELECT_ALL_VOLUMES:
      return _objectSpread({}, state, {
        volumes: state.volumes.map(vol => {
          return _objectSpread({}, vol, {
            selected: action.payload.value
          });
        })
      });

    case actionTypes.STORAGE_CLOSE_ALERT:
      return _objectSpread({}, state, {
        alertOpen: false
      });

    case actionTypes.EDIT_VOLUME:
      {
        const volumes = state.volumes.map(vol => {
          return vol.id === action.payload.id ? _objectSpread({}, vol, {
            edit: true
          }) : _objectSpread({}, vol, {
            edit: false
          });
        });
        return _objectSpread({}, state, {
          volumes
        });
      }

    case actionTypes.CHANGE_VOLUME_FIELD:
      {
        const volumes = state.volumes.map(vol => {
          return vol.id === action.payload.id ? _objectSpread({}, vol, {
            [action.payload.name]: action.payload.value
          }) : _objectSpread({}, vol);
        });
        return _objectSpread({}, state, {
          volumes
        });
      }

    case actionTypes.STORAGE_START_LOADER:
      return _objectSpread({}, state, {
        loading: true,
        loadText: action.payload
      });

    case actionTypes.STORAGE_STOP_LOADER:
      return _objectSpread({}, state, {
        loading: false
      });

    case actionTypes.FETCH_DEVICE_DETAILS:
      return _objectSpread({}, state, {
        diskDetails: action.payload
      });

    default:
      return state;
  }
};

var _default = storageReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,