{"version":3,"sources":["alertManagementAddNewAlertsSaga.js"],"names":["addNewAlertsInfo","action","response","axios","post","addNewAlert","headers","Accept","localStorage","getItem","status","actionCreators","openAlertBox","alertOpen","istypealert","alerttype","alerttitle","alertdescription","error","alertManagementAddNewAlertsWatcher","actionTypes","SAGA_ALERT_MANAGEMENT_ADD_NEW_ALERTS"],"mappings":";;;;;;;;;;;;AA0BA;;AACA;;AACA;;AACA;;AACA;;AA9BA;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCO,UAAUA,gBAAV,CAA2BC,MAA3B,EAAmC;AACtC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAM,mBAAK,CAACC,cAAD,EAAQA,eAAMC,IAAd,CAAL,EAA0B,sBAA1B,EAAkDH,MAAM,CAACI,WAAzD,EAAsE;AACzFC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB,kBAFX;AAGL,0BAAkBC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAHb;AADgF,KAAtE,CAAvB;AADA,UAQQC,MARR,GAQmBR,QARnB,CAQQQ,MARR;;AASA,QAAIA,MAAM,KAAK,GAAf,EAAoB;AAChB,YAAM,2CAAN;AACA,YAAM,kBAAIC,cAAc,CAACC,YAAf,CAA4B;AAClCC,QAAAA,SAAS,EAAE,IADuB;AAElCC,QAAAA,WAAW,EAAE,IAFqB;AAGlCC,QAAAA,SAAS,EAAE,MAHuB;AAIlC;AACAC,QAAAA,UAAU,EAAE,eALsB;AAMlCC,QAAAA,gBAAgB,EAAE;AANgB,OAA5B,CAAJ,CAAN;AAQH,KAVD,MAWK,IAAIf,QAAQ,KAAK,GAAjB,EACD,MAAM,kBAAIS,cAAc,CAACC,YAAf,CAA4B;AAClCC,MAAAA,SAAS,EAAE,IADuB;AAElCC,MAAAA,WAAW,EAAE,IAFqB;AAGlCC,MAAAA,SAAS,EAAE,OAHuB;AAIlCC,MAAAA,UAAU,EAAE,eAJsB;AAKlCC,MAAAA,gBAAgB,EAAE;AALgB,KAA5B,CAAJ,CAAN,CADC,KASD,MAAM,kBAAIN,cAAc,CAACC,YAAf,CAA4B;AAClCC,MAAAA,SAAS,EAAE,IADuB;AAElCC,MAAAA,WAAW,EAAE,IAFqB;AAGlCC,MAAAA,SAAS,EAAE,OAHuB;AAIlC;AACAC,MAAAA,UAAU,EAAE,eALsB;AAMlCC,MAAAA,gBAAgB,EAAE;AANgB,KAA5B,CAAJ,CAAN;AAQP,GArCD,CAsCA,OAAOC,KAAP,EAAc;AACX;AACF;AACJ;;AAEM,UAAUC,kCAAV,GAA+C;AAClD,QAAM,wBAAUC,WAAW,CAACC,oCAAtB,EAA4DrB,gBAA5D,CAAN;AACH","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\n\nDESCRIPTION: <Contains Generator Functions for Add New Alert component> *\n@NAME : alertManagementAddNewAlertsSaga.js\n@AUTHORS: Jay Hitesh Sanghavi\n@Version : 1.0 *\n@REVISION HISTORY\n[03/06/2019] [Jay] : Prototyping..........////////////////////\n*/\nimport axios from 'axios';\nimport { call, takeEvery,put } from 'redux-saga/effects';\nimport * as actionTypes from \"../store/actions/actionTypes\";\nimport { fetchAlertsInfo } from \"./alertManagementSaga\"\nimport * as actionCreators from \"../store/actions/exportActionCreators\"\n\nexport function* addNewAlertsInfo(action) {\n    try {\n        const response = yield call([axios, axios.post], '/api/v1.0/add_alert/', action.addNewAlert, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            },\n        });\n        const { status } = response;\n        if (status === 200) {\n            yield fetchAlertsInfo();\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'info',\n                // alerttitle: \"Success\",\n                alerttitle: 'Add New Alert',\n                alertdescription: 'Alert added successfully',\n            }));\n        }\n        else if (response === 400)\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                alerttitle: 'Add New Alert',\n                alertdescription: 'Alert already exists',\n            }));\n        else\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                // alerttitle: \"Failure\",\n                alerttitle: 'Add New Alert',\n                alertdescription: 'Error in adding alert',\n            }));\n    }\n    catch (error) {\n       ;\n    }\n}\n\nexport function* alertManagementAddNewAlertsWatcher() {\n    yield takeEvery(actionTypes.SAGA_ALERT_MANAGEMENT_ADD_NEW_ALERTS, addNewAlertsInfo);\n}\n"]}