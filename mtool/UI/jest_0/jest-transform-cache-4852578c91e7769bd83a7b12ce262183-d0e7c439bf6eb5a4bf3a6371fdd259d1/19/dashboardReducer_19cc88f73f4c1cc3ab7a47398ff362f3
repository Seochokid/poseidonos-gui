1214b75a10b58217321c4e6ff231056b
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState = {
  volumes: [],
  alerts: [],
  ibofs: ['None'],
  unusedSpace: 100,
  used: 0,
  unused: 100,
  read_iops: 0,
  write_iops: 0,
  bw: 0,
  fetchingAlerts: false,
  ip: '0.0.0.0',
  mac: 'NA',
  host: '',
  arraySize: 0
};

const dashboardReducer = (state = initialState, action) => {
  switch (action.type) {
    case actionTypes.ENABLE_FETCHING_ALERTS:
      return _objectSpread({}, state, {
        fetchingAlerts: action.fetchingAlerts
      });

    case actionTypes.FETCH_VOLUME_INFO:
      return _objectSpread({}, state, {
        volumes: action.volumes
      });

    case actionTypes.FETCH_ALERTS_INFO:
      return _objectSpread({}, state, {
        alerts: action.alerts
      });

    case actionTypes.FETCH_STORAGE_INFO:
      return _objectSpread({}, state, {
        unusedSpace: action.unusedSpace,
        used: action.used,
        unused: action.unused,
        arraySize: action.arraySize
      });

    case actionTypes.FETCH_PERFORMANCE_INFO:
      return _objectSpread({}, state, {
        read_iops: action.read_iops,
        write_iops: action.write_iops,
        bw: action.bw
      });

    case actionTypes.FETCH_IPANDMAC_INFO:
      return _objectSpread({}, state, {
        ip: action.ip,
        mac: action.mac,
        host: action.host
      });

    default:
      return state;
  }
};

var _default = dashboardReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhc2hib2FyZFJlZHVjZXIuanMiXSwibmFtZXMiOlsiaW5pdGlhbFN0YXRlIiwidm9sdW1lcyIsImFsZXJ0cyIsImlib2ZzIiwidW51c2VkU3BhY2UiLCJ1c2VkIiwidW51c2VkIiwicmVhZF9pb3BzIiwid3JpdGVfaW9wcyIsImJ3IiwiZmV0Y2hpbmdBbGVydHMiLCJpcCIsIm1hYyIsImhvc3QiLCJhcnJheVNpemUiLCJkYXNoYm9hcmRSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwiYWN0aW9uVHlwZXMiLCJFTkFCTEVfRkVUQ0hJTkdfQUxFUlRTIiwiRkVUQ0hfVk9MVU1FX0lORk8iLCJGRVRDSF9BTEVSVFNfSU5GTyIsIkZFVENIX1NUT1JBR0VfSU5GTyIsIkZFVENIX1BFUkZPUk1BTkNFX0lORk8iLCJGRVRDSF9JUEFORE1BQ19JTkZPIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBMkJBOzs7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUc7QUFDakJDLEVBQUFBLE9BQU8sRUFBRSxFQURRO0FBRWpCQyxFQUFBQSxNQUFNLEVBQUUsRUFGUztBQUdqQkMsRUFBQUEsS0FBSyxFQUFFLENBQUMsTUFBRCxDQUhVO0FBSWpCQyxFQUFBQSxXQUFXLEVBQUUsR0FKSTtBQUtqQkMsRUFBQUEsSUFBSSxFQUFFLENBTFc7QUFNakJDLEVBQUFBLE1BQU0sRUFBRSxHQU5TO0FBT2pCQyxFQUFBQSxTQUFTLEVBQUUsQ0FQTTtBQVFqQkMsRUFBQUEsVUFBVSxFQUFFLENBUks7QUFTakJDLEVBQUFBLEVBQUUsRUFBRSxDQVRhO0FBVWpCQyxFQUFBQSxjQUFjLEVBQUUsS0FWQztBQVdqQkMsRUFBQUEsRUFBRSxFQUFFLFNBWGE7QUFZakJDLEVBQUFBLEdBQUcsRUFBRSxJQVpZO0FBYWpCQyxFQUFBQSxJQUFJLEVBQUUsRUFiVztBQWNqQkMsRUFBQUEsU0FBUyxFQUFFO0FBZE0sQ0FBckI7O0FBa0JBLE1BQU1DLGdCQUFnQixHQUFHLENBQUNDLEtBQUssR0FBR2hCLFlBQVQsRUFBdUJpQixNQUF2QixLQUFrQztBQUN2RCxVQUFRQSxNQUFNLENBQUNDLElBQWY7QUFDSSxTQUFLQyxXQUFXLENBQUNDLHNCQUFqQjtBQUNJLCtCQUNPSixLQURQO0FBRUlOLFFBQUFBLGNBQWMsRUFBRU8sTUFBTSxDQUFDUDtBQUYzQjs7QUFJSixTQUFLUyxXQUFXLENBQUNFLGlCQUFqQjtBQUNJLCtCQUNPTCxLQURQO0FBRUlmLFFBQUFBLE9BQU8sRUFBRWdCLE1BQU0sQ0FBQ2hCO0FBRnBCOztBQUlKLFNBQUtrQixXQUFXLENBQUNHLGlCQUFqQjtBQUNJLCtCQUNPTixLQURQO0FBRUlkLFFBQUFBLE1BQU0sRUFBRWUsTUFBTSxDQUFDZjtBQUZuQjs7QUFJSixTQUFLaUIsV0FBVyxDQUFDSSxrQkFBakI7QUFDSSwrQkFDT1AsS0FEUDtBQUVJWixRQUFBQSxXQUFXLEVBQUNhLE1BQU0sQ0FBQ2IsV0FGdkI7QUFHSUMsUUFBQUEsSUFBSSxFQUFDWSxNQUFNLENBQUNaLElBSGhCO0FBSUlDLFFBQUFBLE1BQU0sRUFBQ1csTUFBTSxDQUFDWCxNQUpsQjtBQUtJUSxRQUFBQSxTQUFTLEVBQUNHLE1BQU0sQ0FBQ0g7QUFMckI7O0FBT0osU0FBS0ssV0FBVyxDQUFDSyxzQkFBakI7QUFDSSwrQkFDT1IsS0FEUDtBQUVJVCxRQUFBQSxTQUFTLEVBQUVVLE1BQU0sQ0FBQ1YsU0FGdEI7QUFHSUMsUUFBQUEsVUFBVSxFQUFDUyxNQUFNLENBQUNULFVBSHRCO0FBSUlDLFFBQUFBLEVBQUUsRUFBQ1EsTUFBTSxDQUFDUjtBQUpkOztBQU1KLFNBQUtVLFdBQVcsQ0FBQ00sbUJBQWpCO0FBQ0ksK0JBQ09ULEtBRFA7QUFFSUwsUUFBQUEsRUFBRSxFQUFDTSxNQUFNLENBQUNOLEVBRmQ7QUFHSUMsUUFBQUEsR0FBRyxFQUFDSyxNQUFNLENBQUNMLEdBSGY7QUFJSUMsUUFBQUEsSUFBSSxFQUFDSSxNQUFNLENBQUNKO0FBSmhCOztBQU1KO0FBQ0ksYUFBT0csS0FBUDtBQXZDUjtBQXlDSCxDQTFDRDs7ZUE0Q2VELGdCIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICBDT1BZUklHSFQgKGMpIDIwMTkgU0FNU1VORyBFTEVDVFJPTklDUyBDTy4sIExURC4gICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgQUxMIFJJR0hUUyBSRVNFUlZFRCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkIHRvIGxpY2Vuc2VlcyBvZiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiAgICAgICAgL1xuLyAgIHByb2R1Y3RzIHRvIHVzZSBvciBhYnN0cmFjdCB0aGlzIGNvbXB1dGVyIHByb2dyYW0gZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgICAgICAgICAvXG4vICAgaW1wbGVtZW50aW5nIGEgcHJvZHVjdCBiYXNlZCBvbiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBwcm9kdWN0cy4gICAgICAgICAgIC9cbi8gICBObyBvdGhlciByaWdodHMgdG8gcmVwcm9kdWNlLCB1c2UsIG9yIGRpc3NlbWluYXRlIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgICAgICAgICAgL1xuLyAgIHdoZXRoZXIgaW4gcGFydCBvciBpbiB3aG9sZSwgYXJlIGdyYW50ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIFxuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gbWFrZXMgbm8gcmVwcmVzZW50YXRpb24gb3Igd2FycmFudGllcyB3aXRoICAgICAgICAgIC9cbi8gICByZXNwZWN0IHRvIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIGNvbXB1dGVyIHByb2dyYW0sIGFuZCBzcGVjaWZpY2FsbHkgZGlzY2xhaW1zICAgL1xuLyAgIGFueSByZXNwb25zaWJpbGl0eSBmb3IgYW55IGRhbWFnZXMsIHNwZWNpYWwgb3IgY29uc2VxdWVudGlhbCwgY29ubmVjdGVkICAgICAgICAgICAvXG4vICAgd2l0aCB0aGUgdXNlIG9mIHRoaXMgcHJvZ3JhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG5cblxuREVTQ1JJUFRJT046IDxDb250YWlucyByZWR1Y2VyIGZ1bmN0aW9uIGZvciBkYXNoYm9hcmQgcGFnZT4gKlxuQE5BTUUgOiBkYXNoYm9hcmRSZWR1Y2VyLmpzXG5AQVVUSE9SUzogSmF5IEhpdGVzaCBTYW5naGF2aSBcbkBWZXJzaW9uIDogMS4wICpcbkBSRVZJU0lPTiBISVNUT1JZXG5bMDMvMDYvMjAxOV0gW0pheV0gOiBQcm90b3R5cGluZy4uLi4uLi4uLi4vLy8vLy8vLy8vLy8vLy8vLy8vL1xuKi9cblxuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSBcIi4uL2FjdGlvbnMvYWN0aW9uVHlwZXNcIlxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgdm9sdW1lczogW10sXG4gICAgYWxlcnRzOiBbXSxcbiAgICBpYm9mczogWydOb25lJ10sXG4gICAgdW51c2VkU3BhY2U6IDEwMCxcbiAgICB1c2VkOiAwLFxuICAgIHVudXNlZDogMTAwLFxuICAgIHJlYWRfaW9wczogMCxcbiAgICB3cml0ZV9pb3BzOiAwLFxuICAgIGJ3OiAwLFxuICAgIGZldGNoaW5nQWxlcnRzOiBmYWxzZSxcbiAgICBpcDogJzAuMC4wLjAnLFxuICAgIG1hYzogJ05BJyxcbiAgICBob3N0OiAnJyxcbiAgICBhcnJheVNpemU6IDBcbn1cblxuXG5jb25zdCBkYXNoYm9hcmRSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZXMuRU5BQkxFX0ZFVENISU5HX0FMRVJUUzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgZmV0Y2hpbmdBbGVydHM6IGFjdGlvbi5mZXRjaGluZ0FsZXJ0cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZXMuRkVUQ0hfVk9MVU1FX0lORk86XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHZvbHVtZXM6IGFjdGlvbi52b2x1bWVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlcy5GRVRDSF9BTEVSVFNfSU5GTzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgYWxlcnRzOiBhY3Rpb24uYWxlcnRzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlcy5GRVRDSF9TVE9SQUdFX0lORk86XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHVudXNlZFNwYWNlOmFjdGlvbi51bnVzZWRTcGFjZSxcbiAgICAgICAgICAgICAgICB1c2VkOmFjdGlvbi51c2VkLFxuICAgICAgICAgICAgICAgIHVudXNlZDphY3Rpb24udW51c2VkLFxuICAgICAgICAgICAgICAgIGFycmF5U2l6ZTphY3Rpb24uYXJyYXlTaXplXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIGFjdGlvblR5cGVzLkZFVENIX1BFUkZPUk1BTkNFX0lORk86XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHJlYWRfaW9wczogYWN0aW9uLnJlYWRfaW9wcyxcbiAgICAgICAgICAgICAgICB3cml0ZV9pb3BzOmFjdGlvbi53cml0ZV9pb3BzLFxuICAgICAgICAgICAgICAgIGJ3OmFjdGlvbi5id1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlcy5GRVRDSF9JUEFORE1BQ19JTkZPOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICBpcDphY3Rpb24uaXAsXG4gICAgICAgICAgICAgICAgbWFjOmFjdGlvbi5tYWMsXG4gICAgICAgICAgICAgICAgaG9zdDphY3Rpb24uaG9zdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkYXNoYm9hcmRSZWR1Y2VyOyJdfQ==