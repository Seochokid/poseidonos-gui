2835bdca2049441037e06b68c0a752ba
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState = {
  power_sensor_info: [],
  fan_sensor_info: [],
  temperature_sensor_info: []
};

const hardwareSensorReducer = (state = initialState, action) => {
  switch (action.type) {
    case actionTypes.HARDWARE_SENSORS_FETCH_POWER_SENSOR_INFORMATION:
      return _objectSpread({}, state, {
        power_sensor_info: action.serverinfo
      });

    case actionTypes.HARDWARE_SENSORS_FETCH_FAN_SENSOR_INFORMATION:
      return _objectSpread({}, state, {
        fan_sensor_info: action.serverinfo
      });

    case actionTypes.HARDWARE_SENSORS_FETCH_TEMPERATURE_SENSOR_INFORMATION:
      return _objectSpread({}, state, {
        temperature_sensor_info: action.serverinfo
      });

    default:
      return state;
  }
};

var _default = hardwareSensorReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmR3YXJlU2Vuc29yUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJwb3dlcl9zZW5zb3JfaW5mbyIsImZhbl9zZW5zb3JfaW5mbyIsInRlbXBlcmF0dXJlX3NlbnNvcl9pbmZvIiwiaGFyZHdhcmVTZW5zb3JSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwiYWN0aW9uVHlwZXMiLCJIQVJEV0FSRV9TRU5TT1JTX0ZFVENIX1BPV0VSX1NFTlNPUl9JTkZPUk1BVElPTiIsInNlcnZlcmluZm8iLCJIQVJEV0FSRV9TRU5TT1JTX0ZFVENIX0ZBTl9TRU5TT1JfSU5GT1JNQVRJT04iLCJIQVJEV0FSRV9TRU5TT1JTX0ZFVENIX1RFTVBFUkFUVVJFX1NFTlNPUl9JTkZPUk1BVElPTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQTBCQTs7Ozs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHO0FBQ2pCQyxFQUFBQSxpQkFBaUIsRUFBRyxFQURIO0FBRWpCQyxFQUFBQSxlQUFlLEVBQUUsRUFGQTtBQUdqQkMsRUFBQUEsdUJBQXVCLEVBQUM7QUFIUCxDQUFyQjs7QUFNQSxNQUFNQyxxQkFBcUIsR0FBRyxDQUFDQyxLQUFLLEdBQUdMLFlBQVQsRUFBdUJNLE1BQXZCLEtBQWtDO0FBQzVELFVBQVFBLE1BQU0sQ0FBQ0MsSUFBZjtBQUNJLFNBQUtDLFdBQVcsQ0FBQ0MsK0NBQWpCO0FBQ0ksK0JBQ09KLEtBRFA7QUFFSUosUUFBQUEsaUJBQWlCLEVBQUNLLE1BQU0sQ0FBQ0k7QUFGN0I7O0FBSUEsU0FBS0YsV0FBVyxDQUFDRyw2Q0FBakI7QUFDSSwrQkFDT04sS0FEUDtBQUVJSCxRQUFBQSxlQUFlLEVBQUNJLE1BQU0sQ0FBQ0k7QUFGM0I7O0FBSUEsU0FBS0YsV0FBVyxDQUFDSSxxREFBakI7QUFDSiwrQkFDT1AsS0FEUDtBQUVJRixRQUFBQSx1QkFBdUIsRUFBQ0csTUFBTSxDQUFDSTtBQUZuQzs7QUFJSjtBQUNJLGFBQU9MLEtBQVA7QUFqQlI7QUFtQkgsQ0FwQkQ7O2VBc0JlRCxxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgQ09QWVJJR0hUIChjKSAyMDE5IFNBTVNVTkcgRUxFQ1RST05JQ1MgQ08uLCBMVEQuICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgIEFMTCBSSUdIVFMgUkVTRVJWRUQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCB0byBsaWNlbnNlZXMgb2YgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gICAgICAgIC9cbi8gICBwcm9kdWN0cyB0byB1c2Ugb3IgYWJzdHJhY3QgdGhpcyBjb21wdXRlciBwcm9ncmFtIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mICAgICAgICAgL1xuLyAgIGltcGxlbWVudGluZyBhIHByb2R1Y3QgYmFzZWQgb24gU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gcHJvZHVjdHMuICAgICAgICAgICAvXG4vICAgTm8gb3RoZXIgcmlnaHRzIHRvIHJlcHJvZHVjZSwgdXNlLCBvciBkaXNzZW1pbmF0ZSB0aGlzIGNvbXB1dGVyIHByb2dyYW0sICAgICAgICAgIC9cbi8gICB3aGV0aGVyIGluIHBhcnQgb3IgaW4gd2hvbGUsIGFyZSBncmFudGVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIG1ha2VzIG5vIHJlcHJlc2VudGF0aW9uIG9yIHdhcnJhbnRpZXMgd2l0aCAgICAgICAgICAvXG4vICAgcmVzcGVjdCB0byB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyBjb21wdXRlciBwcm9ncmFtLCBhbmQgc3BlY2lmaWNhbGx5IGRpc2NsYWltcyAgIC9cbi8gICBhbnkgcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYW1hZ2VzLCBzcGVjaWFsIG9yIGNvbnNlcXVlbnRpYWwsIGNvbm5lY3RlZCAgICAgICAgICAgL1xuLyAgIHdpdGggdGhlIHVzZSBvZiB0aGlzIHByb2dyYW0uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuXG5ERVNDUklQVElPTjogPENvbnRhaW5zIHJlZHVjZXIgRnVuY3Rpb25zIGZvciBoYXJkd2FyZSBjb250YWluZXI+ICpcbkBOQU1FIDogaGFyZHdhcmVTZW5zb3JSZWR1Y2VyLmpzXG5AQVVUSE9SUzogSmF5IFNhbmdoYXZpIFxuQFZlcnNpb24gOiAxLjAgKlxuQFJFVklTSU9OIEhJU1RPUllcblswMy8xMS8yMDE5XSBbSmF5XSA6IFByb3RvdHlwaW5nLi4uLi4uLi4uLi8vLy8vLy8vLy8vLy8vLy8vLy8vXG4qL1xuXG5pbXBvcnQgKiBhcyBhY3Rpb25UeXBlcyBmcm9tIFwiLi4vYWN0aW9ucy9hY3Rpb25UeXBlc1wiXG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICBwb3dlcl9zZW5zb3JfaW5mbzogIFtdLFxuICAgIGZhbl9zZW5zb3JfaW5mbzogW10sXG4gICAgdGVtcGVyYXR1cmVfc2Vuc29yX2luZm86W10sXG59XG5cbmNvbnN0IGhhcmR3YXJlU2Vuc29yUmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIGFjdGlvblR5cGVzLkhBUkRXQVJFX1NFTlNPUlNfRkVUQ0hfUE9XRVJfU0VOU09SX0lORk9STUFUSU9OOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICBwb3dlcl9zZW5zb3JfaW5mbzphY3Rpb24uc2VydmVyaW5mbyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIGFjdGlvblR5cGVzLkhBUkRXQVJFX1NFTlNPUlNfRkVUQ0hfRkFOX1NFTlNPUl9JTkZPUk1BVElPTjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgZmFuX3NlbnNvcl9pbmZvOmFjdGlvbi5zZXJ2ZXJpbmZvLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2FzZSBhY3Rpb25UeXBlcy5IQVJEV0FSRV9TRU5TT1JTX0ZFVENIX1RFTVBFUkFUVVJFX1NFTlNPUl9JTkZPUk1BVElPTjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgdGVtcGVyYXR1cmVfc2Vuc29yX2luZm86YWN0aW9uLnNlcnZlcmluZm8sXG4gICAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhcmR3YXJlU2Vuc29yUmVkdWNlcjsiXX0=