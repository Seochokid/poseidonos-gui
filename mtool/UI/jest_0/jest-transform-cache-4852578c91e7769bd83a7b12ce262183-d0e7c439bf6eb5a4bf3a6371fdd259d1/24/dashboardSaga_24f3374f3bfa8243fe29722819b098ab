adf0a1a9c0b2ccaca407a34fc6ad387a
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchVolumeInfo = fetchVolumeInfo;
exports.fetchAlertsInfo = fetchAlertsInfo;
exports.dashboardWatcher = dashboardWatcher;

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

/* -------------------------------------------------------------------------------------/
                                                                                    /
/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /
/                          ALL RIGHTS RESERVED                                        /
/                                                                                     /
/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /
/   products to use or abstract this computer program for the sole purpose of         /
/   implementing a product based on Samsung Electronics Co., Ltd. products.           /
/   No other rights to reproduce, use, or disseminate this computer program,          /
/   whether in part or in whole, are granted.                                         / 
/                                                                                     /
/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /
/   respect to the performance of this computer program, and specifically disclaims   /
/   any responsibility for any damages, special or consequential, connected           /
/   with the use of this program.                                                     /
/                                                                                     /
/-------------------------------------------------------------------------------------/


DESCRIPTION: <Contains Generator Functions for Dashboard component> *
@NAME : dashboardSaga.js
@AUTHORS: Jay Hitesh Sanghavi 
@Version : 1.0 *
@REVISION HISTORY
[03/06/2019] [Jay] : Prototyping..........////////////////////
*/
function* fetchVolumeInfo() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_volumes/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result && !result.message) {
      yield (0, _effects.put)(actionCreators.fetchVolumes(result));
    }

    yield (0, _effects.put)(actionCreators.enableFetchingAlerts(false));
  } catch (error) {
    const defaultResponse = [];
    yield (0, _effects.put)(actionCreators.fetchVolumes(defaultResponse));
    yield (0, _effects.put)(actionCreators.enableFetchingAlerts(false));
  } finally {
    if (yield (0, _effects.cancelled)()) {
      const defaultResponse = [];
      yield (0, _effects.put)(actionCreators.fetchVolumes(defaultResponse));
      yield (0, _effects.put)(actionCreators.enableFetchingAlerts(false));
    }
  }
}

function* fetchAlertsInfo() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], "/api/v1.0/get_alert_info", {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchAlerts(result.alerts));
    }
  } catch (error) {// console.log(error);
  }
}

function* fetchStorageInfo() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/available_storage/?ts=${Date.now()}`, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchStorage(result[0] ? result[0].avail_size / result[0].total_size * 100 : 0, result[0].total_size - result[0].avail_size, result[0].avail_size, result[0].arraySize));
    }
  } catch (error) {// console.log(error);
  }
}

function* fetchPerformanceInfo() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/perf/all?ts=${Date.now()}`, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchPerformance(Math.round(result.iops_read), Math.round(result.iops_write), Math.round(result.bw_total / (1000 * 1000) * 100) / 100));
    }
  } catch (error) {// console.log(error);
  }
}

function* fetchIpAndMacInfo() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], "/api/v1.0/get_ip_and_mac", {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchIpAndMac(result.ip, result.mac, result.host));
    }
  } catch (error) {// console.log(error);
  }
}

function* dashboardWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_VOLUME_INFO, fetchVolumeInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_ALERTS_INFO, fetchAlertsInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_STORAGE_INFO, fetchStorageInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_PERFORMANCE_INFO, fetchPerformanceInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_IPANDMAC_INFO, fetchIpAndMacInfo); // console.log("This is async operation");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,