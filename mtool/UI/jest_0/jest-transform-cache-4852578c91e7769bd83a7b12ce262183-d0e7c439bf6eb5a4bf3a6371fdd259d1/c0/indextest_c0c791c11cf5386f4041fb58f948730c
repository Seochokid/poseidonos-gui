b4d68ded29003b25955101003c51835f
"use strict";

jest.unmock('axios');

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _index = _interopRequireDefault(require("./index"));

var _testUtils = require("@material-ui/core/test-utils");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactRedux = require("react-redux");

require("@testing-library/jest-dom/extend-expect");

var _reactI18next = require("react-i18next");

var _axios = _interopRequireDefault(require("axios"));

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _history = require("history");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _indexSaga = _interopRequireDefault(require("../../sagas/indexSaga"));

var _headerReducer = _interopRequireDefault(require("../../store/reducers/headerReducer"));

var _dashboardReducer = _interopRequireDefault(require("../../store/reducers/dashboardReducer"));

var _configurationsettingReducer = _interopRequireDefault(require("../../store/reducers/configurationsettingReducer"));

var _BMCAuthenticationReducer = _interopRequireDefault(require("../../store/reducers/BMCAuthenticationReducer"));

var _i18n = _interopRequireDefault(require("../../i18n"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Dashboard/index.test.js";
describe("Dashboard", () => {
  let wrapper;
  let history;
  let store;
  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      headerReducer: _headerReducer.default,
      dashboardReducer: _dashboardReducer.default,
      configurationsettingReducer: _configurationsettingReducer.default,
      BMCAuthenticationReducer: _BMCAuthenticationReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = '/';
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    });
  });

  const renderComponent = () => {
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 52
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 53
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 54
      },
      __self: void 0
    }, " ", _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 56
      },
      __self: void 0
    })))));
  };

  afterEach(_react2.cleanup);
  it("matches snapshot", () => {
    renderComponent();
    const _wrapper = wrapper,
          asFragment = _wrapper.asFragment;
    expect(asFragment()).toMatchSnapshot();
  });
  it("should display available storage value as received from API", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet(`/api/v1.0/available_storage/?ts= + ${Date.now()}`).reply(200, [{
      arraySize: 0
    }]);
    renderComponent();
    const _wrapper2 = wrapper,
          getByTestId = _wrapper2.getByTestId;
    const readStorageElement = await (0, _react2.waitForElement)(() => getByTestId("dashboard-no-array"));
    expect(readStorageElement.innerHTML).toBe("No Array Created");
  });
  it("should display system info as received from API", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet(`/api/v1.0/get_ip_and_mac`).reply(200, {
      host: "init",
      ip: "10.1.11.91",
      mac: "00:50:56:ad:88:56"
    });
    renderComponent();
    const _wrapper3 = wrapper,
          getByTestId = _wrapper3.getByTestId;
    const ipElement = await (0, _react2.waitForElement)(() => getByTestId("dashboard-ip"));
    expect(ipElement.innerHTML).toBe("IP : 10.1.11.91");
    const hostElement = await (0, _react2.waitForElement)(() => getByTestId("dashboard-host"));
    expect(hostElement.innerHTML).toBe("Poseidon Name : init");
    const macElement = await (0, _react2.waitForElement)(() => getByTestId("dashboard-mac"));
    expect(macElement.innerHTML).toBe("MAC : 00:50:56:ad:88:56");
  });
  it("should display storage details", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet(/api\/v1\.0\/available_storage\/\?ts=*/).reply(200, [{
      arraySize: 4768219004928
    }]);
    renderComponent();
    const _wrapper4 = wrapper,
          getByText = _wrapper4.getByText;
    const hostElement = await (0, _react2.waitForElement)(() => getByText("4.34 TB"));
    expect(hostElement).toBeDefined();
  });
  it("should display volumes", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet(`/api/v1.0/get_volumes/`).reply(200, [{
      id: '0',
      maxbw: 0,
      maxiops: 0,
      name: 'vol2',
      remain: 10737418240,
      status: 'Mounted',
      total: 10737418240,
      ip: '10.1.11.91',
      port: 'NA',
      subnqn: 'NA',
      description: "",
      unit: 'GB',
      size: '10',
      usedspace: 0
    }]);
    renderComponent();
    const _wrapper5 = wrapper,
          getByText = _wrapper5.getByText;
    const hostElement = await (0, _react2.waitForElement)(() => getByText("vol2"));
    expect(hostElement).toBeDefined();
  });
  it("should display alerts", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet(`/api/v1.0/get_alert_info`).reply(200, {
      alerts: [{
        time: 104256782,
        level: 'CRITICAL',
        message: 'CPU Alert',
        duration: 10,
        host: 'iBoF'
      }, {
        time: 104256783,
        level: 'NORMAL',
        message: 'iBoF Alert',
        duration: 10,
        host: 'iBoF'
      }]
    });
    renderComponent();
    const _wrapper6 = wrapper,
          getByText = _wrapper6.getByText;
    const hostElement1 = await (0, _react2.waitForElement)(() => getByText("CPU Alert"));
    expect(hostElement1).toBeDefined();
    const hostElement2 = await (0, _react2.waitForElement)(() => getByText("iBoF Alert"));
    expect(hostElement2).toBeDefined();
  });
  it('should render button on resize', () => {
    // Change the viewport to 500px.
    global.innerWidth = 500; // Trigger the window resize event.

    global.dispatchEvent(new Event('resize'));
    renderComponent();
    const _wrapper7 = wrapper,
          getByTestId = _wrapper7.getByTestId;
    expect(getByTestId("sidebar-toggle")).toBeDefined();

    _react2.fireEvent.click(getByTestId("sidebar-toggle"));

    expect(getByTestId("help-link")).toHaveTextContent("Help");
  });
  it("should display iops value as received from API", async () => {
    jest.useFakeTimers();
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet(/\/api\/v1\.0\/perf\/all\?ts=*/).reply(200, {
      bw_read: 0,
      bw_total: 0,
      bw_write: 0,
      iops_read: 154,
      iops_total: 0,
      iops_write: 154
    }).onAny().reply(200, {});
    renderComponent();
    jest.advanceTimersByTime(2000);
    const _wrapper8 = wrapper,
          getByTestId = _wrapper8.getByTestId;
    const readIopsElement = await (0, _react2.waitForElement)(() => getByTestId("read-iops"));
    expect(readIopsElement.innerHTML).toBe("0");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,