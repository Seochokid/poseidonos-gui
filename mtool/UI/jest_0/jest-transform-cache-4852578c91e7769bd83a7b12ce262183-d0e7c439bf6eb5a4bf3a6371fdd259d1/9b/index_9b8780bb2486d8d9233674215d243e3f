5470d199479f916073b5c27671c143d2
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _materialTable = _interopRequireDefault(require("material-table"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _styles = require("@material-ui/core/styles");

var _materialUiPhoneNumber = _interopRequireDefault(require("material-ui-phone-number"));

var _core = require("@material-ui/core");

var _icons = require("@material-ui/icons");

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

require("./UserTable.css");

var _theme = require("../../theme");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/UserTable/index.js";

const styles = theme => {
  return {
    titleContainer: {
      maxWidth: '100%',
      flexBasis: '100%'
    },
    pageHeader: {
      textAlign: 'left',
      fontSize: '16px',
      fontWeight: 'bold',
      color: '#424850',
      marginBottom: theme.spacing(1)
    },
    userListTypography: {
      textAlign: 'left',
      fontSize: '14px',
      fontWeight: 'bold',
      color: '#424850',
      margin: theme.spacing(1.5)
    },
    tableContainer: {
      maxWidth: '100%',
      flexBasis: '100%'
    },
    userListGrid: {
      background: 'white',
      fontSize: '14px',
      maxWidth: '100%',
      flexBasis: '100%',
      border: '1px solid gray'
    }
  };
};

function validate(newData) {
  if (!newData || !newData.email || !(newData.email.indexOf('@') > -1) || !(newData.email.indexOf('.') > -1)) return false;
  return true;
}

class UserTable extends _react.Component {
  constructor(props) {
    super(props);
    this.theme = (0, _core.createMuiTheme)({
      typography: {
        fontSize: 12,
        fontFamily: 'Arial'
      },
      palette: {
        primary: {
          main: '#4caf50'
        },
        secondary: {
          main: '#ff9100'
        }
      }
    });
    this.state = {
      columns: [{
        title: 'Role',
        field: 'role',
        editable: 'never',
        render: row => row.role ? row.role.toUpperCase() : ''
      }, {
        title: 'User Name',
        field: '_id',
        editable: 'never',
        cellStyle: {
          maxWidth: "200px",
          overflowWrap: "break-word"
        }
      },
      /*
              {
                title: 'API Enable',
                field: 'active',
                editable: 'never',
                render: row =>
                  (
                    <Switch
                      disabled={(row && row.tableData && row.tableData.editing === 'update')}
                      size="small"
                      checked={row.active}
                      onChange={() => this.props.toggleUserStatus(row.tableData.id)}
                      color="primary"
                      inputProps={{ 'aria-label': 'primary checkbox', title: 'api-enable' }}
                      id = {`UserTable-togglebtn-${row._id}`}
                    />
                  ),
              },
      */
      {
        title: 'Phone',
        field: 'phone_number',
        headerStyle: {
          textAlign: 'left'
        },
        cellStyle: {
          textAlign: 'left'
        },
        editComponent: row => _react.default.createElement(_materialUiPhoneNumber.default, {
          onChange: value => this.props.OnHandleChange({
            target: {
              value,
              name: 'phone_number'
            }
          }),
          inputProps: {
            name: 'phone_number',
            default: row.phone_number,
            id: `UserTable-phone-${row}`
          },
          value: this.props.phone_number,
          required: true,
          label: "" // onlyCountries={['in', 'kr']}
          ,
          defaultCountry: "kr",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 144
          },
          __self: this
        })
      }, {
        title: 'Email',
        field: 'email'
      }, {
        title: 'Privilege',
        field: 'privileges',
        editable: 'never'
      }]
    };
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      sm: 6,
      xs: 12,
      className: classes.titleContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 175
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      item: true,
      className: classes.tableContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 176
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      item: true,
      className: classes.userListGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 177
      },
      __self: this
    }, _react.default.createElement(_MuiThemeProvider.default, {
      theme: this.theme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 178
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.userListTypography,
      variant: "h3",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 179
      },
      __self: this
    }, "User List"), _react.default.createElement(_materialTable.default, {
      editable: {
        onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {
          setTimeout(() => {
            const valid = validate(newData);

            if (valid) {
              newData.phone_number = this.props.phone_number;
              this.props.saveChange(newData, oldData.tableData.id);
            } else {
              this.props.openAlertBox({
                istypealert: true,
                alerttype: 'alert',
                alertOpen: true,
                alerttitle: 'Update User',
                alertdescription: 'Please enter a valid input'
              });
              reject();
            }

            resolve();
          }, 1000);
        }),
        onRowDelete: oldData => new Promise(resolve => {
          setTimeout(() => {
            {
              const event = {
                target: {
                  checked: true
                }
              };
              this.props.selectUser(event, oldData.tableData.id);
              this.props.deleteUsers();
            }
            resolve();
          }, 1000);
        })
      },
      icons: {
        Check: _icons.Check,
        FirstPage: _icons.FirstPage,
        LastPage: _icons.LastPage,
        NextPage: _icons.ChevronRight,
        PreviousPage: _icons.ChevronLeft,
        Search: _icons.Search,
        ThirdStateCheck: _icons.Remove,
        DetailPanel: _icons.ChevronRight,
        Export: _icons.SaveAlt,
        Filter: _icons.FilterList,
        Add: _icons.Add,
        Edit: _icons.Edit,
        Delete: _Delete.default,
        SortArrow: _icons.ArrowUpward,
        Clear: _icons.Clear
      },
      columns: this.state.columns,
      data: this.props.users,
      options: {
        headerStyle: _theme.customTheme.table.header,
        actionsColumnIndex: -1,
        selection: false,
        sorting: true,
        toolbar: false,
        maxBodyHeight: '230px'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 180
      },
      __self: this
    })))));
  }

}

var _default = (0, _styles.withStyles)(styles)(UserTable);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,