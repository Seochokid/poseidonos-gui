2c77443dd8b5c1b836b6853d0c909bbc
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _materialTable = _interopRequireDefault(require("material-table"));

require("react-dropdown/style.css");

var _styles = require("@material-ui/core/styles");

var _ChevronLeft = _interopRequireDefault(require("@material-ui/icons/ChevronLeft"));

var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var _FirstPage = _interopRequireDefault(require("@material-ui/icons/FirstPage"));

var _LastPage = _interopRequireDefault(require("@material-ui/icons/LastPage"));

var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));

var _ArrowUpward = _interopRequireDefault(require("@material-ui/icons/ArrowUpward"));

require("react-table/react-table.css");

require("core-js/es/number");

require("core-js/es/array");

var _reactLoaderSpinner = _interopRequireDefault(require("react-loader-spinner"));

var _core = require("@material-ui/core");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _theme = require("../../theme");

var _Header = _interopRequireDefault(require("../../components/Header"));

var _Sidebar = _interopRequireDefault(require("../../components/Sidebar"));

require("./Dashboard.css");

var actionTypes = _interopRequireWildcard(require("../../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../../store/actions/exportActionCreators"));

var _Legend = _interopRequireDefault(require("../../components/Legend"));

var _bytesToTb = _interopRequireDefault(require("../../utils/bytes-to-tb"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Dashboard/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => {
  return {
    dashboardContainer: {
      display: 'flex'
    },
    content: {
      flexGrow: 1,
      padding: theme.spacing(1),
      paddingLeft: "35px",
      paddingRight: "35px",
      width: '100%',
      boxSizing: 'border-box'
    },
    toolbar: _theme.customTheme.toolbar,
    titleContainer: {
      marginTop: theme.spacing(1)
    },
    tableContainer: {
      minHeight: '372px'
    },
    loadWrapper: {
      width: '100%',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    },
    metricContainer: {
      marginBottom: theme.spacing(1)
    },
    metricBox: {
      display: 'flex',
      alignItems: 'center',
      width: '100%',
      height: '110px',
      justifyContent: 'center',
      borderRadius: '4px'
    },
    metricTxt: {
      color: '#fff'
    },
    spaced: {
      marginTop: theme.spacing(1)
    },
    topGrid: {
      marginBottom: '-8px'
    },
    cardHeader: _objectSpread({}, _theme.customTheme.card.header, {
      marginLeft: 0
    }),
    pageHeader: {
      textAlign: 'left',
      fontSize: '16px',
      fontWeight: 'bold',
      // color: 'rgb(53, 85, 142)',
      color: '#424850'
    },
    textOverflow: {
      whiteSpace: 'nowrap',
      textOverflow: 'ellipsis',
      overflow: 'hidden'
    },
    metricsPaper: {
      minHeight: 203,
      display: 'flex',
      alignItems: 'center'
    }
  };
};

const icons = {
  FirstPage: () => _react.default.createElement(_FirstPage.default, {
    id: "Dashboard-icon-vol-firstpage",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 124
    },
    __self: void 0
  }),
  LastPage: () => _react.default.createElement(_LastPage.default, {
    id: "Dashboard-icon-vol-lastpage",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 125
    },
    __self: void 0
  }),
  NextPage: () => _react.default.createElement(_ChevronRight.default, {
    id: "Dashboard-icon-vol-nextpage",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 126
    },
    __self: void 0
  }),
  PreviousPage: () => _react.default.createElement(_ChevronLeft.default, {
    id: "Dashboard-icon-vol-previouspage",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127
    },
    __self: void 0
  }),
  ThirdStateCheck: _Remove.default,
  DetailPanel: _ChevronRight.default,
  SortArrow: _ArrowUpward.default
};

const alertIcons = _objectSpread({}, icons, {
  FirstPage: () => _react.default.createElement(_FirstPage.default, {
    id: "Dashboard-alert-vol-firstpage",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 135
    },
    __self: void 0
  }),
  LastPage: () => _react.default.createElement(_LastPage.default, {
    id: "Dashboard-alert-vol-lastpage",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 136
    },
    __self: void 0
  }),
  NextPage: () => _react.default.createElement(_ChevronRight.default, {
    id: "Dashboard-alert-vol-nextpage",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137
    },
    __self: void 0
  }),
  PreviousPage: () => _react.default.createElement(_ChevronLeft.default, {
    id: "Dashboard-alert-vol-previouspage",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138
    },
    __self: void 0
  })
});

class Dashboard extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      time: '',
      mobileOpen: false
    };
    this.interval = null;
    this.handleDrawerToggle = this.handleDrawerToggle.bind(this);
  }

  componentDidMount() {
    this.props.fetchVolumes();
    this.props.fetchStorageInfo();
    this.props.fetchPerformance();
    this.props.fetchIpAndMacInfo();
    this.props.fetchAlertsInfo();
    const today = new Date();
    const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    const date = `${months[today.getMonth()]} ${today.getDate()}, ${today.getFullYear()},`;
    const time = `${today.getHours()}:${today.getMinutes()}:${today.getSeconds()}`;
    const dateTime = `${date} ${time}`;
    this.setState({
      time: dateTime
    });
    this.props.enableFetchingAlerts(true);
    this.interval = setInterval(() => {
      this.props.fetchPerformance();
    }, 2000);
  }

  componentWillUnmount() {
    clearInterval(this.interval);
  }

  handleDrawerToggle() {
    this.setState({
      mobileOpen: !this.state.mobileOpen
    });
  }

  render() {
    let volUsedSpace = 0;
    let volSpace = 0;
    this.props.volumes.forEach(vol => {
      volUsedSpace += vol.usedspace;
      volSpace += vol.total;
    });
    const volFilledStyle = {
      width: `${volSpace * 100 / this.props.arraySize}%`,
      height: '100%',
      backgroundColor: '#e0e0e0',
      float: 'left'
    };
    const volUsedStyle = {
      width: `${volUsedSpace * 100 / volSpace}%`,
      height: '100%',
      backgroundColor: 'rgba(0, 186, 0,0.6)',
      float: 'left'
    };
    const storageFreeStyle = {
      width: `${100 - volSpace * 100 / this.props.arraySize}%`,
      height: '100%',
      color: 'black',
      marginLeft: '0px',
      float: 'left',
      overflowY: 'auto',
      display: 'inline-block',
      textAlign: 'center',
      position: 'relative',
      backgroundColor: '#fff'
    };
    const storageDangerStyle = {
      width: '10%',
      right: '0px',
      backgroundColor: '#fff',
      height: '100%',
      float: 'right',
      position: 'absolute',
      display: 'inline-block',
      borderLeft: '2px solid rgb(255, 173, 173)'
    };
    const alertColumns = [{
      title: 'Alert Name',
      field: 'alertName',
      sorting: false
    }, {
      title: 'Time Stamp',
      field: 'time',
      defaultSort: 'desc',
      sorting: false
    }, {
      title: 'Status',
      field: 'level',
      width: 100,
      sorting: false,
      render: row => {
        if (row.level === 'CRITICAL') {
          return _react.default.createElement("span", {
            style: {
              color: 'red'
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 241
            },
            __self: this
          }, row.level);
        }

        return _react.default.createElement("span", {
          style: {
            color: 'green'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 243
          },
          __self: this
        }, row.level);
      }
    }, {
      title: 'Description',
      field: 'message',
      sorting: false
    }, {
      title: 'Duration(sec)',
      field: 'duration',
      width: 150,
      sorting: false
    }];
    const volumeTableColumns = [{
      title: 'Name',
      field: 'name'
    }, {
      title: 'Used Space (GB)',
      field: 'usedspace',
      render: rowData => rowData.usedspace ? Math.round(rowData.usedspace * 100) / 100 : 0
    }, {
      title: 'Total Space (GB)',
      field: 'size'
    }];
    const classes = this.props.classes;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 281
      },
      __self: this
    }, _react.default.createElement("div", {
      className: classes.dashboardContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 282
      },
      __self: this
    }, _react.default.createElement(_Header.default, {
      toggleDrawer: this.handleDrawerToggle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 283
      },
      __self: this
    }), _react.default.createElement(_Sidebar.default, {
      mobileOpen: this.state.mobileOpen,
      toggleDrawer: this.handleDrawerToggle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 284
      },
      __self: this
    }), _react.default.createElement("main", {
      className: classes.content,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 285
      },
      __self: this
    }, _react.default.createElement("div", {
      className: classes.toolbar,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 286
      },
      __self: this
    }), _react.default.createElement(_core.Grid, {
      container: true,
      spacing: 3,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 287
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      spacing: 3,
      className: classes.titleContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 288
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      item: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 289
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.pageHeader,
      variant: "h6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 290
      },
      __self: this
    }, "Dashboard")), _react.default.createElement(_core.Grid, {
      md: 6,
      xs: 12,
      item: true,
      container: true,
      direction: "row",
      justify: "space-between",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 292
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      "data-testid": "dashboard-ip",
      variant: "body1",
      component: "span",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 293
      },
      __self: this
    }, "IP : ", this.props.ip), _react.default.createElement(_core.Typography, {
      "data-testid": "dashboard-host",
      variant: "body1",
      component: "span",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 296
      },
      __self: this
    }, "Poseidon Name : ", this.props.host), _react.default.createElement(_core.Typography, {
      "data-testid": "dashboard-mac",
      variant: "body1",
      component: "span",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 299
      },
      __self: this
    }, "MAC : ", this.props.mac))), _react.default.createElement(_core.Grid, {
      container: true,
      spacing: 1,
      className: classes.topGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 304
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      xs: 12,
      md: 6,
      item: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 305
      },
      __self: this
    }, _react.default.createElement(_core.Paper, {
      spacing: 3,
      className: classes.metricsPaper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 306
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      justify: "space-around",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 307
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      xs: 10,
      md: 3,
      className: classes.metricContainer,
      item: true,
      "spacing-xs-1": "true",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 308
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      align: "center",
      className: classes.textOverflow,
      color: "secondary",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 309
      },
      __self: this
    }, "BANDWIDTH"), _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      className: classes.metricBox,
      style: {
        backgroundColor: 'rgba(58, 108, 255,0.6'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 310
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      variant: "h2",
      "data-testid": "dashboard-bandwidth",
      className: classes.metricTxt,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 311
      },
      __self: this
    }, this.props.bw, " MBps"))), _react.default.createElement(_core.Grid, {
      xs: 10,
      md: 3,
      className: classes.metricContainer,
      item: true,
      "spacing-xs-1": "true",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 314
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      align: "center",
      className: classes.textOverflow,
      color: "secondary",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 315
      },
      __self: this
    }, "READ IOPS"), _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      className: classes.metricBox,
      style: {
        backgroundColor: 'rgba(59, 189, 179,0.7'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 316
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      variant: "h2",
      "data-testid": "read-iops",
      className: classes.metricTxt,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 317
      },
      __self: this
    }, this.props.read_iops))), _react.default.createElement(_core.Grid, {
      xs: 10,
      md: 3,
      className: classes.metricContainer,
      item: true,
      "spacing-xs-1": "true",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 326
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      align: "center",
      className: classes.textOverflow,
      color: "secondary",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 327
      },
      __self: this
    }, "WRITE IOPS"), _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      className: classes.metricBox,
      style: {
        backgroundColor: 'rgba(228, 148, 42,0.6'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 328
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      variant: "h2",
      "data-testid": "write-iops",
      className: classes.metricTxt,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 329
      },
      __self: this
    }, this.props.write_iops))))), _react.default.createElement(_core.Paper, {
      spacing: 3,
      style: {
        height: "203px"
      },
      className: classes.spaced,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 334
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      justify: "space-between",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 335
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.cardHeader,
      style: {
        marginLeft: "24px"
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 336
      },
      __self: this
    }, "Storage Details")), _react.default.createElement(_core.Grid, {
      container: true,
      justify: "center",
      alignContent: "center",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 340
      },
      __self: this
    }, this.props.arraySize === 0 ? _react.default.createElement(_core.Typography, {
      "data-testid": "dashboard-no-array",
      color: "secondary",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 342
      },
      __self: this
    }, "No Array Created") : _react.default.createElement(_react.default.Fragment, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 344
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "dashboard-size-label-container",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 345
      },
      __self: this
    }, _react.default.createElement("span", {
      className: "dashboard-min-label",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 346
      },
      __self: this
    }, "0TB"), _react.default.createElement("span", {
      className: "dashboard-max-label",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 347
      },
      __self: this
    }, (0, _bytesToTb.default)(this.props.arraySize))), _react.default.createElement("div", {
      className: "storage-detail-container",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 351
      },
      __self: this
    }, _react.default.createElement("div", {
      style: volFilledStyle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 352
      },
      __self: this
    }, _react.default.createElement("div", {
      style: volUsedStyle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 353
      },
      __self: this
    })), _react.default.createElement("div", {
      style: storageFreeStyle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 355
      },
      __self: this
    }, _react.default.createElement("div", {
      style: storageDangerStyle,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 356
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "dashboard-threshold-label",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 357
      },
      __self: this
    }, "80%")))), _react.default.createElement("div", {
      style: {
        width: '94%',
        margin: '5px auto auto',
        height: '38px',
        position: 'relative'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 361
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      wrap: "wrap",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 369
      },
      __self: this
    }, _react.default.createElement(_Legend.default, {
      bgColor: "rgba(0, 186, 0, 0.6)",
      title: `Data Written: ${(0, _bytesToTb.default)(volUsedSpace)}`,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 370
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "#e0e0e0",
      title: `Volume Space Allocated: ${(0, _bytesToTb.default)(volSpace)}`,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 374
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "#fff",
      title: `Available for Volume Creation: ${(0, _bytesToTb.default)(this.props.arraySize - volSpace)}`,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 378
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "rgb(255, 173, 173)",
      title: "Threshold",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 382
      },
      __self: this
    })), _react.default.createElement("span", {
      style: {
        width: '100%',
        marginTop: '10px',
        float: 'left',
        textAlign: 'left'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 387
      },
      __self: this
    }, "As of ", this.state.time)))))), _react.default.createElement(_core.Grid, {
      xs: 12,
      md: 6,
      item: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 404
      },
      __self: this
    }, _react.default.createElement(_core.Paper, {
      spacing: 3,
      style: {
        minHeight: "413px"
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 405
      },
      __self: this
    }, _react.default.createElement(_materialTable.default, {
      title: _react.default.createElement(_core.Typography, {
        className: classes.cardHeader,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 408
        },
        __self: this
      }, "Volume Summary"),
      columns: volumeTableColumns,
      data: this.props.volumes,
      options: {
        headerStyle: {
          backgroundColor: '#788595',
          color: '#FFF'
        },
        maxBodyHeight: 297,
        search: false
      },
      style: {
        minHeight: '413px'
      },
      icons: icons,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 406
      },
      __self: this
    })))), _react.default.createElement(_core.Grid, {
      container: true,
      spacing: 1,
      className: classes.spaced,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 428
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      xs: 12,
      item: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 429
      },
      __self: this
    }, _react.default.createElement(_core.Paper, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 430
      },
      __self: this
    }, this.props.alerts.length > 0 || this.props.fetchingAlerts === false ? _react.default.createElement(_materialTable.default, {
      title: _react.default.createElement(_core.Typography, {
        className: classes.cardHeader,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 435
        },
        __self: this
      }, "Storage Alerts"),
      "data-testid": "Dashboard-table-alert",
      options: {
        headerStyle: {
          backgroundColor: '#788595',
          color: '#FFF'
        },
        search: false
      },
      data: this.props.alerts,
      columns: alertColumns,
      icons: alertIcons,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 433
      },
      __self: this
    }) : _react.default.createElement("div", {
      className: classes.loadWrapper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 450
      },
      __self: this
    }, _react.default.createElement(_reactLoaderSpinner.default, {
      type: "Bars",
      color: "#788595",
      marginTop: "100px",
      width: "50",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 451
      },
      __self: this
    })))))))));
  }

}

const mapStateToProps = state => {
  return {
    volumes: state.dashboardReducer.volumes,
    alerts: state.dashboardReducer.alerts,
    ibofs: state.dashboardReducer.ibofs,
    unusedSpace: state.dashboardReducer.unusedSpace,
    used: state.dashboardReducer.used,
    unused: state.dashboardReducer.unused,
    read_iops: state.dashboardReducer.read_iops,
    write_iops: state.dashboardReducer.write_iops,
    bw: state.dashboardReducer.bw,
    fetchingAlerts: state.dashboardReducer.fetchingAlerts,
    ip: state.dashboardReducer.ip,
    mac: state.dashboardReducer.mac,
    host: state.dashboardReducer.host,
    arraySize: state.dashboardReducer.arraySize
  };
};

const mapDispatchToProps = dispatch => {
  return {
    enableFetchingAlerts: flag => dispatch(actionCreators.enableFetchingAlerts(flag)),
    fetchVolumes: () => dispatch({
      type: actionTypes.SAGA_FETCH_VOLUME_INFO
    }),
    fetchAlertsInfo: () => dispatch({
      type: actionTypes.SAGA_FETCH_ALERTS_INFO
    }),
    fetchStorageInfo: () => dispatch({
      type: actionTypes.SAGA_FETCH_STORAGE_INFO
    }),
    fetchPerformance: () => dispatch({
      type: actionTypes.SAGA_FETCH_PERFORMANCE_INFO
    }),
    fetchIpAndMacInfo: () => dispatch({
      type: actionTypes.SAGA_FETCH_IPANDMAC_INFO
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Dashboard));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,