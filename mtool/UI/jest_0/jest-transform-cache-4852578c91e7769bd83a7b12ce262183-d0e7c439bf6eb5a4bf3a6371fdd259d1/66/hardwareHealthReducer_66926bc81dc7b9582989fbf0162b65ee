2e1cf3aa3c60fa2cd8a813e3416c4dc9
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState = {
  network_health: [],
  software_health: [],
  hardware_health: []
};

const hardwareHealthReducer = (state = initialState, action) => {
  switch (action.type) {
    case actionTypes.HARDWARE_HEALTH_FETCH_SOFTWARE_DETAILS:
      return _objectSpread({}, state, {
        software_health: action.serverinfo
      });

    case actionTypes.HARDWARE_HEALTH_FETCH_HARDWARE_DETAILS:
      return _objectSpread({}, state, {
        hardware_health: action.serverinfo
      });

    case actionTypes.HARDWARE_HEALTH_FETCH_NETWORK_DETAILS:
      return _objectSpread({}, state, {
        network_health: action.serverinfo
      });

    default:
      return state;
  }
};

var _default = hardwareHealthReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmR3YXJlSGVhbHRoUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJuZXR3b3JrX2hlYWx0aCIsInNvZnR3YXJlX2hlYWx0aCIsImhhcmR3YXJlX2hlYWx0aCIsImhhcmR3YXJlSGVhbHRoUmVkdWNlciIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsImFjdGlvblR5cGVzIiwiSEFSRFdBUkVfSEVBTFRIX0ZFVENIX1NPRlRXQVJFX0RFVEFJTFMiLCJzZXJ2ZXJpbmZvIiwiSEFSRFdBUkVfSEVBTFRIX0ZFVENIX0hBUkRXQVJFX0RFVEFJTFMiLCJIQVJEV0FSRV9IRUFMVEhfRkVUQ0hfTkVUV09SS19ERVRBSUxTIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBMEJBOzs7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUc7QUFDakJDLEVBQUFBLGNBQWMsRUFBRSxFQURDO0FBRWpCQyxFQUFBQSxlQUFlLEVBQUUsRUFGQTtBQUdqQkMsRUFBQUEsZUFBZSxFQUFDO0FBSEMsQ0FBckI7O0FBTUEsTUFBTUMscUJBQXFCLEdBQUcsQ0FBQ0MsS0FBSyxHQUFHTCxZQUFULEVBQXVCTSxNQUF2QixLQUFrQztBQUM1RCxVQUFRQSxNQUFNLENBQUNDLElBQWY7QUFDSSxTQUFLQyxXQUFXLENBQUNDLHNDQUFqQjtBQUNJLCtCQUNPSixLQURQO0FBRUlILFFBQUFBLGVBQWUsRUFBQ0ksTUFBTSxDQUFDSTtBQUYzQjs7QUFJQSxTQUFLRixXQUFXLENBQUNHLHNDQUFqQjtBQUNJLCtCQUNPTixLQURQO0FBRUlGLFFBQUFBLGVBQWUsRUFBQ0csTUFBTSxDQUFDSTtBQUYzQjs7QUFJQSxTQUFLRixXQUFXLENBQUNJLHFDQUFqQjtBQUNKLCtCQUNPUCxLQURQO0FBRUlKLFFBQUFBLGNBQWMsRUFBQ0ssTUFBTSxDQUFDSTtBQUYxQjs7QUFJSjtBQUNJLGFBQU9MLEtBQVA7QUFqQlI7QUFtQkgsQ0FwQkQ7O2VBc0JlRCxxQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgQ09QWVJJR0hUIChjKSAyMDE5IFNBTVNVTkcgRUxFQ1RST05JQ1MgQ08uLCBMVEQuICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgIEFMTCBSSUdIVFMgUkVTRVJWRUQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCB0byBsaWNlbnNlZXMgb2YgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gICAgICAgIC9cbi8gICBwcm9kdWN0cyB0byB1c2Ugb3IgYWJzdHJhY3QgdGhpcyBjb21wdXRlciBwcm9ncmFtIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mICAgICAgICAgL1xuLyAgIGltcGxlbWVudGluZyBhIHByb2R1Y3QgYmFzZWQgb24gU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gcHJvZHVjdHMuICAgICAgICAgICAvXG4vICAgTm8gb3RoZXIgcmlnaHRzIHRvIHJlcHJvZHVjZSwgdXNlLCBvciBkaXNzZW1pbmF0ZSB0aGlzIGNvbXB1dGVyIHByb2dyYW0sICAgICAgICAgIC9cbi8gICB3aGV0aGVyIGluIHBhcnQgb3IgaW4gd2hvbGUsIGFyZSBncmFudGVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIG1ha2VzIG5vIHJlcHJlc2VudGF0aW9uIG9yIHdhcnJhbnRpZXMgd2l0aCAgICAgICAgICAvXG4vICAgcmVzcGVjdCB0byB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyBjb21wdXRlciBwcm9ncmFtLCBhbmQgc3BlY2lmaWNhbGx5IGRpc2NsYWltcyAgIC9cbi8gICBhbnkgcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYW1hZ2VzLCBzcGVjaWFsIG9yIGNvbnNlcXVlbnRpYWwsIGNvbm5lY3RlZCAgICAgICAgICAgL1xuLyAgIHdpdGggdGhlIHVzZSBvZiB0aGlzIHByb2dyYW0uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuXG5ERVNDUklQVElPTjogPENvbnRhaW5zIHJlZHVjZXIgRnVuY3Rpb25zIGZvciBoYXJkd2FyZSBjb250YWluZXI+ICpcbkBOQU1FIDogaGFyZHdhcmVIZWFsdGhSZWR1Y2VyLmpzXG5AQVVUSE9SUzogSmF5IFNhbmdoYXZpIFxuQFZlcnNpb24gOiAxLjAgKlxuQFJFVklTSU9OIEhJU1RPUllcblswMy8xMS8yMDE5XSBbSmF5XSA6IFByb3RvdHlwaW5nLi4uLi4uLi4uLi8vLy8vLy8vLy8vLy8vLy8vLy8vXG4qL1xuXG5pbXBvcnQgKiBhcyBhY3Rpb25UeXBlcyBmcm9tIFwiLi4vYWN0aW9ucy9hY3Rpb25UeXBlc1wiXG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICBuZXR3b3JrX2hlYWx0aDogW10sXG4gICAgc29mdHdhcmVfaGVhbHRoOiBbXSxcbiAgICBoYXJkd2FyZV9oZWFsdGg6W10sXG59XG5cbmNvbnN0IGhhcmR3YXJlSGVhbHRoUmVkdWNlciA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIGFjdGlvblR5cGVzLkhBUkRXQVJFX0hFQUxUSF9GRVRDSF9TT0ZUV0FSRV9ERVRBSUxTOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICBzb2Z0d2FyZV9oZWFsdGg6YWN0aW9uLnNlcnZlcmluZm8sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBhY3Rpb25UeXBlcy5IQVJEV0FSRV9IRUFMVEhfRkVUQ0hfSEFSRFdBUkVfREVUQUlMUzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgaGFyZHdhcmVfaGVhbHRoOmFjdGlvbi5zZXJ2ZXJpbmZvLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2FzZSBhY3Rpb25UeXBlcy5IQVJEV0FSRV9IRUFMVEhfRkVUQ0hfTkVUV09SS19ERVRBSUxTOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICBuZXR3b3JrX2hlYWx0aDphY3Rpb24uc2VydmVyaW5mbyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgaGFyZHdhcmVIZWFsdGhSZWR1Y2VyOyJdfQ==