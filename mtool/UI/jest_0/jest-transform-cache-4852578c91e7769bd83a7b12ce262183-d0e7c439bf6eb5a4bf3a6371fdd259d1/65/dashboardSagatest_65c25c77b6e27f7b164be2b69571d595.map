{"version":3,"sources":["dashboardSaga.test.js"],"names":["jest","mock","adapter","Adapter","describe","beforeEach","restoreAllMocks","it","dispatchedActions","axios","get","mockImplementationOnce","Promise","resolve","data","passActions","type","volumes","fetchingAlerts","fakeStore","dispatch","action","push","fetchVolumeInfo","done","expect","toHaveBeenCalledTimes","mockResolvedValue","toEqual","console","log","reject","error","alerts","fetchAlertsInfo"],"mappings":"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","sourcesContent":["import { runSaga } from 'redux-saga'\nimport axios from 'axios'\nimport { configure,} from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport {fetchVolumeInfo,fetchAlertsInfo } from \"./dashboardSaga\"\n\njest.mock('axios');\nconfigure({ adapter: new Adapter() });\n\ndescribe('<Testing Redux Sagas />', () => {\n    beforeEach(() => {\n        jest.restoreAllMocks();\n    });\n\n    it('should render fetch volume sagas', async () => {\n        const dispatchedActions = [];\n        axios.get.mockImplementationOnce(() =>\n            Promise.resolve({\n                data: ['vol1', 'vol2']\n            })\n        );\n        const passActions = [{ type: 'FETCH_VOLUME_INFO', volumes: ['vol1', 'vol2'] }, { type: 'ENABLE_FETCHING_ALERTS', fetchingAlerts: false }];\n        const fakeStore = {\n            dispatch: action => dispatchedActions.push(action)\n        }\n        await runSaga(fakeStore, fetchVolumeInfo).done;\n        expect(axios.get).toHaveBeenCalledTimes(1);\n        expect(axios.get.mockResolvedValue(['vol1', 'vol2']));\n        expect(dispatchedActions).toEqual(passActions);\n        console.log(dispatchedActions);\n    });\n\n    it('if axios api return error in fetch volume sagas', async () => {\n        const dispatchedActions = [];\n        axios.get.mockImplementationOnce(() =>\n            Promise.reject({\n                error: 'error'\n            })\n        );\n        const passActions = [{ type: 'FETCH_VOLUME_INFO', volumes: [] }, { type: 'ENABLE_FETCHING_ALERTS', fetchingAlerts: false }];\n        const fakeStore = {\n            dispatch: action => dispatchedActions.push(action)\n        }\n        await runSaga(fakeStore, fetchVolumeInfo).done;\n        expect(axios.get).toHaveBeenCalledTimes(2);\n        expect(axios.get.mockResolvedValue('error'));\n        expect(dispatchedActions).toEqual(passActions);\n        console.log(dispatchedActions);\n    });\n\n    it('should render fetch alerts info', async () => {\n        const dispatchedActions = [];\n        axios.get.mockImplementationOnce(() =>\n            Promise.resolve({\n                data:{alerts:['alerts1', 'alerts2']} \n            })\n        );\n        const passActions = [{ type: 'FETCH_ALERTS_INFO', alerts: ['alerts1', 'alerts2'] }];\n        const fakeStore = {\n            dispatch: action => dispatchedActions.push(action)\n        }\n        await runSaga(fakeStore, fetchAlertsInfo).done;\n        console.log(dispatchedActions)\n        expect(axios.get).toHaveBeenCalledTimes(3);\n        expect(axios.get.mockResolvedValue(['alerts1', 'alerts2']));\n        expect(dispatchedActions).toEqual(passActions);\n        console.log(dispatchedActions);\n    });\n\n    it('if axios api return error in fetch alerts sagas', async () => {\n        const dispatchedActions = [];\n        axios.get.mockImplementationOnce(() =>\n            Promise.reject({\n                error: 'error'\n            })\n        );\n        const passActions = [];// no actions dispatched in case of error\n        const fakeStore = {\n            dispatch: action => dispatchedActions.push(action)\n        }\n        await runSaga(fakeStore, fetchAlertsInfo).done;\n        console.log(dispatchedActions);\n        expect(axios.get).toHaveBeenCalledTimes(4);\n        expect(axios.get.mockResolvedValue('error'));\n        expect(dispatchedActions).toEqual(passActions);\n        console.log(dispatchedActions);\n    });\n});\n\n"]}