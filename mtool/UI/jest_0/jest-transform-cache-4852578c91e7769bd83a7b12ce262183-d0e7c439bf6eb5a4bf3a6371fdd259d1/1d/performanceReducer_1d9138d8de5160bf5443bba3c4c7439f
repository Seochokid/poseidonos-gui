9ad2f12636cbdd06e1918f1bc33c800c
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.initialState = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState = {
  cpuUsage: {
    yLabel: 'CPU Usage (Percentage)',
    values: [],
    loaded: false,
    name: 'CPU Usage'
  },
  diskWrite: {
    yLabel: 'Write (MB/S)',
    values: [],
    loaded: false,
    name: 'Host Storage Write'
  },
  diskUsed: {
    yLabel: 'Used (percentage)',
    values: [],
    loaded: false,
    name: 'Host Storage Usage'
  },
  readIOPS: {
    yLabel: 'KIOPS',
    values: [],
    loaded: false,
    name: 'Read IOPS'
  },
  writeIOPS: {
    yLabel: 'KIOPS',
    values: [],
    loaded: false,
    name: 'Write IOPS'
  },
  readBandwidth: {
    yLabel: 'Bandwidth (MB/s)',
    values: [],
    loaded: false,
    name: 'Read Bandwidth'
  },
  writeBandwidth: {
    yLabel: 'Bandwidth (MB/s)',
    values: [],
    loaded: false,
    name: 'Write Bandwidth'
  },
  latency: {
    yLabel: 'Latency (ns)',
    values: [],
    loaded: false,
    name: 'Latency'
  },
  power_usage: {
    yLabel: 'Watts (W)',
    values: [],
    loaded: false,
    name: 'Input Power'
  },
  vols: {}
};
exports.initialState = initialState;

const performanceReducer = (state = initialState, action) => {
  switch (action.type) {
    // case actionTypes.FETCH_DISK_USED:
    //     return {
    //         ...state,
    //         diskUsed: {
    //             ...state.diskUsed,
    //             values: action.diskUser
    //         }
    //     }
    // case actionTypes.FETCH_DISK_WRITE:
    //     return {
    //         ...state,
    //         diskWrite: {
    //             ...state.diskWrite,
    //             values: action.diskWrite
    //         }
    //     }
    case actionTypes.FETCH_CPU_USAGE:
      return _objectSpread({}, state, {
        cpuUsage: _objectSpread({}, state.cpuUsage, {
          values: action.cpuUsage
        })
      });

    case actionTypes.FETCH_READ_BANDWIDTH:
      return _objectSpread({}, state, {
        readBandwidth: _objectSpread({}, state.readBandwidth, {
          values: action.bw
        })
      });

    case actionTypes.FETCH_WRITE_BANDWIDTH:
      return _objectSpread({}, state, {
        writeBandwidth: _objectSpread({}, state.writeBandwidth, {
          values: action.bw
        })
      });

    case actionTypes.FETCH_LATENCY:
      return _objectSpread({}, state, {
        latency: _objectSpread({}, state.latency, {
          values: action.latency
        })
      });

    case actionTypes.FETCH_READ_IOPS:
      {
        return _objectSpread({}, state, {
          readIOPS: _objectSpread({}, state.readIOPS, {
            values: action.iops
          })
        });
      }

    case actionTypes.FETCH_WRITE_IOPS:
      {
        return _objectSpread({}, state, {
          writeIOPS: _objectSpread({}, state.writeIOPS, {
            values: action.iops
          })
        });
      }

    case actionTypes.FETCH_INPUT_POWER_VARIATION:
      return _objectSpread({}, state, {
        power_usage: _objectSpread({}, state.power_usage, {
          values: action.watts
        })
      });

    case actionTypes.FETCH_VOL_READ_BW:
      return _objectSpread({}, state, {
        vols: _objectSpread({}, state.vols, {
          [action.level]: _objectSpread({}, state.vols[action.level], {
            readBandwidth: {
              yLabel: 'Bandwidth (MB/s)',
              values: action.bw,
              name: `Read Bandwidth ${action.name}`,
              maxiops: action.maxiops !== 0 ? action.maxiops : null,
              maxbw: action.maxbw !== 0 ? action.maxbw : null
            }
          })
        })
      });

    case actionTypes.FETCH_VOL_WRITE_BW:
      return _objectSpread({}, state, {
        vols: _objectSpread({}, state.vols, {
          [action.level]: _objectSpread({}, state.vols[action.level], {
            writeBandwidth: {
              yLabel: 'Bandwidth (MB/s)',
              values: action.bw,
              name: `Write Bandwidth ${action.name}`,
              maxiops: action.maxiops !== 0 ? action.maxiops : null,
              maxbw: action.maxbw !== 0 ? action.maxbw : null
            }
          })
        })
      });

    case actionTypes.FETCH_VOL_READ_IOPS:
      {
        return _objectSpread({}, state, {
          vols: _objectSpread({}, state.vols, {
            [action.level]: _objectSpread({}, state.vols[action.level], {
              readIOPS: {
                yLabel: 'KIOPS',
                values: action.iops,
                name: `Read IOPS ${action.name}`,
                maxiops: action.maxiops !== 0 ? action.maxiops : null,
                maxbw: action.maxbw !== 0 ? action.maxbw : null
              }
            })
          })
        });
      }

    case actionTypes.FETCH_VOL_WRITE_IOPS:
      {
        return _objectSpread({}, state, {
          vols: _objectSpread({}, state.vols, {
            [action.level]: _objectSpread({}, state.vols[action.level], {
              writeIOPS: {
                yLabel: 'KIOPS',
                values: action.iops,
                name: `Write IOPS ${action.name}`,
                maxiops: action.maxiops !== 0 ? action.maxiops : null,
                maxbw: action.maxbw !== 0 ? action.maxbw : null
              }
            })
          })
        });
      }

    case actionTypes.FETCH_VOL_LATENCY:
      {
        return _objectSpread({}, state, {
          vols: _objectSpread({}, state.vols, {
            [action.level]: _objectSpread({}, state.vols[action.level], {
              latency: {
                yLabel: 'Latency (ns)',
                values: action.latency,
                name: `Latency ${action.name}` // maxiops: action.maxiops !== 0 ? action.maxiops: null,
                // maxbw: action.maxbw !== 0 ? action.maxbw : null

              }
            })
          })
        });
      }

    case actionTypes.RESET_PERF_STATE:
      {
        return _objectSpread({}, initialState);
      }

    default:
      return state;
  }
};

var _default = performanceReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,