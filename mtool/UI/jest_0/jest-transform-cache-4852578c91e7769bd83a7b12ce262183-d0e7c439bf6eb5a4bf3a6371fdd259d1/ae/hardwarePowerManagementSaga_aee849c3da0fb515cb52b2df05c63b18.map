{"version":3,"sources":["hardwarePowerManagementSaga.js"],"names":["fetchPowerSummary","response","call","axios","get","headers","Accept","localStorage","getItem","result","data","put","actionCreators","currentpowermode","fetchChassisFrontInfo","error","setCurrentPowerMode","action","post","param","status","openAlertBox","alertOpen","istypealert","alerttype","alerttitle","alertdescription","changeCurrentPowerState","setTimeout","hardwarePowerManagementWatcher","takeEvery","actionTypes","SAGA_HARDWARE_POWER_MANAGEMENT_FETCH_POWER_SUMMARY_INFORMATION","SAGA_HARDWARE_POWER_MANAGEMENT_SET_CURRENT_POWER_MODE","SAGA_HARDWARE_POWER_MANAGEMENT_CHANGE_CURRENT_POWER_STATE"],"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\nDESCRIPTION: <Contains Generator Functions for hardware container> *\n@NAME : hardwarePowerManagementSaga.js\n@AUTHORS: Jay Sanghavi \n@Version : 1.0 *\n@REVISION HISTORY\n[03/11/2019] [Jay] : Prototyping..........////////////////////\n*/\n\nimport axios from 'axios';\nimport { call, takeEvery, put } from 'redux-saga/effects';\nimport * as actionTypes from '../store/actions/actionTypes';\nimport * as actionCreators from '../store/actions/exportActionCreators';\nimport {fetchChassisFrontInfo} from './hardwareOverviewSaga'\n\nexport function* fetchPowerSummary() {\n    try {\n        const response = yield call([axios, axios.get], '/api/v1.0/get_power_summary/', {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            }\n        });\n\n        const result = response.data;\n        if (result) {\n            yield put(actionCreators.fetchPowerSummary(result)); // Get Current Power Mode\n            if(result.currentpowermode && result.currentpowermode === \"Manual\")\n                yield fetchChassisFrontInfo();\n        }\n    } catch (error) {\n        yield put(actionCreators.fetchPowerSummary({}));\n    }\n    finally {\n        ;\n    }\n}\n\n\nexport function* setCurrentPowerMode(action) {\n    try {\n        const response = yield call([axios, axios.post], '/api/v1.0/set_current_power_mode/', action.param, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            },\n        });\n\n        const { status } = response;\n        if (status === 200) {\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'info',\n                alerttitle: 'Power Mode',\n                alertdescription: 'Power Mode Changed Successfully',\n            }));\n        }\n        else if (response === 400)\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                alerttitle: 'Power Mode',\n                alertdescription: \"Couldn't Change Power Mode\",\n            }));\n        else\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                alerttitle: 'Power Mode',\n                alertdescription: \"Couldn't Change Power Mode\",\n            }));\n            yield fetchPowerSummary();\n    }\n    catch (error) {\n        ;\n    }\n}\n\n\nexport function* changeCurrentPowerState(action) {\n    try {\n        const response = yield call([axios, axios.post], '/api/v1.0/update_current_power_state/', action.param, {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            },\n        });\n\n        const { status } = response;\n        if (status === 200) {\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'info',\n                alerttitle: 'Power State',\n                alertdescription: 'Power State Change is in progress. The table should automatically update the new power state after sometime',\n            }));\n        }\n        else if (response === 400)\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                alerttitle: 'Power State',\n                alertdescription: \"Couldn't Change Power State\",\n            }));\n        else\n            yield put(actionCreators.openAlertBox({\n                alertOpen: true,\n                istypealert: true,\n                alerttype: 'alert',\n                alerttitle: 'Power State',\n                alertdescription: \"Couldn't Change Power State\",\n            }));\n            // (yield fetchChassisFrontInfo());\n            setTimeout(yield fetchChassisFrontInfo(),2500);\n            setTimeout(yield fetchChassisFrontInfo(),2500);\n    }\n    catch (error) {\n        yield fetchChassisFrontInfo();\n        yield put(actionCreators.openAlertBox({\n            alertOpen: true,\n            istypealert: true,\n            alerttype: 'alert',\n            alerttitle: 'Power State',\n            alertdescription: \"Couldn't Change Power State\",\n        }));\n    }\n}\n\nexport function* hardwarePowerManagementWatcher() {\n    yield takeEvery(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_FETCH_POWER_SUMMARY_INFORMATION, fetchPowerSummary);\n    yield takeEvery(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_SET_CURRENT_POWER_MODE, setCurrentPowerMode);\n    yield takeEvery(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_CHANGE_CURRENT_POWER_STATE,changeCurrentPowerState);\n}\n"]}