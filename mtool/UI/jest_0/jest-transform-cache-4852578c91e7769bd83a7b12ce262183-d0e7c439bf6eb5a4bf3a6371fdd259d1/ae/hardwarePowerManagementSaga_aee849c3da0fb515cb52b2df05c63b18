9a636aa5aef987831e95605c5f7a6a72
/* istanbul ignore next */
"use strict";

var cov_24eb7q7of4 = function () {
  var path = "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/hardwarePowerManagementSaga.js";
  var hash = "125a6c78087bebff901643d8c8af400038bd39bc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/hardwarePowerManagementSaga.js",
    statementMap: {
      "0": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "1": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 41,
          column: 10
        }
      },
      "2": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 36
        }
      },
      "3": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "4": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 64
        }
      },
      "5": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 47,
          column: 46
        }
      },
      "6": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 46
        }
      },
      "7": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 56
        }
      },
      "8": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "9": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "10": {
        start: {
          line: 68,
          column: 27
        },
        end: {
          line: 68,
          column: 35
        }
      },
      "11": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 93,
          column: 16
        }
      },
      "12": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 76,
          column: 16
        }
      },
      "13": {
        start: {
          line: 78,
          column: 13
        },
        end: {
          line: 93,
          column: 16
        }
      },
      "14": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 85,
          column: 16
        }
      },
      "15": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 93,
          column: 16
        }
      },
      "16": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 38
        }
      },
      "17": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "18": {
        start: {
          line: 104,
          column: 25
        },
        end: {
          line: 110,
          column: 10
        }
      },
      "19": {
        start: {
          line: 112,
          column: 27
        },
        end: {
          line: 112,
          column: 35
        }
      },
      "20": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 137,
          column: 16
        }
      },
      "21": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 120,
          column: 16
        }
      },
      "22": {
        start: {
          line: 122,
          column: 13
        },
        end: {
          line: 137,
          column: 16
        }
      },
      "23": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 129,
          column: 16
        }
      },
      "24": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 137,
          column: 16
        }
      },
      "25": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 59
        }
      },
      "26": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 59
        }
      },
      "27": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 38
        }
      },
      "28": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 150,
          column: 12
        }
      },
      "29": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 155,
          column: 115
        }
      },
      "30": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 156,
          column: 108
        }
      },
      "31": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 157,
          column: 115
        }
      }
    },
    fnMap: {
      "0": {
        name: "fetchPowerSummary",
        decl: {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 33,
            column: 34
          }
        },
        loc: {
          start: {
            line: 33,
            column: 37
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 33
      },
      "1": {
        name: "setCurrentPowerMode",
        decl: {
          start: {
            line: 58,
            column: 17
          },
          end: {
            line: 58,
            column: 36
          }
        },
        loc: {
          start: {
            line: 58,
            column: 45
          },
          end: {
            line: 99,
            column: 1
          }
        },
        line: 58
      },
      "2": {
        name: "changeCurrentPowerState",
        decl: {
          start: {
            line: 102,
            column: 17
          },
          end: {
            line: 102,
            column: 40
          }
        },
        loc: {
          start: {
            line: 102,
            column: 49
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 102
      },
      "3": {
        name: "hardwarePowerManagementWatcher",
        decl: {
          start: {
            line: 154,
            column: 17
          },
          end: {
            line: 154,
            column: 47
          }
        },
        loc: {
          start: {
            line: 154,
            column: 50
          },
          end: {
            line: 158,
            column: 1
          }
        },
        line: 154
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 47,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 47,
            column: 46
          }
        }, {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 47,
            column: 46
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 46,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 46,
            column: 38
          }
        }, {
          start: {
            line: 46,
            column: 42
          },
          end: {
            line: 46,
            column: 78
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 93,
            column: 16
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 93,
            column: 16
          }
        }, {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 93,
            column: 16
          }
        }],
        line: 69
      },
      "4": {
        loc: {
          start: {
            line: 78,
            column: 13
          },
          end: {
            line: 93,
            column: 16
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 13
          },
          end: {
            line: 93,
            column: 16
          }
        }, {
          start: {
            line: 78,
            column: 13
          },
          end: {
            line: 93,
            column: 16
          }
        }],
        line: 78
      },
      "5": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 137,
            column: 16
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 137,
            column: 16
          }
        }, {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 137,
            column: 16
          }
        }],
        line: 113
      },
      "6": {
        loc: {
          start: {
            line: 122,
            column: 13
          },
          end: {
            line: 137,
            column: 16
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 13
          },
          end: {
            line: 137,
            column: 16
          }
        }, {
          start: {
            line: 122,
            column: 13
          },
          end: {
            line: 137,
            column: 16
          }
        }],
        line: 122
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "125a6c78087bebff901643d8c8af400038bd39bc"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchPowerSummary = fetchPowerSummary;
exports.setCurrentPowerMode = setCurrentPowerMode;
exports.changeCurrentPowerState = changeCurrentPowerState;
exports.hardwarePowerManagementWatcher = hardwarePowerManagementWatcher;

var
/* istanbul ignore next */
_axios = _interopRequireDefault(require("axios"));

var
/* istanbul ignore next */
_effects = require("redux-saga/effects");

var
/* istanbul ignore next */
actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var
/* istanbul ignore next */
actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

var
/* istanbul ignore next */
_hardwareOverviewSaga = require("./hardwareOverviewSaga");

function* fetchPowerSummary() {
  /* istanbul ignore next */
  cov_24eb7q7of4.f[0]++;
  cov_24eb7q7of4.s[0]++;

  try {
    const response =
    /* istanbul ignore next */
    (cov_24eb7q7of4.s[1]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.get], '/api/v1.0/get_power_summary/', {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));
    const result =
    /* istanbul ignore next */
    (cov_24eb7q7of4.s[2]++, response.data);

    /* istanbul ignore next */
    cov_24eb7q7of4.s[3]++;

    if (result) {
      /* istanbul ignore next */
      cov_24eb7q7of4.b[0][0]++;
      cov_24eb7q7of4.s[4]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.fetchPowerSummary(result))
      ); // Get Current Power Mode

      /* istanbul ignore next */
      cov_24eb7q7of4.s[5]++;

      if (
      /* istanbul ignore next */
      (cov_24eb7q7of4.b[2][0]++, result.currentpowermode) &&
      /* istanbul ignore next */
      (cov_24eb7q7of4.b[2][1]++, result.currentpowermode === "Manual")) {
        /* istanbul ignore next */
        cov_24eb7q7of4.b[1][0]++;
        cov_24eb7q7of4.s[6]++;
        yield (
          /* istanbul ignore next */
          (0,
          /* istanbul ignore next */
          _hardwareOverviewSaga.
          /* istanbul ignore next */
          fetchChassisFrontInfo)()
        );
      } else
      /* istanbul ignore next */
      {
        cov_24eb7q7of4.b[1][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_24eb7q7of4.b[0][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_24eb7q7of4.s[7]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.fetchPowerSummary({}))
    );
  } finally {
    ;
  }
}

function* setCurrentPowerMode(action) {
  /* istanbul ignore next */
  cov_24eb7q7of4.f[1]++;
  cov_24eb7q7of4.s[8]++;

  try {
    const response =
    /* istanbul ignore next */
    (cov_24eb7q7of4.s[9]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.post], '/api/v1.0/set_current_power_mode/', action.param, {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    const _ref = (cov_24eb7q7of4.s[10]++, response),
          status = _ref.status;

    /* istanbul ignore next */
    cov_24eb7q7of4.s[11]++;

    if (status === 200) {
      /* istanbul ignore next */
      cov_24eb7q7of4.b[3][0]++;
      cov_24eb7q7of4.s[12]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.openAlertBox({
          alertOpen: true,
          istypealert: true,
          alerttype: 'info',
          alerttitle: 'Power Mode',
          alertdescription: 'Power Mode Changed Successfully'
        }))
      );
    } else {
      /* istanbul ignore next */
      cov_24eb7q7of4.b[3][1]++;
      cov_24eb7q7of4.s[13]++;

      if (response === 400) {
        /* istanbul ignore next */
        cov_24eb7q7of4.b[4][0]++;
        cov_24eb7q7of4.s[14]++;
        yield (
          /* istanbul ignore next */
          (0,
          /* istanbul ignore next */
          _effects.
          /* istanbul ignore next */
          put)(actionCreators.openAlertBox({
            alertOpen: true,
            istypealert: true,
            alerttype: 'alert',
            alerttitle: 'Power Mode',
            alertdescription: "Couldn't Change Power Mode"
          }))
        );
      } else {
        /* istanbul ignore next */
        cov_24eb7q7of4.b[4][1]++;
        cov_24eb7q7of4.s[15]++;
        yield (
          /* istanbul ignore next */
          (0,
          /* istanbul ignore next */
          _effects.
          /* istanbul ignore next */
          put)(actionCreators.openAlertBox({
            alertOpen: true,
            istypealert: true,
            alerttype: 'alert',
            alerttitle: 'Power Mode',
            alertdescription: "Couldn't Change Power Mode"
          }))
        );
      }
    }

    /* istanbul ignore next */
    cov_24eb7q7of4.s[16]++;
    yield fetchPowerSummary();
  } catch (error) {
    ;
  }
}

function* changeCurrentPowerState(action) {
  /* istanbul ignore next */
  cov_24eb7q7of4.f[2]++;
  cov_24eb7q7of4.s[17]++;

  try {
    const response =
    /* istanbul ignore next */
    (cov_24eb7q7of4.s[18]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.post], '/api/v1.0/update_current_power_state/', action.param, {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    const _ref2 = (cov_24eb7q7of4.s[19]++, response),
          status = _ref2.status;

    /* istanbul ignore next */
    cov_24eb7q7of4.s[20]++;

    if (status === 200) {
      /* istanbul ignore next */
      cov_24eb7q7of4.b[5][0]++;
      cov_24eb7q7of4.s[21]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.openAlertBox({
          alertOpen: true,
          istypealert: true,
          alerttype: 'info',
          alerttitle: 'Power State',
          alertdescription: 'Power State Change is in progress. The table should automatically update the new power state after sometime'
        }))
      );
    } else {
      /* istanbul ignore next */
      cov_24eb7q7of4.b[5][1]++;
      cov_24eb7q7of4.s[22]++;

      if (response === 400) {
        /* istanbul ignore next */
        cov_24eb7q7of4.b[6][0]++;
        cov_24eb7q7of4.s[23]++;
        yield (
          /* istanbul ignore next */
          (0,
          /* istanbul ignore next */
          _effects.
          /* istanbul ignore next */
          put)(actionCreators.openAlertBox({
            alertOpen: true,
            istypealert: true,
            alerttype: 'alert',
            alerttitle: 'Power State',
            alertdescription: "Couldn't Change Power State"
          }))
        );
      } else {
        /* istanbul ignore next */
        cov_24eb7q7of4.b[6][1]++;
        cov_24eb7q7of4.s[24]++;
        yield (
          /* istanbul ignore next */
          (0,
          /* istanbul ignore next */
          _effects.
          /* istanbul ignore next */
          put)(actionCreators.openAlertBox({
            alertOpen: true,
            istypealert: true,
            alerttype: 'alert',
            alerttitle: 'Power State',
            alertdescription: "Couldn't Change Power State"
          }))
        );
      }
    } // (yield fetchChassisFrontInfo());


    /* istanbul ignore next */
    cov_24eb7q7of4.s[25]++;
    setTimeout((yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _hardwareOverviewSaga.
      /* istanbul ignore next */
      fetchChassisFrontInfo)()
    )), 2500);

    /* istanbul ignore next */
    cov_24eb7q7of4.s[26]++;
    setTimeout((yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _hardwareOverviewSaga.
      /* istanbul ignore next */
      fetchChassisFrontInfo)()
    )), 2500);
  } catch (error) {
    /* istanbul ignore next */
    cov_24eb7q7of4.s[27]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _hardwareOverviewSaga.
      /* istanbul ignore next */
      fetchChassisFrontInfo)()
    );

    /* istanbul ignore next */
    cov_24eb7q7of4.s[28]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'alert',
        alerttitle: 'Power State',
        alertdescription: "Couldn't Change Power State"
      }))
    );
  }
}

function* hardwarePowerManagementWatcher() {
  /* istanbul ignore next */
  cov_24eb7q7of4.f[3]++;
  cov_24eb7q7of4.s[29]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_FETCH_POWER_SUMMARY_INFORMATION, fetchPowerSummary)
  );

  /* istanbul ignore next */
  cov_24eb7q7of4.s[30]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_SET_CURRENT_POWER_MODE, setCurrentPowerMode)
  );

  /* istanbul ignore next */
  cov_24eb7q7of4.s[31]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_CHANGE_CURRENT_POWER_STATE, changeCurrentPowerState)
  );
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,