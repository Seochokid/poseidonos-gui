db84e18f1512d4961d07042bcc5a7bcc
/* istanbul ignore next */
"use strict";

var cov_2mcrwfgn93 = function () {
  var path = "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/hardwareHealthSaga.js";
  var hash = "117c4f23609394977e2a3554a17b81c1568c733b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/hardwareHealthSaga.js",
    statementMap: {
      "0": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 51,
          column: 5
        }
      },
      "1": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "2": {
        start: {
          line: 42,
          column: 23
        },
        end: {
          line: 42,
          column: 36
        }
      },
      "3": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "4": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 83
        }
      },
      "5": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 59
        }
      },
      "6": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "7": {
        start: {
          line: 58,
          column: 25
        },
        end: {
          line: 64,
          column: 10
        }
      },
      "8": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 47
        }
      },
      "9": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 36
        }
      },
      "10": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "11": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 83
        }
      },
      "12": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "13": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 59
        }
      },
      "14": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 47
        }
      },
      "15": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "16": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 88,
          column: 10
        }
      },
      "17": {
        start: {
          line: 90,
          column: 23
        },
        end: {
          line: 90,
          column: 36
        }
      },
      "18": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "19": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 81
        }
      },
      "20": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 58
        }
      },
      "21": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 99
        }
      },
      "22": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 99
        }
      },
      "23": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 105,
          column: 97
        }
      }
    },
    fnMap: {
      "0": {
        name: "fetchSoftwareDetails",
        decl: {
          start: {
            line: 32,
            column: 17
          },
          end: {
            line: 32,
            column: 37
          }
        },
        loc: {
          start: {
            line: 32,
            column: 40
          },
          end: {
            line: 52,
            column: 1
          }
        },
        line: 32
      },
      "1": {
        name: "fetchHardwareDetails",
        decl: {
          start: {
            line: 54,
            column: 17
          },
          end: {
            line: 54,
            column: 37
          }
        },
        loc: {
          start: {
            line: 54,
            column: 40
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 54
      },
      "2": {
        name: "fetchNetworkDetails",
        decl: {
          start: {
            line: 80,
            column: 17
          },
          end: {
            line: 80,
            column: 36
          }
        },
        loc: {
          start: {
            line: 80,
            column: 39
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 80
      },
      "3": {
        name: "hardwareHealthWatcher",
        decl: {
          start: {
            line: 102,
            column: 17
          },
          end: {
            line: 102,
            column: 38
          }
        },
        loc: {
          start: {
            line: 102,
            column: 41
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 102
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }],
        line: 67
      },
      "2": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }],
        line: 91
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "117c4f23609394977e2a3554a17b81c1568c733b"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchSoftwareDetails = fetchSoftwareDetails;
exports.fetchHardwareDetails = fetchHardwareDetails;
exports.fetchNetworkDetails = fetchNetworkDetails;
exports.hardwareHealthWatcher = hardwareHealthWatcher;

var
/* istanbul ignore next */
_axios = _interopRequireDefault(require("axios"));

var
/* istanbul ignore next */
_effects = require("redux-saga/effects");

var
/* istanbul ignore next */
actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var
/* istanbul ignore next */
actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

function* fetchSoftwareDetails() {
  /* istanbul ignore next */
  cov_2mcrwfgn93.f[0]++;
  cov_2mcrwfgn93.s[0]++;

  try {
    const response =
    /* istanbul ignore next */
    (cov_2mcrwfgn93.s[1]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.get], '/api/v1.0/get_software_health/', {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));
    const result =
    /* istanbul ignore next */
    (cov_2mcrwfgn93.s[2]++, response.data);

    /* istanbul ignore next */
    cov_2mcrwfgn93.s[3]++;

    if (result) {
      /* istanbul ignore next */
      cov_2mcrwfgn93.b[0][0]++;
      cov_2mcrwfgn93.s[4]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.fetchSoftwareDetails(result.software_health))
      );
    } else
    /* istanbul ignore next */
    {
      cov_2mcrwfgn93.b[0][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2mcrwfgn93.s[5]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.fetchSoftwareDetails([]))
    );
  } finally {
    ;
  }
}

function* fetchHardwareDetails() {
  /* istanbul ignore next */
  cov_2mcrwfgn93.f[1]++;
  cov_2mcrwfgn93.s[6]++;

  try {
    // yield put(actionCreators.startLoader('Fetching BMC Information'));
    const response =
    /* istanbul ignore next */
    (cov_2mcrwfgn93.s[7]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.get], '/api/v1.0/get_hardware_health/', {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    cov_2mcrwfgn93.s[8]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.stopLoader())
    );
    const result =
    /* istanbul ignore next */
    (cov_2mcrwfgn93.s[9]++, response.data);

    /* istanbul ignore next */
    cov_2mcrwfgn93.s[10]++;

    if (result) {
      /* istanbul ignore next */
      cov_2mcrwfgn93.b[1][0]++;
      cov_2mcrwfgn93.s[11]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.fetchHardwareDetails(result.hardware_health))
      );
    } else
    /* istanbul ignore next */
    {
      cov_2mcrwfgn93.b[1][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2mcrwfgn93.s[12]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.stopLoader())
    );

    /* istanbul ignore next */
    cov_2mcrwfgn93.s[13]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.fetchHardwareDetails([]))
    );
  } finally {
    /* istanbul ignore next */
    cov_2mcrwfgn93.s[14]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.stopLoader())
    );
    ;
  }
}

function* fetchNetworkDetails() {
  /* istanbul ignore next */
  cov_2mcrwfgn93.f[2]++;
  cov_2mcrwfgn93.s[15]++;

  try {
    const response =
    /* istanbul ignore next */
    (cov_2mcrwfgn93.s[16]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.get], '/api/v1.0/get_network_health/', {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));
    const result =
    /* istanbul ignore next */
    (cov_2mcrwfgn93.s[17]++, response.data);

    /* istanbul ignore next */
    cov_2mcrwfgn93.s[18]++;

    if (result) {
      /* istanbul ignore next */
      cov_2mcrwfgn93.b[2][0]++;
      cov_2mcrwfgn93.s[19]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.fetchNetworkDetails(result.network_health))
      );
    } else
    /* istanbul ignore next */
    {
      cov_2mcrwfgn93.b[2][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2mcrwfgn93.s[20]++;
    yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      put)(actionCreators.fetchNetworkDetails([]))
    );
  } finally {
    ;
  }
}

function* hardwareHealthWatcher() {
  /* istanbul ignore next */
  cov_2mcrwfgn93.f[3]++;
  cov_2mcrwfgn93.s[21]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_HARDWARE_HEALTH_FETCH_SOFTWARE_DETAILS, fetchSoftwareDetails)
  );

  /* istanbul ignore next */
  cov_2mcrwfgn93.s[22]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_HARDWARE_HEALTH_FETCH_HARDWARE_DETAILS, fetchHardwareDetails)
  );

  /* istanbul ignore next */
  cov_2mcrwfgn93.s[23]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_HARDWARE_HEALTH_FETCH_NETWORK_DETAILS, fetchNetworkDetails)
  );
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmR3YXJlSGVhbHRoU2FnYS5qcyJdLCJuYW1lcyI6WyJmZXRjaFNvZnR3YXJlRGV0YWlscyIsInJlc3BvbnNlIiwiY2FsbCIsImF4aW9zIiwiZ2V0IiwiaGVhZGVycyIsIkFjY2VwdCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJyZXN1bHQiLCJkYXRhIiwicHV0IiwiYWN0aW9uQ3JlYXRvcnMiLCJzb2Z0d2FyZV9oZWFsdGgiLCJlcnJvciIsImZldGNoSGFyZHdhcmVEZXRhaWxzIiwic3RvcExvYWRlciIsImhhcmR3YXJlX2hlYWx0aCIsImZldGNoTmV0d29ya0RldGFpbHMiLCJuZXR3b3JrX2hlYWx0aCIsImhhcmR3YXJlSGVhbHRoV2F0Y2hlciIsInRha2VFdmVyeSIsImFjdGlvblR5cGVzIiwiU0FHQV9IQVJEV0FSRV9IRUFMVEhfRkVUQ0hfU09GVFdBUkVfREVUQUlMUyIsIlNBR0FfSEFSRFdBUkVfSEVBTFRIX0ZFVENIX0hBUkRXQVJFX0RFVEFJTFMiLCJTQUdBX0hBUkRXQVJFX0hFQUxUSF9GRVRDSF9ORVRXT1JLX0RFVEFJTFMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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O0FBQ0g7QUFDSjs7QUFFTSxVQUFVRSxxQkFBVixHQUFrQztBQUFBO0FBQUE7QUFBQTtBQUNyQyxRQUFNO0FBQUE7QUFBQTtBQUFBQztBQUFBQTtBQUFBQTtBQUFBQSxlQUFVQyxXQUFXLENBQUNDLDJDQUF0QixFQUFtRXZCLG9CQUFuRTtBQUFOOztBQURxQztBQUFBO0FBRXJDLFFBQU07QUFBQTtBQUFBO0FBQUFxQjtBQUFBQTtBQUFBQTtBQUFBQSxlQUFVQyxXQUFXLENBQUNFLDJDQUF0QixFQUFtRVQsb0JBQW5FO0FBQU47O0FBRnFDO0FBQUE7QUFHckMsUUFBTTtBQUFBO0FBQUE7QUFBQU07QUFBQUE7QUFBQUE7QUFBQUEsZUFBVUMsV0FBVyxDQUFDRywwQ0FBdEIsRUFBa0VQLG1CQUFsRTtBQUFOO0FBRUgiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgIENPUFlSSUdIVCAoYykgMjAxOSBTQU1TVU5HIEVMRUNUUk9OSUNTIENPLiwgTFRELiAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICBBTEwgUklHSFRTIFJFU0VSVkVEICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQgdG8gbGljZW5zZWVzIG9mIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuICAgICAgICAvXG4vICAgcHJvZHVjdHMgdG8gdXNlIG9yIGFic3RyYWN0IHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSBmb3IgdGhlIHNvbGUgcHVycG9zZSBvZiAgICAgICAgIC9cbi8gICBpbXBsZW1lbnRpbmcgYSBwcm9kdWN0IGJhc2VkIG9uIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIHByb2R1Y3RzLiAgICAgICAgICAgL1xuLyAgIE5vIG90aGVyIHJpZ2h0cyB0byByZXByb2R1Y2UsIHVzZSwgb3IgZGlzc2VtaW5hdGUgdGhpcyBjb21wdXRlciBwcm9ncmFtLCAgICAgICAgICAvXG4vICAgd2hldGhlciBpbiBwYXJ0IG9yIGluIHdob2xlLCBhcmUgZ3JhbnRlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8gXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBtYWtlcyBubyByZXByZXNlbnRhdGlvbiBvciB3YXJyYW50aWVzIHdpdGggICAgICAgICAgL1xuLyAgIHJlc3BlY3QgdG8gdGhlIHBlcmZvcm1hbmNlIG9mIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgYW5kIHNwZWNpZmljYWxseSBkaXNjbGFpbXMgICAvXG4vICAgYW55IHJlc3BvbnNpYmlsaXR5IGZvciBhbnkgZGFtYWdlcywgc3BlY2lhbCBvciBjb25zZXF1ZW50aWFsLCBjb25uZWN0ZWQgICAgICAgICAgIC9cbi8gICB3aXRoIHRoZSB1c2Ugb2YgdGhpcyBwcm9ncmFtLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cblxuREVTQ1JJUFRJT046IDxDb250YWlucyBHZW5lcmF0b3IgRnVuY3Rpb25zIGZvciBoYXJkd2FyZSBjb250YWluZXI+ICpcbkBOQU1FIDogaGFyZHdhcmVIZWFsdGhTYWdhLmpzXG5AQVVUSE9SUzogSmF5IFNhbmdoYXZpIFxuQFZlcnNpb24gOiAxLjAgKlxuQFJFVklTSU9OIEhJU1RPUllcblswMy8xMS8yMDE5XSBbSmF5XSA6IFByb3RvdHlwaW5nLi4uLi4uLi4uLi8vLy8vLy8vLy8vLy8vLy8vLy8vXG4qL1xuXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgY2FsbCwgdGFrZUV2ZXJ5LCBwdXQgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSAnLi4vc3RvcmUvYWN0aW9ucy9hY3Rpb25UeXBlcyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25DcmVhdG9ycyBmcm9tICcuLi9zdG9yZS9hY3Rpb25zL2V4cG9ydEFjdGlvbkNyZWF0b3JzJztcblxuZXhwb3J0IGZ1bmN0aW9uKiBmZXRjaFNvZnR3YXJlRGV0YWlscygpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIGNhbGwoW2F4aW9zLCBheGlvcy5nZXRdLCAnL2FwaS92MS4wL2dldF9zb2Z0d2FyZV9oZWFsdGgvJywge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ3gtYWNjZXNzLXRva2VuJzogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyksXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHlpZWxkIHB1dChhY3Rpb25DcmVhdG9ycy5mZXRjaFNvZnR3YXJlRGV0YWlscyhyZXN1bHQuc29mdHdhcmVfaGVhbHRoKSk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB5aWVsZCBwdXQoYWN0aW9uQ3JlYXRvcnMuZmV0Y2hTb2Z0d2FyZURldGFpbHMoW10pKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIDtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogZmV0Y2hIYXJkd2FyZURldGFpbHMoKSB7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgLy8geWllbGQgcHV0KGFjdGlvbkNyZWF0b3JzLnN0YXJ0TG9hZGVyKCdGZXRjaGluZyBCTUMgSW5mb3JtYXRpb24nKSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgY2FsbChbYXhpb3MsIGF4aW9zLmdldF0sICcvYXBpL3YxLjAvZ2V0X2hhcmR3YXJlX2hlYWx0aC8nLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHlpZWxkIHB1dChhY3Rpb25DcmVhdG9ycy5zdG9wTG9hZGVyKCkpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICB5aWVsZCBwdXQoYWN0aW9uQ3JlYXRvcnMuZmV0Y2hIYXJkd2FyZURldGFpbHMocmVzdWx0LmhhcmR3YXJlX2hlYWx0aCkpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgeWllbGQgcHV0KGFjdGlvbkNyZWF0b3JzLnN0b3BMb2FkZXIoKSk7XG4gICAgICAgIHlpZWxkIHB1dChhY3Rpb25DcmVhdG9ycy5mZXRjaEhhcmR3YXJlRGV0YWlscyhbXSkpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgeWllbGQgcHV0KGFjdGlvbkNyZWF0b3JzLnN0b3BMb2FkZXIoKSk7XG4gICAgICAgIDtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogZmV0Y2hOZXR3b3JrRGV0YWlscygpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIGNhbGwoW2F4aW9zLCBheGlvcy5nZXRdLCAnL2FwaS92MS4wL2dldF9uZXR3b3JrX2hlYWx0aC8nLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgeWllbGQgcHV0KGFjdGlvbkNyZWF0b3JzLmZldGNoTmV0d29ya0RldGFpbHMocmVzdWx0Lm5ldHdvcmtfaGVhbHRoKSk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB5aWVsZCBwdXQoYWN0aW9uQ3JlYXRvcnMuZmV0Y2hOZXR3b3JrRGV0YWlscyhbXSkpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBoYXJkd2FyZUhlYWx0aFdhdGNoZXIoKSB7XG4gICAgeWllbGQgdGFrZUV2ZXJ5KGFjdGlvblR5cGVzLlNBR0FfSEFSRFdBUkVfSEVBTFRIX0ZFVENIX1NPRlRXQVJFX0RFVEFJTFMsIGZldGNoU29mdHdhcmVEZXRhaWxzKTtcbiAgICB5aWVsZCB0YWtlRXZlcnkoYWN0aW9uVHlwZXMuU0FHQV9IQVJEV0FSRV9IRUFMVEhfRkVUQ0hfSEFSRFdBUkVfREVUQUlMUywgZmV0Y2hIYXJkd2FyZURldGFpbHMpO1xuICAgIHlpZWxkIHRha2VFdmVyeShhY3Rpb25UeXBlcy5TQUdBX0hBUkRXQVJFX0hFQUxUSF9GRVRDSF9ORVRXT1JLX0RFVEFJTFMsIGZldGNoTmV0d29ya0RldGFpbHMpO1xuXG59XG4iXX0=