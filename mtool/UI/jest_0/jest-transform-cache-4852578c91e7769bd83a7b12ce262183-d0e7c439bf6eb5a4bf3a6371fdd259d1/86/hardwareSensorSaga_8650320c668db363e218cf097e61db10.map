{"version":3,"sources":["hardwareSensorSaga.js"],"names":["fetchPowerSensorInfo","response","axios","get","headers","Accept","localStorage","getItem","actionCreators","stopLoader","result","data","power_sensor_info","error","fetchFanSensorInfo","startLoader","fan_sensor_info","fetchTemperatureSensorInfo","temperature_sensor_info","hardwareSensorWatcher","actionTypes","SAGA_HARDWARE_SENSORS_FETCH_POWER_SENSOR_INFORMATION","SAGA_HARDWARE_SENSORS_FETCH_FAN_SENSOR_INFORMATION","SAGA_HARDWARE_SENSORS_FETCH_TEMPERATURE_SENSOR_INFORMATION"],"mappings":"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\nDESCRIPTION: <Contains Generator Functions for hardware container> *\n@NAME : hardwareSensorSaga.js\n@AUTHORS: Jay Sanghavi \n@Version : 1.0 *\n@REVISION HISTORY\n[03/11/2019] [Jay] : Prototyping..........////////////////////\n*/\n\nimport axios from 'axios';\nimport { call, takeEvery, put } from 'redux-saga/effects';\nimport * as actionTypes from '../store/actions/actionTypes';\nimport * as actionCreators from '../store/actions/exportActionCreators';\n\nexport function* fetchPowerSensorInfo() {\n    try {\n        // yield put(actionCreators.startLoader('Fetching BMC Information'));\n        const response = yield call([axios, axios.get], '/api/v1.0/get_power_sensor_info/', {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            }\n        });\n        yield put(actionCreators.stopLoader());\n        const result = response.data;\n        if (result) {\n            yield put(actionCreators.fetchPowerSensorInfo(result.power_sensor_info));\n        }\n    } catch (error) {\n        yield put(actionCreators.stopLoader());\n        yield put(actionCreators.fetchPowerSensorInfo([]));\n    }\n    finally {\n        ;\n    }\n}\n\nexport function* fetchFanSensorInfo() {\n    \n    try {\n        yield put(actionCreators.startLoader('Fetching BMC Information'));\n        const response = yield call([axios, axios.get], '/api/v1.0/get_fan_sensor_info/', {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            }\n        });\n        yield put(actionCreators.stopLoader());\n        const result = response.data;\n        if (result) {\n            yield put(actionCreators.fetchFanSensorInfo(result.fan_sensor_info));\n        }\n    } catch (error) {\n        yield put(actionCreators.stopLoader());\n        yield put(actionCreators.fetchFanSensorInfo([]));\n    }\n    finally {\n        ;\n    }\n}\n\nexport function* fetchTemperatureSensorInfo() {\n    try {\n        yield put(actionCreators.startLoader('Fetching BMC Information'));\n        const response = yield call([axios, axios.get], '/api/v1.0/get_temperature_sensor_info/', {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem('token'),\n            }\n        });\n        yield put(actionCreators.stopLoader());\n        const result = response.data;\n        if (result) {\n            yield put(actionCreators.fetchTemperatureSensorInfo(result.temperature_sensor_info));\n        }\n    } catch (error) {\n        yield put(actionCreators.stopLoader());\n        yield put(actionCreators.fetchTemperatureSensorInfo([]));\n    }\n    finally {\n        ;\n    }\n}\n\nexport function* hardwareSensorWatcher() {\n    yield takeEvery(actionTypes.SAGA_HARDWARE_SENSORS_FETCH_POWER_SENSOR_INFORMATION, fetchPowerSensorInfo);\n    yield takeEvery(actionTypes.SAGA_HARDWARE_SENSORS_FETCH_FAN_SENSOR_INFORMATION, fetchFanSensorInfo);\n    yield takeEvery(actionTypes.SAGA_HARDWARE_SENSORS_FETCH_TEMPERATURE_SENSOR_INFORMATION, fetchTemperatureSensorInfo);\n\n}\n"]}