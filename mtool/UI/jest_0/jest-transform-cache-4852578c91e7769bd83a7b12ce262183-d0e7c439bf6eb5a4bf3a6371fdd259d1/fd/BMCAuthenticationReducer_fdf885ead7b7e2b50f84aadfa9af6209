444e4c1bdea2a46ec6d1308c4bdac937
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.initialState = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState = {
  bmc_username: '',
  bmc_password: '',
  bmc_loginFailed: false,
  bmc_isLoggedIn: false
};
exports.initialState = initialState;

const BMCAuthenticationReducer = (state = initialState, action) => {
  switch (action.type) {
    case actionTypes.BMC_CHANGE_CREDENTIALS:
      {
        console.log("asda", action.payload);
        return _objectSpread({}, state, {
          [action.payload.name]: action.payload.value
        });
        console.log(state.bmc_username);
      }

    case actionTypes.BMC_SET_IS_LOGGED_IN:
      {
        return _objectSpread({}, state, {
          bmc_isLoggedIn: true,
          bmc_loginFailed: false
        });
      }

    case actionTypes.BMC_RESET_IS_LOGGED_IN:
      {
        return _objectSpread({}, state, {
          bmc_isLoggedIn: false
        });
      }

    case actionTypes.BMC_SET_LOGIN_FAILED:
      {
        return _objectSpread({}, state, {
          bmc_loginFailed: true
        });
      }

    default:
      return state;
  }
};

var _default = BMCAuthenticationReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJNQ0F1dGhlbnRpY2F0aW9uUmVkdWNlci5qcyJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJibWNfdXNlcm5hbWUiLCJibWNfcGFzc3dvcmQiLCJibWNfbG9naW5GYWlsZWQiLCJibWNfaXNMb2dnZWRJbiIsIkJNQ0F1dGhlbnRpY2F0aW9uUmVkdWNlciIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsImFjdGlvblR5cGVzIiwiQk1DX0NIQU5HRV9DUkVERU5USUFMUyIsImNvbnNvbGUiLCJsb2ciLCJwYXlsb2FkIiwibmFtZSIsInZhbHVlIiwiQk1DX1NFVF9JU19MT0dHRURfSU4iLCJCTUNfUkVTRVRfSVNfTE9HR0VEX0lOIiwiQk1DX1NFVF9MT0dJTl9GQUlMRUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUEwQkE7Ozs7OztBQUdPLE1BQU1BLFlBQVksR0FBRztBQUN4QkMsRUFBQUEsWUFBWSxFQUFFLEVBRFU7QUFFeEJDLEVBQUFBLFlBQVksRUFBRSxFQUZVO0FBR3hCQyxFQUFBQSxlQUFlLEVBQUUsS0FITztBQUl4QkMsRUFBQUEsY0FBYyxFQUFFO0FBSlEsQ0FBckI7OztBQU9QLE1BQU1DLHdCQUF3QixHQUFHLENBQUNDLEtBQUssR0FBR04sWUFBVCxFQUF1Qk8sTUFBdkIsS0FBa0M7QUFDL0QsVUFBUUEsTUFBTSxDQUFDQyxJQUFmO0FBQ0UsU0FBS0MsV0FBVyxDQUFDQyxzQkFBakI7QUFBeUM7QUFDdkNDLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE1BQVosRUFBbUJMLE1BQU0sQ0FBQ00sT0FBMUI7QUFDQSxpQ0FDS1AsS0FETDtBQUVBLFdBQUNDLE1BQU0sQ0FBQ00sT0FBUCxDQUFlQyxJQUFoQixHQUF3QlAsTUFBTSxDQUFDTSxPQUFQLENBQWVFO0FBRnZDO0FBSUFKLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTixLQUFLLENBQUNMLFlBQWxCO0FBQ0Q7O0FBRUQsU0FBS1EsV0FBVyxDQUFDTyxvQkFBakI7QUFBdUM7QUFDckMsaUNBQ0tWLEtBREw7QUFFQUYsVUFBQUEsY0FBYyxFQUFHLElBRmpCO0FBR0FELFVBQUFBLGVBQWUsRUFBRztBQUhsQjtBQUtEOztBQUVELFNBQUtNLFdBQVcsQ0FBQ1Esc0JBQWpCO0FBQXlDO0FBQ3ZDLGlDQUNLWCxLQURMO0FBRUFGLFVBQUFBLGNBQWMsRUFBRztBQUZqQjtBQUlEOztBQUVELFNBQUtLLFdBQVcsQ0FBQ1Msb0JBQWpCO0FBQXVDO0FBQ3JDLGlDQUNLWixLQURMO0FBRUFILFVBQUFBLGVBQWUsRUFBRztBQUZsQjtBQUlEOztBQUVEO0FBQ0UsYUFBT0csS0FBUDtBQWpDSjtBQW1DRCxDQXBDSDs7ZUFzQ2lCRCx3QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgQ09QWVJJR0hUIChjKSAyMDE5IFNBTVNVTkcgRUxFQ1RST05JQ1MgQ08uLCBMVEQuICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgIEFMTCBSSUdIVFMgUkVTRVJWRUQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCB0byBsaWNlbnNlZXMgb2YgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gICAgICAgIC9cbi8gICBwcm9kdWN0cyB0byB1c2Ugb3IgYWJzdHJhY3QgdGhpcyBjb21wdXRlciBwcm9ncmFtIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mICAgICAgICAgL1xuLyAgIGltcGxlbWVudGluZyBhIHByb2R1Y3QgYmFzZWQgb24gU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gcHJvZHVjdHMuICAgICAgICAgICAvXG4vICAgTm8gb3RoZXIgcmlnaHRzIHRvIHJlcHJvZHVjZSwgdXNlLCBvciBkaXNzZW1pbmF0ZSB0aGlzIGNvbXB1dGVyIHByb2dyYW0sICAgICAgICAgIC9cbi8gICB3aGV0aGVyIGluIHBhcnQgb3IgaW4gd2hvbGUsIGFyZSBncmFudGVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIG1ha2VzIG5vIHJlcHJlc2VudGF0aW9uIG9yIHdhcnJhbnRpZXMgd2l0aCAgICAgICAgICAvXG4vICAgcmVzcGVjdCB0byB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyBjb21wdXRlciBwcm9ncmFtLCBhbmQgc3BlY2lmaWNhbGx5IGRpc2NsYWltcyAgIC9cbi8gICBhbnkgcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYW1hZ2VzLCBzcGVjaWFsIG9yIGNvbnNlcXVlbnRpYWwsIGNvbm5lY3RlZCAgICAgICAgICAgL1xuLyAgIHdpdGggdGhlIHVzZSBvZiB0aGlzIHByb2dyYW0uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuXG5ERVNDUklQVElPTjogPENvbnRhaW5zIFJlZHVjZXIgRnVuY3Rpb25zIGZvciBCTUMgQXV0aGVudGljYXRpb24gY29udGFpbmVyPiAqXG5ATkFNRSA6IEJNQ0F1dGhlbnRpY2F0aW9uUmVkdWNlci5qc1xuQEFVVEhPUlM6IEpheSBTYW5naGF2aSBcbkBWZXJzaW9uIDogMS4wICpcbkBSRVZJU0lPTiBISVNUT1JZXG5bMjEvMDIvMjAyMF0gW0pheV0gOiBQcm90b3R5cGluZy4uLi4uLi4uLi4vLy8vLy8vLy8vLy8vLy8vLy8vL1xuKi9cblxuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb25UeXBlcyc7XG5cblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcbiAgICBibWNfdXNlcm5hbWU6ICcnLFxuICAgIGJtY19wYXNzd29yZDogJycsXG4gICAgYm1jX2xvZ2luRmFpbGVkOiBmYWxzZSxcbiAgICBibWNfaXNMb2dnZWRJbjogZmFsc2UsXG59O1xuXG5jb25zdCBCTUNBdXRoZW50aWNhdGlvblJlZHVjZXIgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgYWN0aW9uVHlwZXMuQk1DX0NIQU5HRV9DUkVERU5USUFMUzoge1xuICAgICAgICBjb25zb2xlLmxvZyhcImFzZGFcIixhY3Rpb24ucGF5bG9hZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIFthY3Rpb24ucGF5bG9hZC5uYW1lXSA6IGFjdGlvbi5wYXlsb2FkLnZhbHVlLFxuICAgICAgICB9O1xuICAgICAgICBjb25zb2xlLmxvZyhzdGF0ZS5ibWNfdXNlcm5hbWUpO1xuICAgICAgfVxuXG4gICAgICBjYXNlIGFjdGlvblR5cGVzLkJNQ19TRVRfSVNfTE9HR0VEX0lOOiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGJtY19pc0xvZ2dlZEluIDogdHJ1ZSxcbiAgICAgICAgYm1jX2xvZ2luRmFpbGVkIDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNhc2UgYWN0aW9uVHlwZXMuQk1DX1JFU0VUX0lTX0xPR0dFRF9JTjoge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBibWNfaXNMb2dnZWRJbiA6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjYXNlIGFjdGlvblR5cGVzLkJNQ19TRVRfTE9HSU5fRkFJTEVEOiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGJtY19sb2dpbkZhaWxlZCA6IHRydWUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgIFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgfTtcbiAgXG4gIGV4cG9ydCBkZWZhdWx0IEJNQ0F1dGhlbnRpY2F0aW9uUmVkdWNlcjtcbiAgIl19