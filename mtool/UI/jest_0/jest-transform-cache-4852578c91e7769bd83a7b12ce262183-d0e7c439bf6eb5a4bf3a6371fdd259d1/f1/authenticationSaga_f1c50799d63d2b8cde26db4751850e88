83caf3f85f9b9a1cb7dec27520df6496
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.login = login;
exports.authenticationWatcher = authenticationWatcher;

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

function* login(action) {
  try {
    localStorage.setItem('BMC_LoggedIn', false); // Set bmc_isLoggedIn false once the user logs in again

    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/login/', action.payload);

    if (response.data) {
      localStorage.setItem('isLoggedIn', true);
      localStorage.setItem('userid', response.data.username);
      localStorage.setItem('token', response.data.token);
      yield (0, _effects.put)(actionCreators.setIsLoggedIn());
      action.history.push('/dashboard');
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.setLoginFailed());
    localStorage.setItem('isLoggedIn', false);
    localStorage.setItem('BMC_LoggedIn', false);
  }
}

function* authenticationWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_LOGIN, login);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGhlbnRpY2F0aW9uU2FnYS5qcyJdLCJuYW1lcyI6WyJsb2dpbiIsImFjdGlvbiIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZXNwb25zZSIsImF4aW9zIiwicG9zdCIsInBheWxvYWQiLCJkYXRhIiwidXNlcm5hbWUiLCJ0b2tlbiIsImFjdGlvbkNyZWF0b3JzIiwic2V0SXNMb2dnZWRJbiIsImhpc3RvcnkiLCJwdXNoIiwiZXJyb3IiLCJzZXRMb2dpbkZhaWxlZCIsImF1dGhlbnRpY2F0aW9uV2F0Y2hlciIsImFjdGlvblR5cGVzIiwiU0FHQV9MT0dJTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSU8sVUFBVUEsS0FBVixDQUFnQkMsTUFBaEIsRUFBd0I7QUFDN0IsTUFBSTtBQUNGQyxJQUFBQSxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsY0FBckIsRUFBcUMsS0FBckMsRUFERSxDQUMyQzs7QUFDN0MsVUFBTUMsUUFBUSxHQUFHLE1BQU0sbUJBQ3JCLENBQUNDLGNBQUQsRUFBUUEsZUFBTUMsSUFBZCxDQURxQixFQUVyQixrQkFGcUIsRUFHckJMLE1BQU0sQ0FBQ00sT0FIYyxDQUF2Qjs7QUFLQSxRQUFJSCxRQUFRLENBQUNJLElBQWIsRUFBbUI7QUFDZk4sTUFBQUEsWUFBWSxDQUFDQyxPQUFiLENBQXFCLFlBQXJCLEVBQW1DLElBQW5DO0FBQ0FELE1BQUFBLFlBQVksQ0FBQ0MsT0FBYixDQUFxQixRQUFyQixFQUErQkMsUUFBUSxDQUFDSSxJQUFULENBQWNDLFFBQTdDO0FBQ0FQLE1BQUFBLFlBQVksQ0FBQ0MsT0FBYixDQUFxQixPQUFyQixFQUE4QkMsUUFBUSxDQUFDSSxJQUFULENBQWNFLEtBQTVDO0FBQ0EsWUFBTSxrQkFBSUMsY0FBYyxDQUFDQyxhQUFmLEVBQUosQ0FBTjtBQUNBWCxNQUFBQSxNQUFNLENBQUNZLE9BQVAsQ0FBZUMsSUFBZixDQUFvQixZQUFwQjtBQUNEO0FBQ0YsR0FkSCxDQWNJLE9BQU9DLEtBQVAsRUFBYztBQUNaLFVBQU0sa0JBQUlKLGNBQWMsQ0FBQ0ssY0FBZixFQUFKLENBQU47QUFDQWQsSUFBQUEsWUFBWSxDQUFDQyxPQUFiLENBQXFCLFlBQXJCLEVBQW1DLEtBQW5DO0FBQ0FELElBQUFBLFlBQVksQ0FBQ0MsT0FBYixDQUFxQixjQUFyQixFQUFxQyxLQUFyQztBQUNMO0FBQ0Y7O0FBR00sVUFBVWMscUJBQVYsR0FBa0M7QUFDdkMsUUFBTSx3QkFBVUMsV0FBVyxDQUFDQyxVQUF0QixFQUFrQ25CLEtBQWxDLENBQU47QUFFRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBjYWxsLCB0YWtlRXZlcnksIHB1dCB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25UeXBlcyBmcm9tICcuLi9zdG9yZS9hY3Rpb25zL2FjdGlvblR5cGVzJztcbmltcG9ydCAqIGFzIGFjdGlvbkNyZWF0b3JzIGZyb20gJy4uL3N0b3JlL2FjdGlvbnMvZXhwb3J0QWN0aW9uQ3JlYXRvcnMnO1xuXG5cblxuZXhwb3J0IGZ1bmN0aW9uKiBsb2dpbihhY3Rpb24pIHtcbiAgdHJ5IHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnQk1DX0xvZ2dlZEluJywgZmFsc2UpOyAvLyBTZXQgYm1jX2lzTG9nZ2VkSW4gZmFsc2Ugb25jZSB0aGUgdXNlciBsb2dzIGluIGFnYWluXG4gICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBjYWxsKFxuICAgICAgW2F4aW9zLCBheGlvcy5wb3N0XSxcbiAgICAgICcvYXBpL3YxLjAvbG9naW4vJyxcbiAgICAgIGFjdGlvbi5wYXlsb2FkXG4gICAgKTsgIFxuICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdpc0xvZ2dlZEluJywgdHJ1ZSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyaWQnLCByZXNwb25zZS5kYXRhLnVzZXJuYW1lKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgcmVzcG9uc2UuZGF0YS50b2tlbik7XG4gICAgICAgIHlpZWxkIHB1dChhY3Rpb25DcmVhdG9ycy5zZXRJc0xvZ2dlZEluKCkpO1xuICAgICAgICBhY3Rpb24uaGlzdG9yeS5wdXNoKCcvZGFzaGJvYXJkJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgeWllbGQgcHV0KGFjdGlvbkNyZWF0b3JzLnNldExvZ2luRmFpbGVkKCkpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaXNMb2dnZWRJbicsIGZhbHNlKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0JNQ19Mb2dnZWRJbicsIGZhbHNlKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiogYXV0aGVudGljYXRpb25XYXRjaGVyKCkge1xuICB5aWVsZCB0YWtlRXZlcnkoYWN0aW9uVHlwZXMuU0FHQV9MT0dJTiwgbG9naW4pO1xuICBcbn1cbiJdfQ==