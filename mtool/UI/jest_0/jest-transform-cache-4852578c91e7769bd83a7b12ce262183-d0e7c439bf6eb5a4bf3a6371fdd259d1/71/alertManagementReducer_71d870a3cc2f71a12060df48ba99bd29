4294b756b300231e0496f016aac537a6
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState = {
  selected: false,
  edit: false,
  alerts: [],
  // For Alert Table
  alertClusters: [{
    // For Alert Types
    _id: '1',
    name: 'CPU',
    alertSubCluster: [{
      _id: '1',
      name: 'cpu-host',
      alertTypes: [{
        type: 'cpu-idle'
      }, {
        type: 'cpu-idle2'
      }, {
        type: 'cpu-affinity'
      }]
    }, {
      _id: '2',
      name: 'cpu-host2',
      alertTypes: [{
        type: 'cpu-idle'
      }, {
        type: 'cpu-affinity'
      }, {
        type: 'cpu-time'
      }]
    }],
    alertFields: ["usage_idle", "usage_system"]
  }, {
    _id: '2',
    name: 'Array',
    alertSubCluster: [{
      name: 'array-disk0',
      alertTypes: [{
        type: 'array-name'
      }, {
        type: 'array-size'
      }]
    }]
  }],
  istypealert: false,
  alerttype: '',
  alertOpen: false,
  addDeleteSend: '',
  alerttitle: '',
  alertdescription: ''
};

const alertManagementReducer = (state = initialState, action) => {
  switch (action.type) {
    case actionTypes.ALERT_MANAGEMENT_OPEN_ALERT_BOX:
      {
        return _objectSpread({}, state, {}, action.alertParam);
      }

    case actionTypes.ALERT_MANAGEMENT_SET_ALERTS:
      {
        const _action$updatedAlerts = action.updatedAlerts,
              type = _action$updatedAlerts.type,
              i = _action$updatedAlerts.i,
              j = _action$updatedAlerts.j;
        const value1 = i;
        const value2 = j;
        const alertClusters = state.alertClusters.map((cluster, Citr) => {
          return _objectSpread({}, cluster, {
            alertSubCluster: cluster.alertSubCluster.map((subcluster, subCitr) => {
              return _objectSpread({}, subcluster, {
                alertTypes: subcluster.alertTypes.map(cip => {
                  if (type.type === cip.type && Citr === value1 && subCitr === value2) {
                    return _objectSpread({}, cip, {
                      selected: !cip.selected
                    });
                  }

                  if (cip.selected === true && value1 === Citr && subCitr === value2) {
                    return _objectSpread({}, cip);
                  }

                  return _objectSpread({}, cip, {
                    selected: false
                  });
                })
              });
            })
          });
        });
        return _objectSpread({}, state, {
          alertClusters
        });
      }

    case actionTypes.ALERT_MANAGEMENT_FETCH_ALERTS:
      {
        const alerts = [];
        action.alerts.forEach(alert => {
          alerts.push(_objectSpread({}, alert, {
            selected: false,
            edit: false
          }));
        });
        return _objectSpread({}, state, {
          alerts
        });
      }

    case actionTypes.ALERT_MANAGEMENT_FETCH_ALERTS_TYPE:
      {
        const alertTypesArray = [];

        for (let i = 0; i < action.alertTypes.length; i += 1) {
          if (action.alertTypes[i].name === 'cpu') {
            action.alertTypes[i].alertFields = [// 'usage_idle',
            'usage_user'];

            for (let j = 0; j < action.alertTypes[i].alertSubCluster.length; j += 1) {
              if (action.alertTypes[i].alertSubCluster[j].name === 'cpu') {
                action.alertTypes[i].alertSubCluster = action.alertTypes[i].alertSubCluster.filter(item => item.name === 'cpu');
                action.alertTypes[i].alertSubCluster[j].alertTypes = action.alertTypes[i].alertSubCluster[j].alertTypes.filter(item => item.type === 'cpu-total');
                action.alertTypes[i].alertSubCluster[j].name = 'cpu ';
              }
            }

            alertTypesArray.push(action.alertTypes[i]);
          } // else if (action.alertTypes[i].name === 'disk') {
          //     for (
          //         let j = 0;
          //         j < action.alertTypes[i].alertSubCluster.length;
          //         j += 1
          //     ) {
          //         if (action.alertTypes[i].alertSubCluster[j].name !== 'device') {
          //             action.alertTypes[i].alertSubCluster = action.alertTypes[
          //                 i
          //             ].alertSubCluster.filter(item => item.name === 'device');
          //         } else {
          //             action.alertTypes[i].alertSubCluster[
          //                 j
          //             ].alertTypes = action.alertTypes[i].alertSubCluster[
          //                 j
          //             ].alertTypes.slice(0, 1);
          //             action.alertTypes[i].alertSubCluster[j].alertTypes.map(
          //                 (item) => {
          //                     const resItem = { ...item }
          //                     resItem.type = 'NA';
          //                     return resItem;
          //                 }
          //             );
          //         }
          //     }
          //     action.alertTypes[i].alertFields = ['NA'];
          //     alertTypesArray.push(action.alertTypes[i]);
          // }

        }

        return _objectSpread({}, state, {
          alertClusters: alertTypesArray
        });
      }

    default:
      return state;
  }
};

var _default = alertManagementReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,