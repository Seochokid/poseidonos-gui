bb27ea6deda59389d5c6a5cf6d68c6ce
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _styles = require("@material-ui/core/styles");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _theme = require("../../../theme");

var _AlertTable = _interopRequireDefault(require("../../../components/AlertManagementComponents/AlertTable"));

var _AddNewAlerts = _interopRequireDefault(require("../../../components/AlertManagementComponents/AddNewAlerts"));

require("./Alert-Management.css");

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../../../store/actions/exportActionCreators"));

var _AlertFields = _interopRequireDefault(require("../../../components/AlertManagementComponents/AlertFields"));

var _AlertTypes = _interopRequireDefault(require("../../../components/AlertManagementComponents/AlertTypes"));

var _Dialog = _interopRequireDefault(require("../../../components/Dialog"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/ConfigurationSetting/Alert-Management/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => {
  return {
    AlertManagementContainer: {
      display: 'flex'
    },
    content: {
      flexGrow: 1,
      paddingTop: theme.spacing(2),
      width: '100%',
      boxSizing: 'border-box'
    },
    toolbar: theme.mixins.toolbar
  };
};

class AlertManagement extends _react.Component {
  constructor(props) {
    super(props);
    this.toggleAlertStatus = this.toggleAlertStatus.bind(this);
    this.selectalerts = this.selectalerts.bind(this);
    this.editalerts = this.editalerts.bind(this);
    this.deletealerts = this.deletealerts.bind(this);
    this.updateAlerts = this.updateAlerts.bind(this);
    this.cancelChange = this.cancelChange.bind(this);
    this.selectAllalerts = this.selectAllalerts.bind(this); // this.onconditionchange = this.onconditionchange.bind(this);

    this.selectAlertCluster = this.selectAlertCluster.bind(this);
    this.selectAlertSubCluster = this.selectAlertSubCluster.bind(this);
    this.alertTypeSelected = this.alertTypeSelected.bind(this);
    this.onHandleChange = this.onHandleChange.bind(this);
    this.onHandleDropdownChange = this.onHandleDropdownChange.bind(this);
    this.addAlerts = this.addAlerts.bind(this);
    this.openAlert = this.openAlert.bind(this);
    this.handleAlertClose = this.handleAlertClose.bind(this);
    this.triggerCommand = this.triggerCommand.bind(this);
    this.handleDrawerToggle = this.handleDrawerToggle.bind(this);
    this.updateAlertsState = this.updateAlertsState.bind(this);
    this.state = {
      conditions: ['Greater Than', 'Less Than', 'Equal To', 'Not Equal To', 'Equal To Or Greater', 'Equal To Or Less Than'],
      // For Alert Table and Add New Alerts
      // , 'Inside Range', 'Outside Range'  - TBD
      selectedAlertSubCluster: null,
      // For Alert Types
      radiolist: [// For Alert Fields
      [{
        name: 'cpu-usage',
        id: '1'
      }, {
        name: 'cpu-affinity',
        id: '2'
      }, {
        name: 'cpu-state',
        id: '3'
      }, {
        name: 'cpu-processor-usage',
        id: '4'
      }, {
        name: 'cpu-threads',
        id: '5'
      }, {
        name: 'cpu-memory',
        id: '6'
      }, {
        name: 'cpu-utilization',
        id: '7'
      }, {
        name: 'cpu-affinity2',
        id: '8'
      }], [{
        name: 'array-name',
        id: '1'
      }, {
        name: 'array-time',
        id: '2'
      }]],
      radioindex: 0,
      alertName: '',
      alertType: '',
      alertRadioButton: '',
      // For Alert Fields
      alertCondition: 'Greater Than',
      // For Add New Alerts
      alertRange: '',
      // For Add New Alerts
      description: '',
      // For Add New Alerts
      alertClusterName: '',
      // For Add New Alerts,
      mobileOpen: false
    };
  }

  componentDidMount() {
    this.props.fetchAlertsInfo();
    this.props.fetchAlertsTypeInfo();
  }

  onHandleDropdownChange(event) {
    this.setState({
      alertCondition: event.target.value
    });
  }

  onHandleChange(event) {
    const _event$target = event.target,
          name = _event$target.name,
          value = _event$target.value;
    this.setState({
      [name]: value
    });
  } // Edit Alert Condition, Alert Range and Description


  editalerts(i) {
    const alerts = [...this.props.alerts];
    alerts[i].edit = !alerts[i].edit;
    this.setState(_objectSpread({}, this.state, {
      alerts
    }));
  } // Select all Alerts from the table


  selectAllalerts(event) {
    const checked = event.target.checked;
    const alerts = [];
    this.props.alerts.forEach(alert => {
      alerts.push(_objectSpread({}, alert, {
        selected: checked
      }));
    });
    this.setState(_objectSpread({}, this.state, {
      alerts
    }));
  }

  updateAlertsState(alertsData) {
    this.setState(_objectSpread({}, this.state, {
      alerts: alertsData
    }));
  } // update existing alerts with change in fields


  updateAlerts(alerts) {
    const newalerts = _objectSpread({}, alerts);

    this.props.updateAlertsInfo(newalerts);
  } // Cancel all the changes made


  cancelChange(i) {
    const alerts = [...this.props.alerts];
    alerts[i].edit = !alerts[i].edit;
    this.setState(_objectSpread({}, this.state, {
      alerts
    }));
  } // Delete selected alerts from backend


  deletealerts() {
    const ids = [];
    this.props.alerts.forEach(alerts => {
      if (alerts.selected) ids.push(alerts.alertName);
    });

    if (ids.length <= 0) {
      this.props.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'alert',
        alerttitle: 'Delete Alert',
        alertdescription: 'Please select an alert to delete'
      });
      return;
    }

    const data = {
      ids
    };
    this.props.deleteAlertsInfo(data);
    this.handleAlertClose();
  } // API for selecting a alert cluster


  selectAlertCluster(cluster, i) {
    this.setState(_objectSpread({}, this.state, {
      alertClusterName: cluster.name,
      radioindex: i
    }));
  } // API for selecting a alert sub cluster


  selectAlertSubCluster(clusterName, alertSubCluster, i) {
    this.setState(_objectSpread({}, this.state, {
      selectedAlertSubCluster: alertSubCluster,
      alertClusterName: clusterName,
      radioindex: i
    }));
  } // API for selecting a particular alert type


  alertTypeSelected(type, i, j) {
    this.setState(_objectSpread({}, this.state, {
      radioindex: i,
      alertType: type.type
    }));
    this.props.setAlertsInfo({
      type,
      i,
      j
    });
  } // Select Alerts from Table


  selectalerts(event, i) {
    const alerts = [...this.props.alerts];
    alerts[i].selected = event.target.checked;
    this.setState(_objectSpread({}, this.state, {
      alerts
    }));
  } // API to toggle alert name... Dont delete from the Mongo DB


  toggleAlertStatus(i) {
    const alert = {
      alertName: this.props.alerts[i].alertName,
      status: !this.props.alerts[i].active
    };
    this.props.toggleAlertsInfo(alert);
  } // Add new alerts in DB


  addAlerts() {
    // if (this.state.alertCondition == "Inside Range" || this.state.alertCondition == "Outside Range")
    //     var regex = /^[0-9-]+$/
    // else
    const regex = /\b(0?[1-9]|[1-9][0-9]|100)\b/; // /^[0-9]+$/
    // Validate TextBox value against the Regex.

    const isValid = regex.test(this.state.alertRange);

    if (!isValid) {
      this.props.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'alert',
        alerttitle: 'Add Alert',
        alertdescription: 'Please specify a valid input'
      });
      return;
    }

    if (this.state.alertName === '' || this.state.alertRadioButton === '' || this.state.alertCondition === '' || this.state.alertRange === '' || this.state.alertType === '') {
      // alert("Please specify a valid input");
      this.props.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'alert',
        // alerttitle:"Input Error",
        alerttitle: 'Add Alert',
        alertdescription: 'Please specify a valid input'
      });
      return;
    }

    let alertType = '';
    this.props.alertClusters.map(cluster => {
      return _objectSpread({}, cluster, {
        alertSubCluster: cluster.alertSubCluster.map(subcluster => {
          return _objectSpread({}, subcluster, {
            alertTypes: subcluster.alertTypes.forEach(cip => {
              if (cip.selected === true) {
                if (alertType === '') alertType = cip.type;else alertType = `${alertType}|${cip.type}`;
              }
            })
          });
        })
      });
    });
    this.setState(_objectSpread({}, this.state, {
      alertType
    }));
    let subClusterName = this.state.selectedAlertSubCluster.name;
    if (subClusterName === "cpu ") subClusterName = "cpu";
    const addNewAlert = {
      alertName: this.state.alertName,
      alertField: this.state.alertRadioButton,
      alertCluster: this.state.alertClusterName,
      alertSubCluster: subClusterName,
      alertType: this.state.alertType,
      alertCondition: this.state.alertCondition,
      // For Add New Alerts
      alertRange: this.state.alertRange,
      // For Add New Alerts
      description: this.state.description // For Add New Alerts

    };
    this.props.addNewAlertsInfo(addNewAlert);
    this.setState({
      alertName: '',
      alertField: '',
      alertRadioButton: '',
      // For Alert Fields
      alertCondition: 'Greater Than',
      // For Add New Alerts
      alertRange: '',
      // For Add New Alerts
      description: '' // For Add New Alerts

    });
    this.handleAlertClose();
  }

  openAlert(operationType) {
    this.props.openAlertBox({
      alertOpen: true,
      addDeleteSend: operationType,
      alerttype: 'delete',
      istypealert: false,
      alerttitle: `${operationType} Alert`,
      alertdescription: `Are you sure you want to ${operationType} the alert?`
    });
  }

  handleAlertClose() {
    this.props.openAlertBox({
      alertOpen: false
    });
  }

  triggerCommand() {
    if (this.props.addDeleteSend === 'Delete') {
      this.deletealerts();
    } else if (this.props.addDeleteSend === 'Add') {
      this.addAlerts();
    }
  }

  handleDrawerToggle() {
    this.setState({
      mobileOpen: !this.state.mobileOpen
    });
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 408
      },
      __self: this
    }, _react.default.createElement("div", {
      className: classes.AlertManagementContainer,
      "data-testid": "alertManagementTag",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 409
      },
      __self: this
    }, _react.default.createElement("main", {
      className: classes.content,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 412
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      container: true,
      spacing: 3,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 414
      },
      __self: this
    }, _react.default.createElement(_AlertTable.default, {
      selectalerts: this.selectalerts,
      togglealertstatus: this.toggleAlertStatus,
      editalerts: this.editalerts,
      cancelChange: this.cancelChange,
      saveChange: this.updateAlerts,
      updateAlertsState: this.updateAlertsState,
      deletealerts: this.deletealerts,
      selectAllalerts: this.selectAllalerts,
      alerts: this.props.alerts,
      dropdownCondition: this.state.conditions,
      alertOpen: this.state.alertOpen_alertTable,
      alerttitle: this.state.alertboxtitle_alertTable,
      alertdescription: this.state.alertboxdescription_alertTable,
      triggerCommand: this.triggerCommand,
      openAlert: this.openAlert,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 415
      },
      __self: this
    }), _react.default.createElement(_Grid.default, {
      item: true,
      container: true,
      spacing: 3,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 432
      },
      __self: this
    }, _react.default.createElement(_AlertTypes.default, {
      selectAlertCluster: this.selectAlertCluster,
      selectAlertSubCluster: this.selectAlertSubCluster,
      alertClusterList: this.props.alertClusters,
      selectedAlertSubCluster: this.state.selectedAlertSubCluster,
      alertTypeSelected: this.alertTypeSelected,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 433
      },
      __self: this
    }), _react.default.createElement(_AlertFields.default, {
      radiolist: this.state.radiolist,
      alertClusterList: this.props.alertClusters,
      alertRadioButton: this.state.alertRadioButton,
      onHandleChange: this.onHandleChange,
      radioindex: this.state.radioindex,
      alertClusterName: this.state.alertClusterName,
      selectedAlertSubCluster: this.state.selectedAlertSubCluster,
      alertType: this.state.alertType,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 441
      },
      __self: this
    })), _react.default.createElement(_Grid.default, {
      item: true,
      container: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 452
      },
      __self: this
    }, _react.default.createElement(_AddNewAlerts.default, {
      dropdownCondition: this.state.conditions,
      onHandleChange: this.onHandleChange,
      alertName: this.state.alertName,
      alertCondition: this.state.alertCondition,
      onHandleDropdownChange: this.onHandleDropdownChange,
      alertRadioButton: this.state.alertRadioButton,
      alertRange: this.state.alertRange,
      description: this.state.description // addAlerts={this.addAlerts}
      ,
      openAlert: this.openAlert,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 453
      },
      __self: this
    })), _react.default.createElement(_Dialog.default, {
      title: this.props.alerttitle,
      description: this.props.alertdescription,
      open: this.props.alertOpen,
      type: this.props.alerttype,
      handleClose: this.handleAlertClose,
      onConfirm: this.triggerCommand,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 466
      },
      __self: this
    })))));
  }

}

const mapStateToProps = state => {
  return {
    alerts: state.alertManagementReducer.alerts,
    alertClusters: state.alertManagementReducer.alertClusters,
    alertOpen: state.alertManagementReducer.alertOpen,
    addDeleteSend: state.alertManagementReducer.addDeleteSend,
    alerttype: state.alertManagementReducer.alerttype,
    istypealert: state.alertManagementReducer.istypealert,
    alerttitle: state.alertManagementReducer.alerttitle,
    alertdescription: state.alertManagementReducer.alertdescription
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setAlertsInfo: updatedAlerts => dispatch(actionCreators.setAlertsInfo(updatedAlerts)),
    openAlertBox: alertParam => dispatch(actionCreators.openAlertBox(alertParam)),
    fetchAlertsInfo: () => dispatch({
      type: actionTypes.SAGA_ALERT_MANAGEMENT_FETCH_ALERTS
    }),
    fetchAlertsTypeInfo: () => dispatch({
      type: actionTypes.SAGA_ALERT_MANAGEMENT_FETCH_ALERTS_TYPE
    }),
    updateAlertsInfo: newAlerts => dispatch({
      type: actionTypes.SAGA_ALERT_MANAGEMENT_UPDATE_ALERTS,
      newAlerts
    }),
    deleteAlertsInfo: deleteAlerts => dispatch({
      type: actionTypes.SAGA_ALERT_MANAGEMENT_DELETE_ALERTS,
      deleteAlerts
    }),
    toggleAlertsInfo: toggleAlerts => dispatch({
      type: actionTypes.SAGA_ALERT_MANAGEMENT_TOGGLE_ALERTS,
      toggleAlerts
    }),
    addNewAlertsInfo: addNewAlert => dispatch({
      type: actionTypes.SAGA_ALERT_MANAGEMENT_ADD_NEW_ALERTS,
      addNewAlert
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(AlertManagement));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,