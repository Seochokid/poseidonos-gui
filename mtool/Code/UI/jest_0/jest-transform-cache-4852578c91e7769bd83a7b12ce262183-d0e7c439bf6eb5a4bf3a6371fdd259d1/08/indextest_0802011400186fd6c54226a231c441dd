c5cfdcfa450e6ec1bd93e133f077e23c
"use strict";

jest.unmock("axios");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactRedux = require("react-redux");

var _testUtils = require("react-dom/test-utils");

var _reactI18next = require("react-i18next");

var _axios = _interopRequireDefault(require("axios"));

require("@testing-library/jest-dom/extend-expect");

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _history = require("history");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _indexSaga = _interopRequireDefault(require("../../../sagas/indexSaga"));

var _headerReducer = _interopRequireDefault(require("../../../store/reducers/headerReducer"));

var _hardwareOverviewReducer = _interopRequireDefault(require("../../../store/reducers/hardwareOverviewReducer"));

var _hardwareHealthReducer = _interopRequireDefault(require("../../../store/reducers/hardwareHealthReducer"));

var _hardwareSensorReducer = _interopRequireDefault(require("../../../store/reducers/hardwareSensorReducer"));

var _hardwarePowerManagementReducer = _interopRequireDefault(require("../../../store/reducers/hardwarePowerManagementReducer"));

var _waitLoaderReducer = _interopRequireDefault(require("../../../store/reducers/waitLoaderReducer"));

var _configurationsettingReducer = _interopRequireDefault(require("../../../store/reducers/configurationsettingReducer"));

var _alertManagementReducer = _interopRequireDefault(require("../../../store/reducers/alertManagementReducer"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _index = _interopRequireDefault(require("./index"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/OverviewComponents/Chassis/index.test.js";
describe("Chassis", () => {
  let wrapper;
  let history;
  let store; // let mock;

  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      // headerLanguageReducer,
      headerReducer: _headerReducer.default,
      hardwareOverviewReducer: _hardwareOverviewReducer.default,
      hardwareHealthReducer: _hardwareHealthReducer.default,
      hardwareSensorReducer: _hardwareSensorReducer.default,
      hardwarePowerManagementReducer: _hardwarePowerManagementReducer.default,
      waitLoaderReducer: _waitLoaderReducer.default,
      configurationsettingReducer: _configurationsettingReducer.default,
      alertManagementReducer: _alertManagementReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = "/Hardware/Overview";
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    }); // mock = new MockAdapter(axios);
  });

  const renderComponent = () => {
    let chassis_front_list1 = [{
      DevicePath: 'NA',
      BuildDate: 'NA',
      Manufacturer: 'NA',
      PartNumber: 'NA',
      SerialNumber: 'NA',
      Model: 'NA',
      PredictedMediaLifeLeftPercent: 'NA'
    }];
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 97
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 98
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 99
      },
      __self: void 0
    }, " ", _react.default.createElement(_index.default, {
      chassis_front_list: chassis_front_list1,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 101
      },
      __self: void 0
    })))));
  };

  afterEach(_react2.cleanup);
  it("matches snapshot", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    renderComponent();
    const _wrapper = wrapper,
          asFragment = _wrapper.asFragment,
          getByText = _wrapper.getByText,
          getByTestId = _wrapper.getByTestId;
    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("Chassis_Component"));

    _react2.fireEvent.click(getByTestId("ChassisDiskPopUp"));

    expect(asFragment()).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,