1de14e7413c1f351b1a5f7bcde459715
/* istanbul ignore next */
"use strict";

var cov_24s56huo4t = function () {
  var path = "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/alertManagementAlertTableSaga.js";
  var hash = "ba52bee702a849ad3339ec4259e9178f026713d8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/alertManagementAlertTableSaga.js",
    statementMap: {
      "0": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "1": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "2": {
        start: {
          line: 41,
          column: 25
        },
        end: {
          line: 41,
          column: 33
        }
      },
      "3": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "4": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 36
        }
      },
      "5": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "6": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "7": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 60,
          column: 33
        }
      },
      "8": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "9": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 36
        }
      },
      "10": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 87,
          column: 5
        }
      },
      "11": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 79,
          column: 10
        }
      },
      "12": {
        start: {
          line: 80,
          column: 25
        },
        end: {
          line: 80,
          column: 33
        }
      },
      "13": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "14": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 36
        }
      },
      "15": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 87
        }
      },
      "16": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 87
        }
      },
      "17": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 93,
          column: 87
        }
      }
    },
    fnMap: {
      "0": {
        name: "updateAlertsInfo",
        decl: {
          start: {
            line: 32,
            column: 17
          },
          end: {
            line: 32,
            column: 33
          }
        },
        loc: {
          start: {
            line: 32,
            column: 42
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 32
      },
      "1": {
        name: "deleteAlertsInfo",
        decl: {
          start: {
            line: 51,
            column: 17
          },
          end: {
            line: 51,
            column: 33
          }
        },
        loc: {
          start: {
            line: 51,
            column: 42
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 51
      },
      "2": {
        name: "toggleAlertsInfo",
        decl: {
          start: {
            line: 71,
            column: 17
          },
          end: {
            line: 71,
            column: 33
          }
        },
        loc: {
          start: {
            line: 71,
            column: 42
          },
          end: {
            line: 88,
            column: 1
          }
        },
        line: 71
      },
      "3": {
        name: "alertManagementAlertTableWatcher",
        decl: {
          start: {
            line: 90,
            column: 17
          },
          end: {
            line: 90,
            column: 49
          }
        },
        loc: {
          start: {
            line: 90,
            column: 52
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 90
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }],
        line: 61
      },
      "2": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }],
        line: 81
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "ba52bee702a849ad3339ec4259e9178f026713d8"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateAlertsInfo = updateAlertsInfo;
exports.deleteAlertsInfo = deleteAlertsInfo;
exports.toggleAlertsInfo = toggleAlertsInfo;
exports.alertManagementAlertTableWatcher = alertManagementAlertTableWatcher;

var
/* istanbul ignore next */
_axios = _interopRequireDefault(require("axios"));

var
/* istanbul ignore next */
_effects = require("redux-saga/effects");

var
/* istanbul ignore next */
actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var
/* istanbul ignore next */
_alertManagementSaga = require("./alertManagementSaga");

function* updateAlertsInfo(action) {
  /* istanbul ignore next */
  cov_24s56huo4t.f[0]++;
  cov_24s56huo4t.s[0]++;

  try {
    const response =
    /* istanbul ignore next */
    (cov_24s56huo4t.s[1]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.post], '/api/v1.0/update_alerts/', action.newAlerts, {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    const _ref = (cov_24s56huo4t.s[2]++, response),
          status = _ref.status;

    /* istanbul ignore next */
    cov_24s56huo4t.s[3]++;

    if (status === 200) {
      /* istanbul ignore next */
      cov_24s56huo4t.b[0][0]++;
      cov_24s56huo4t.s[4]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _alertManagementSaga.
        /* istanbul ignore next */
        fetchAlertsInfo)()
      );
    } else
    /* istanbul ignore next */
    {
      cov_24s56huo4t.b[0][1]++;
    }
  } catch (error) {
    ;
  }
}

function* deleteAlertsInfo(action) {
  /* istanbul ignore next */
  cov_24s56huo4t.f[1]++;
  cov_24s56huo4t.s[5]++;

  try {
    const response =
    /* istanbul ignore next */
    (cov_24s56huo4t.s[6]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.post], '/api/v1.0/delete_alerts/', action.deleteAlerts, {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    const _ref2 = (cov_24s56huo4t.s[7]++, response),
          status = _ref2.status;

    /* istanbul ignore next */
    cov_24s56huo4t.s[8]++;

    if (status === 200) {
      /* istanbul ignore next */
      cov_24s56huo4t.b[1][0]++;
      cov_24s56huo4t.s[9]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _alertManagementSaga.
        /* istanbul ignore next */
        fetchAlertsInfo)()
      );
    } else
    /* istanbul ignore next */
    {
      cov_24s56huo4t.b[1][1]++;
    }
  } catch (error) {
    ;
  }
}

function* toggleAlertsInfo(action) {
  /* istanbul ignore next */
  cov_24s56huo4t.f[2]++;
  cov_24s56huo4t.s[10]++;

  try {
    const response =
    /* istanbul ignore next */
    (cov_24s56huo4t.s[11]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.post], '/api/v1.0/toggle_alert_status/', action.toggleAlerts, {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    const _ref3 = (cov_24s56huo4t.s[12]++, response),
          status = _ref3.status;

    /* istanbul ignore next */
    cov_24s56huo4t.s[13]++;

    if (status === 200) {
      /* istanbul ignore next */
      cov_24s56huo4t.b[2][0]++;
      cov_24s56huo4t.s[14]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _alertManagementSaga.
        /* istanbul ignore next */
        fetchAlertsInfo)()
      );
    } else
    /* istanbul ignore next */
    {
      cov_24s56huo4t.b[2][1]++;
    }
  } catch (error) {
    ;
  }
}

function* alertManagementAlertTableWatcher() {
  /* istanbul ignore next */
  cov_24s56huo4t.f[3]++;
  cov_24s56huo4t.s[15]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_ALERT_MANAGEMENT_UPDATE_ALERTS, updateAlertsInfo)
  );

  /* istanbul ignore next */
  cov_24s56huo4t.s[16]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_ALERT_MANAGEMENT_DELETE_ALERTS, deleteAlertsInfo)
  );

  /* istanbul ignore next */
  cov_24s56huo4t.s[17]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_ALERT_MANAGEMENT_TOGGLE_ALERTS, toggleAlertsInfo)
  );
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsZXJ0TWFuYWdlbWVudEFsZXJ0VGFibGVTYWdhLmpzIl0sIm5hbWVzIjpbInVwZGF0ZUFsZXJ0c0luZm8iLCJhY3Rpb24iLCJyZXNwb25zZSIsImNhbGwiLCJheGlvcyIsInBvc3QiLCJuZXdBbGVydHMiLCJoZWFkZXJzIiwiQWNjZXB0IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInN0YXR1cyIsImZldGNoQWxlcnRzSW5mbyIsImVycm9yIiwiZGVsZXRlQWxlcnRzSW5mbyIsImRlbGV0ZUFsZXJ0cyIsInRvZ2dsZUFsZXJ0c0luZm8iLCJ0b2dnbGVBbGVydHMiLCJhbGVydE1hbmFnZW1lbnRBbGVydFRhYmxlV2F0Y2hlciIsInRha2VFdmVyeSIsImFjdGlvblR5cGVzIiwiU0FHQV9BTEVSVF9NQU5BR0VNRU5UX1VQREFURV9BTEVSVFMiLCJTQUdBX0FMRVJUX01BTkFHRU1FTlRfREVMRVRFX0FMRVJUUyIsIlNBR0FfQUxFUlRfTUFOQUdFTUVOVF9UT0dHTEVfQUxFUlRTIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QTtBQUFBOztBQVNBLFFBQUlBLE1BQU0sS0FBSyxHQUFmLEVBQW9CO0FBQUE7QUFBQTtBQUFBO0FBQ2hCLFlBQU07QUFBQTtBQUFBO0FBQUFDO0FBQUFBO0FBQUFBO0FBQUFBO0FBQU47QUFDSCxLQUZEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHSCxHQVpELENBYUEsT0FBT0MsS0FBUCxFQUFjO0FBQ1g7QUFDRjtBQUNKOztBQUVNLFVBQVVLLGdDQUFWLEdBQTZDO0FBQUE7QUFBQTtBQUFBO0FBQ2hELFFBQU07QUFBQTtBQUFBO0FBQUFDO0FBQUFBO0FBQUFBO0FBQUFBLGVBQVVDLFdBQVcsQ0FBQ0MsbUNBQXRCLEVBQTJEckIsZ0JBQTNEO0FBQU47O0FBRGdEO0FBQUE7QUFFaEQsUUFBTTtBQUFBO0FBQUE7QUFBQW1CO0FBQUFBO0FBQUFBO0FBQUFBLGVBQVVDLFdBQVcsQ0FBQ0UsbUNBQXRCLEVBQTJEUixnQkFBM0Q7QUFBTjs7QUFGZ0Q7QUFBQTtBQUdoRCxRQUFNO0FBQUE7QUFBQTtBQUFBSztBQUFBQTtBQUFBQTtBQUFBQSxlQUFVQyxXQUFXLENBQUNHLG1DQUF0QixFQUEyRFAsZ0JBQTNEO0FBQU47QUFDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgQ09QWVJJR0hUIChjKSAyMDE5IFNBTVNVTkcgRUxFQ1RST05JQ1MgQ08uLCBMVEQuICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgIEFMTCBSSUdIVFMgUkVTRVJWRUQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCB0byBsaWNlbnNlZXMgb2YgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gICAgICAgIC9cbi8gICBwcm9kdWN0cyB0byB1c2Ugb3IgYWJzdHJhY3QgdGhpcyBjb21wdXRlciBwcm9ncmFtIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mICAgICAgICAgL1xuLyAgIGltcGxlbWVudGluZyBhIHByb2R1Y3QgYmFzZWQgb24gU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gcHJvZHVjdHMuICAgICAgICAgICAvXG4vICAgTm8gb3RoZXIgcmlnaHRzIHRvIHJlcHJvZHVjZSwgdXNlLCBvciBkaXNzZW1pbmF0ZSB0aGlzIGNvbXB1dGVyIHByb2dyYW0sICAgICAgICAgIC9cbi8gICB3aGV0aGVyIGluIHBhcnQgb3IgaW4gd2hvbGUsIGFyZSBncmFudGVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIG1ha2VzIG5vIHJlcHJlc2VudGF0aW9uIG9yIHdhcnJhbnRpZXMgd2l0aCAgICAgICAgICAvXG4vICAgcmVzcGVjdCB0byB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyBjb21wdXRlciBwcm9ncmFtLCBhbmQgc3BlY2lmaWNhbGx5IGRpc2NsYWltcyAgIC9cbi8gICBhbnkgcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYW1hZ2VzLCBzcGVjaWFsIG9yIGNvbnNlcXVlbnRpYWwsIGNvbm5lY3RlZCAgICAgICAgICAgL1xuLyAgIHdpdGggdGhlIHVzZSBvZiB0aGlzIHByb2dyYW0uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuXG5cbkRFU0NSSVBUSU9OOiA8Q29udGFpbnMgR2VuZXJhdG9yIEZ1bmN0aW9ucyBmb3IgQWxlcnQgVGFibGUgY29tcG9uZW50PiAqXG5ATkFNRSA6IGFsZXJ0TWFuYWdlbWVudEFsZXJ0VGFibGVTYWdhLmpzXG5AQVVUSE9SUzogSmF5IEhpdGVzaCBTYW5naGF2aSBcbkBWZXJzaW9uIDogMS4wICpcbkBSRVZJU0lPTiBISVNUT1JZXG5bMDMvMDYvMjAxOV0gW0pheV0gOiBQcm90b3R5cGluZy4uLi4uLi4uLi4vLy8vLy8vLy8vLy8vLy8vLy8vL1xuKi9cbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBjYWxsLCB0YWtlRXZlcnl9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25UeXBlcyBmcm9tIFwiLi4vc3RvcmUvYWN0aW9ucy9hY3Rpb25UeXBlc1wiO1xuaW1wb3J0IHtmZXRjaEFsZXJ0c0luZm99IGZyb20gXCIuL2FsZXJ0TWFuYWdlbWVudFNhZ2FcIlxuXG5leHBvcnQgZnVuY3Rpb24qIHVwZGF0ZUFsZXJ0c0luZm8oYWN0aW9uKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBjYWxsKFtheGlvcywgYXhpb3MucG9zdF0sICcvYXBpL3YxLjAvdXBkYXRlX2FsZXJ0cy8nLGFjdGlvbi5uZXdBbGVydHMseyBcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICd4LWFjY2Vzcy10b2tlbic6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHtzdGF0dXN9ID0gcmVzcG9uc2U7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgeWllbGQgZmV0Y2hBbGVydHNJbmZvKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBkZWxldGVBbGVydHNJbmZvKGFjdGlvbikge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgY2FsbChbYXhpb3MsIGF4aW9zLnBvc3RdLCAnL2FwaS92MS4wL2RlbGV0ZV9hbGVydHMvJyxhY3Rpb24uZGVsZXRlQWxlcnRzLHsgXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7c3RhdHVzfSA9IHJlc3BvbnNlO1xuICAgICAgICBpZiAoc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHlpZWxkIGZldGNoQWxlcnRzSW5mbygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgIDtcbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uKiB0b2dnbGVBbGVydHNJbmZvKGFjdGlvbikge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgY2FsbChbYXhpb3MsIGF4aW9zLnBvc3RdLCAnL2FwaS92MS4wL3RvZ2dsZV9hbGVydF9zdGF0dXMvJyxhY3Rpb24udG9nZ2xlQWxlcnRzLHsgXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7c3RhdHVzfSA9IHJlc3BvbnNlO1xuICAgICAgICBpZiAoc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHlpZWxkIGZldGNoQWxlcnRzSW5mbygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgIDtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogYWxlcnRNYW5hZ2VtZW50QWxlcnRUYWJsZVdhdGNoZXIoKSB7XG4gICAgeWllbGQgdGFrZUV2ZXJ5KGFjdGlvblR5cGVzLlNBR0FfQUxFUlRfTUFOQUdFTUVOVF9VUERBVEVfQUxFUlRTLCB1cGRhdGVBbGVydHNJbmZvKTtcbiAgICB5aWVsZCB0YWtlRXZlcnkoYWN0aW9uVHlwZXMuU0FHQV9BTEVSVF9NQU5BR0VNRU5UX0RFTEVURV9BTEVSVFMsIGRlbGV0ZUFsZXJ0c0luZm8pO1xuICAgIHlpZWxkIHRha2VFdmVyeShhY3Rpb25UeXBlcy5TQUdBX0FMRVJUX01BTkFHRU1FTlRfVE9HR0xFX0FMRVJUUywgdG9nZ2xlQWxlcnRzSW5mbyk7XG59XG4iXX0=