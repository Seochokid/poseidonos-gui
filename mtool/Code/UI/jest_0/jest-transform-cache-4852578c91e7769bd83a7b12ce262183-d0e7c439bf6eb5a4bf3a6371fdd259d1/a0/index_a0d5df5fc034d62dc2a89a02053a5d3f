bf37b37c619290784aa2bf55f8968d24
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));

var _DialogActions = _interopRequireDefault(require("@material-ui/core/DialogActions"));

var _DialogContent = _interopRequireDefault(require("@material-ui/core/DialogContent"));

var _DialogContentText = _interopRequireDefault(require("@material-ui/core/DialogContentText"));

var _styles = require("@material-ui/core/styles");

var _DialogTitle = _interopRequireDefault(require("@material-ui/core/DialogTitle"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _core = require("@material-ui/core");

var _theme = require("../../theme");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/ChangePassword/index.js";

const styles = theme => ({
  title: {
    backgroundColor: '#424850',
    color: theme.palette.common.white,
    padding: '5px'
  },
  dialogContent: {
    display: 'flex',
    alignItems: 'center'
  },
  submit: {
    // background: '#007bff',
    height: '1.8rem',
    fontSize: '12px',
    textTransform: 'none',
    minWidth: '0px',
    width: '60px'
  },
  closeButton: {
    position: 'absolute',
    right: theme.spacing(),
    top: '0px',
    color: theme.palette.grey[500]
  },
  buttonStyle: {
    height: '22px',
    background: '#1a4d91',
    padding: '2px 16px',
    textAlign: 'center',
    cursor: 'pointer',
    color: 'white',
    margin: '0 5px',
    border: 'none',
    display: 'flex',
    justifyContent: 'center',
    align: 'center'
  },
  textField: {
    width: '70%'
  },
  actions: {
    margin: '0 20px 20px 20px',
    justifyContent: 'center'
  }
});

const DialogTitle = (0, _styles.withStyles)(styles)(props => {
  const children = props.children,
        classes = props.classes,
        onClose = props.onClose;
  return _react.default.createElement(_DialogTitle.default, {
    disableTypography: true,
    className: classes.title,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 92
    },
    __self: void 0
  }, _react.default.createElement(_Typography.default, {
    variant: "h6",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 93
    },
    __self: void 0
  }, children), _react.default.createElement(_IconButton.default, {
    "aria-label": "Close",
    className: classes.closeButton,
    onClick: onClose,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 94
    },
    __self: void 0
  }, _react.default.createElement("span", {
    style: {
      fontSize: '14px',
      color: '#fff'
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 99
    },
    __self: void 0
  }, "x")));
});

const ChangePassword = props => {
  const classes = props.classes;
  return _react.default.createElement(_MuiThemeProvider.default, {
    theme: _theme.PageTheme,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 108
    },
    __self: void 0
  }, _react.default.createElement(_Dialog.default, {
    open: props.open,
    onClose: props.handleClose,
    "aria-labelledby": "alert-dialog-title",
    "aria-describedby": "alert-dialog-description",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109
    },
    __self: void 0
  }, _react.default.createElement(DialogTitle, {
    onClose: props.handleClose,
    id: "alert-dialog-title",
    className: classes.title,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115
    },
    __self: void 0
  }, _react.default.createElement("span", {
    style: {
      display: 'flex',
      padding: '3px',
      paddingLeft: '10px',
      color: '#fff',
      fontSize: '14px',
      fontWeight: 500,
      alignItems: 'center'
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120
    },
    __self: void 0
  }, "Change Password")), _react.default.createElement(_DialogContent.default, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 134
    },
    __self: void 0
  }, _react.default.createElement(_DialogContentText.default, {
    id: "alert-dialog-description",
    className: classes.dialogContent,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 135
    },
    __self: void 0
  }, _react.default.createElement(_core.Grid, {
    container: true,
    justify: "center",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139
    },
    __self: void 0
  }, _react.default.createElement(_core.Grid, {
    item: true,
    xs: 12,
    container: true,
    justify: "center",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140
    },
    __self: void 0
  }, _react.default.createElement(_core.TextField, {
    className: classes.textField,
    required: true,
    margin: "none",
    value: props.oldPassword,
    name: "oldPassword",
    type: "password",
    label: "Old Password",
    placeholder: "Enter Old Password",
    onChange: props.OnHandleChange,
    onKeyDown: e => /[+-,#, ,]$/.test(e.key) && e.preventDefault(),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 141
    },
    __self: void 0
  })), _react.default.createElement(_core.Grid, {
    item: true,
    xs: 12,
    container: true,
    justify: "center",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 153
    },
    __self: void 0
  }, _react.default.createElement(_core.TextField, {
    className: classes.textField,
    required: true,
    margin: "none",
    value: props.newPassword,
    name: "newPassword",
    type: "password",
    label: "New Password",
    placeholder: "Enter New Password",
    onChange: props.OnHandleChange,
    onKeyDown: e => /[+-,#, ,]$/.test(e.key) && e.preventDefault(),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 154
    },
    __self: void 0
  })), _react.default.createElement(_core.Grid, {
    item: true,
    xs: 12,
    container: true,
    justify: "center",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 166
    },
    __self: void 0
  }, _react.default.createElement(_core.TextField, {
    className: classes.textField,
    required: true,
    margin: "none",
    name: "confirmPassword",
    value: props.confirmPassword,
    type: "password",
    label: "Confirm Password",
    placeholder: "Confirm New Password",
    onChange: props.OnHandleChange,
    onKeyDown: e => /[+-,#, ,]$/.test(e.key) && e.preventDefault(),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 167
    },
    __self: void 0
  }))))), _react.default.createElement(_DialogActions.default, {
    className: classes.actions,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 183
    },
    __self: void 0
  }, _react.default.createElement(_Button.default, {
    color: "primary",
    variant: "contained",
    onClick: props.handleClose,
    className: classes.submit,
    autoFocus: true,
    id: "change-pwd-cancel",
    "data-testid": "change-pwd-cancel",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 184
    },
    __self: void 0
  }, "Cancel"), _react.default.createElement(_Button.default, {
    color: "primary",
    variant: "contained",
    className: classes.submit,
    onClick: props.onConfirm,
    id: "change-pwd-submit",
    "data-testid": "change-pwd-submit",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 195
    },
    __self: void 0
  }, "Submit"))));
};

var _default = (0, _styles.withStyles)(styles)(ChangePassword);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,