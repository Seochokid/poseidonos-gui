35b0b99367b7a8b3a4dda587ceaf83a1
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@material-ui/core");

require("./AddNewAlerts.css");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AddNewAlerts/index.js";

const styles = theme => {
  return {
    addNewAlertsOuterGrid: {
      border: '1px solid gray',
      maxWidth: '100%',
      minHeight: '140px',
      maxHeight: '140px',
      overflowY: 'auto',
      justifyContent: 'center',
      background: '#fff'
    },
    addNewAlertsFirstInnerGrid: {
      maxWidth: '58%',
      flexBasis: '58%',
      marginTop: theme.spacing(2)
    },
    addNewAlertsSecondInnerGrid: {
      maxWidth: '42%',
      marginTop: theme.spacing(2)
    },
    addNewAlertsThirdInnerGrid: {
      maxWidth: '100%',
      flexBasis: '100%',
      marginBottom: theme.spacing(2)
    },
    container: {
      display: 'flex',
      flexWrap: 'wrap',
      maxWidth: '100%'
    },
    textField: {
      marginLeft: theme.spacing(2),
      width: '36%'
    },
    formLabel: {
      marginTop: theme.spacing(2.7),
      marginLeft: theme.spacing(1.7),
      marginRight: theme.spacing(1.7),
      display: 'inline-flex',
      justifyContent: 'center',
      width: '18%',
      fontSize: 12
    },
    description: {
      marginLeft: theme.spacing(2),
      marginRight: theme.spacing(2),
      marginTop: theme.spacing(1),
      width: '90%',
      overflowY: 'auto'
    },
    formLabelIs: {
      marginTop: theme.spacing(2.7),
      marginRight: theme.spacing(1.7),
      display: 'inline-flex',
      justifyContent: 'center',
      width: '5%',
      marginLeft: '0px'
    },
    selectFieldItem: {
      color: 'black',
      width: '50%'
    },
    selectMenuItem: {
      color: 'black'
    },
    button: {
      float: 'right',
      marginTop: theme.spacing(3.5),
      marginLeft: theme.spacing(2),
      textTransform: 'none',
      paddingTop: '1px',
      background: '#788595',
      minWidth: '55px',
      maxHeight: '25px',
      color: 'white',
      '&:hover': {
        background: 'rgb(94,104,116)',
        // borderColor: 'black',
        color: 'white'
      }
    }
  };
};

const AddNewAlerts = props => {
  const classes = props.classes;
  return _react.default.createElement(_core.Grid, {
    container: true,
    spacing: 1 / 2,
    direction: "row",
    className: classes.addNewAlertsOuterGrid,
    "data-testid": "addNewAlertsTag",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120
    },
    __self: void 0
  }, _react.default.createElement(_core.Grid, {
    sm: 6,
    xs: 12,
    item: true,
    container: true,
    className: classes.addNewAlertsFirstInnerGrid,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 121
    },
    __self: void 0
  }, _react.default.createElement(_core.TextField, {
    className: classes.textField,
    required: true,
    multiline: true,
    rowsMax: "1",
    id: "standard-required",
    margin: "none",
    value: props.alertName,
    name: "alertName",
    label: "Alert Name",
    placeholder: "Enter Alert Name",
    onChange: props.onHandleChange,
    onKeyDown: e => /[+-.,#, ,]$/.test(e.key) && e.preventDefault(),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122
    },
    __self: void 0
  }), _react.default.createElement(_core.Typography, {
    className: classes.formLabel,
    variant: "caption",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 135
    },
    __self: void 0
  }, " -Send Alert Where"), _react.default.createElement(_core.TextField, {
    required: true,
    disabled: true,
    label: "Alert Field",
    id: "standard-name",
    value: props.alertRadioButton,
    className: classes.textField,
    margin: "none",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 136
    },
    __self: void 0
  })), _react.default.createElement(_core.Grid, {
    sm: 6,
    xs: 12,
    item: true,
    className: classes.addNewAlertsSecondInnerGrid,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 146
    },
    __self: void 0
  }, _react.default.createElement(_core.Typography, {
    className: classes.formLabelIs,
    variant: "caption",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147
    },
    __self: void 0
  }, "Is"), _react.default.createElement(_core.Select, {
    className: classes.selectFieldItem,
    onChange: props.onHandleDropdownChange,
    value: props.alertCondition,
    SelectDisplayProps: {
      'data-testid': "selectAddNewAlertsTag"
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148
    },
    __self: void 0
  }, props.dropdownCondition ? props.dropdownCondition.map(eachValue => {
    return _react.default.createElement(_core.MenuItem, {
      className: classes.selectMenuItem,
      key: eachValue,
      value: eachValue,
      "data-testid": "selectMenuItemAddNewAlertsTag",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 155
      },
      __self: void 0
    }, eachValue);
  }) : null), _react.default.createElement(_core.TextField, {
    inputProps: {
      'data-testid': "Alert_Range_TextField"
    },
    required: true,
    multiline: true,
    rowsMax: "1",
    name: "alertRange",
    onChange: props.onHandleChange,
    placeholder: "Please specify a value in % eg.10",
    id: "standard-required",
    value: props.alertRange,
    className: classes.textField,
    label: "Value",
    margin: "none",
    onKeyDown: f => /[+-,.,#]$/.test(f.key) && f.preventDefault(),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 159
    },
    __self: void 0
  })), _react.default.createElement(_core.Grid, {
    sm: 6,
    xs: 12,
    item: true,
    className: classes.addNewAlertsThirdInnerGrid,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 177
    },
    __self: void 0
  }, _react.default.createElement(_core.TextField, {
    id: "standard-multiline-flexible",
    label: "Description",
    multiline: true,
    rowsMax: "1",
    className: classes.description,
    margin: "none",
    onChange: props.onHandleChange,
    placeholder: "Enter your message here - This will be the subject of your email",
    value: props.description,
    name: "description",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 178
    },
    __self: void 0
  }), _react.default.createElement(_core.ButtonGroup, {
    "data-testid": "ButtonTag",
    size: "small",
    color: "primary",
    onClick: () => {
      props.openAlert('Add');
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 190
    },
    __self: void 0
  }, _react.default.createElement(_core.Button, {
    variant: "contained",
    className: classes.button,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 191
    },
    __self: void 0
  }, "Add"))));
};

var _default = (0, _core.withStyles)(styles)(AddNewAlerts);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,