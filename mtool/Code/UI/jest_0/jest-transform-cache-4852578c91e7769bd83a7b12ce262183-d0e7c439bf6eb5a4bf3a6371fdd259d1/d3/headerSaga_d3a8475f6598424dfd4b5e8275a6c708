625996a3f7757a495a8d6b01765a9bdb
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = headerWatcher;

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

/* -------------------------------------------------------------------------------------/
                                                                                    /
/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /
/                          ALL RIGHTS RESERVED                                        /
/                                                                                     /
/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /
/   products to use or abstract this computer program for the sole purpose of         /
/   implementing a product based on Samsung Electronics Co., Ltd. products.           /
/   No other rights to reproduce, use, or disseminate this computer program,          /
/   whether in part or in whole, are granted.                                         / 
/                                                                                     /
/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /
/   respect to the performance of this computer program, and specifically disclaims   /
/   any responsibility for any damages, special or consequential, connected           /
/   with the use of this program.                                                     /
/                                                                                     /
/-------------------------------------------------------------------------------------/


DESCRIPTION: <Contains Generator Functions for header component> *
@NAME : headerSaga.js
@AUTHORS: Jay Hitesh Sanghavi 
@Version : 1.0 *
@REVISION HISTORY
[03/06/2019] [Jay] : Prototyping..........////////////////////
*/
function* CallIsiBOFOSRunning(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_Is_Ibof_OS_Running/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });

    if (response && response.status === 401) {
      action.payload.push('/');
      localStorage.setItem('isLoggedIn', false);
      localStorage.setItem('BMC_LoggedIn', false);
    }

    if (response && response.status === 500) {
      yield (0, _effects.put)(actionCreators.asyncIsiBOFOSRunning(false, "Not Running"));
    }

    const result = response.data;
    if (result) yield (0, _effects.put)(actionCreators.updateTimestamp(result.lastRunningTime));

    if (result && result.RESULT && result.RESULT.result && result.RESULT.result.data && result.RESULT.result.data.type && result.RESULT.result.data.type.toUpperCase() === "NORMAL") {
      yield (0, _effects.put)(actionCreators.asyncIsiBOFOSRunning(true, "Running"));
    } else if (result && result.code === "2804" && result.value !== "100") {
      if (result.timestamp !== "") yield (0, _effects.put)(actionCreators.updateTimestamp(result.timestamp));
      let percentage = "";

      if (result && result.value !== "") {
        percentage = `Rebuilding: ${result.value}%`;
        localStorage.setItem('Rebuilding_Value', result.value);
        yield (0, _effects.put)(actionCreators.asyncIsiBOFOSRunning(false, percentage));
      } else yield (0, _effects.put)(actionCreators.asyncIsiBOFOSRunning(false, "Rebuilding: Value Not Found"));
    } else yield (0, _effects.put)(actionCreators.asyncIsiBOFOSRunning(false, "Not Running"));
  } catch (e) {
    if (e.message.indexOf("401") >= 0) {
      action.payload.push("/");
    }

    yield (0, _effects.put)(actionCreators.asyncIsiBOFOSRunning(false, "Not Running"));
  }
}

function* headerWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_GET_IS_IBOF_OS_RUNNING, CallIsiBOFOSRunning);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,