{"version":3,"sources":["index.js"],"names":["styles","cardHeader","customTheme","card","header","marginLeft","editBtn","minWidth","borderRadius","VolumeList","Component","constructor","props","state","selectedVolumes","open","handleClickOpen","bind","handleClose","setState","selectVolumes","volumes","onVolumeEdit","value","name","id","changeField","render","classes","volumeTableColumns","title","field","rowData","edit","maxiops","min","e","target","maxbw","editable","sorting","row","editVolume","saveVolume","fetchVolumes","selection","showTextRowsSelected","headerStyle","backgroundColor","color","selectionProps","inputProps","Check","FirstPage","LastPage","NextPage","PreviousPage","Search","ThirdStateCheck","Remove","DetailPanel","ChevronRight","Export","SaveAlt","Filter","FilterList","Add","Edit","Delete","SortArrow","ArrowUpward","ResetSearch","rows","tooltip","icon","TrashIcon","iconProps","onClick","deleteVolumes","propTypes","PropTypes","arrayOf","object","isRequired"],"mappings":"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\n\nDESCRIPTION: <File description> *\n@NAME : index.js\n@AUTHORS: Jay Hitesh Sanghavi \n@Version : 1.0 *\n@REVISION HISTORY\n[03/06/2019] [Jay] : Prototyping..........////////////////////\n*/\nimport React, { Component } from 'react';\nimport 'react-dropdown/style.css';\nimport PropTypes from 'prop-types';\nimport Search from '@material-ui/icons/Search';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Add from '@material-ui/icons/Add';\nimport Check from '@material-ui/icons/Check';\nimport FilterList from '@material-ui/icons/FilterList';\nimport Remove from '@material-ui/icons/Remove';\nimport EditIcon from '@material-ui/icons/EditTwoTone';\nimport TrashIcon from '@material-ui/icons/Delete';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Clear from '@material-ui/icons/Clear';\nimport { Paper, Typography, withStyles, TextField, Button } from '@material-ui/core';\nimport MaterialTable from 'material-table';\n\nimport { Done } from '@material-ui/icons';\nimport AlertDialog from '../../Dialog';\nimport { customTheme } from '../../../theme';\n\n\nconst styles = () => ({\n  cardHeader: {\n    ...customTheme.card.header,\n    marginLeft: 0\n  },\n  editBtn: {\n    minWidth: 24,\n    borderRadius: 100\n  }\n});\n\nclass VolumeList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedVolumes: [],\n      open: false,\n\n    };\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n  \n  handleClickOpen() {\n    this.setState({\n      open: true,\n    });\n  }\n\n  handleClose() {\n    this.setState({ open: false });\n  }\n\n  selectVolumes(volumes) {\n    this.setState({\n      selectedVolumes: volumes\n    })\n  }\n\n  onVolumeEdit(value, name, id) {\n    this.props.changeField({\n      value,\n      name,\n      id\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n    const volumeTableColumns = [\n      {\n        title: 'Name',\n        field: 'name',\n      },\n      {\n        title: 'Total Size (GB)',\n        field: 'size'\n      },\n      {\n        title: 'Used Size ',\n        field: 'usedspace',\n      },\n/*\n      {\n        title: 'IP Address',\n        field: 'ip',\n      },\n      {\n        title: 'Port',\n        field: 'subnqn',\n      },\n      {\n        title: 'NQN',\n        field: 'subnqn',\n      },\n*/\n      {\n        title: 'Max IOPS',\n        field: 'maxiops',\n        render: rowData => {\n          if (rowData.edit) {\n             return (\n<TextField\n              id= {`VolumeList-textfield-maxiops-${ rowData.name}`}\n              value={rowData.maxiops}\n              type=\"number\"\n              inputProps={{\n                min: 0,\n                'data-testid':`list-vol-maxiops-${rowData.name}`\n              }}\n              onChange={(e) => this.onVolumeEdit(e.target.value, 'maxiops', rowData.id)}\n/>\n)\n          } \n            return rowData.maxiops === 0 ? 'MAX' : rowData.maxiops;\n          \n        }\n      },\n      {\n        title: 'Max Bandwidth',\n        field: 'maxbw',\n        render: rowData => {\n          if (rowData.edit) {\n             return (\n<TextField\n              id= {`VolumeList-textfield-maxbw-${ rowData.name}`}\n              name=\"maxbw\"\n              value={rowData.maxbw}\n              type=\"number\"\n              inputProps={{\n                min: 0,\n                'data-testid': `list-vol-maxbw-${rowData.name}`\n              }}\n              onChange={(e) => this.onVolumeEdit(e.target.value, 'maxbw', rowData.id)}\n/>\n)\n          } \n            return rowData.maxbw === 0 ? 'MAX' : rowData.maxbw;\n          \n        }\n      },\n      {\n        title: 'Status',\n        field: 'status',\n      },\n      {\n        title: 'Update',\n        field: 'edit',\n        editable: 'never',\n        sorting: false,\n        render: row => {\n          return !row.edit ? (\n              <Button\n                className={classes.editBtn}\n                data-testid={`vol-edit-btn-${row.name}`}\n                onClick={() => this.props.editVolume(row)}\n                id = {`VolumeList-btn-edit-${ row.name}`}\n              >\n                <EditIcon />\n              </Button>\n          ) : (\n            <React.Fragment>\n              <Button\n                className={classes.editBtn}\n                data-testid={`vol-edit-save-btn-${row.name}`}\n                onClick={() => this.props.saveVolume(row)}\n                id = {`VolumeList-btn-done-${ row.name}`}\n              >\n                <Done />\n              </Button>\n              <Button\n                data-testid={`vol-edit-cancel-btn-${row.name}`}\n                className={classes.editBtn}\n                onClick={this.props.fetchVolumes}\n                id = {`VolumeList-btn-clear-${ row.name}`}\n              >\n                <Clear />\n              </Button>\n            </React.Fragment>\n          );\n        }\n      }\n      \n    ];\n    return (\n      <Paper data-testid=\"volumelist-table\" id=\"VolumeList-table\">\n        {/* <ThemeProvider theme={tableTheme}> */}\n        <MaterialTable\n          title={(\n            <Typography className={classes.cardHeader}>Volume List</Typography>\n          )}\n          columns={volumeTableColumns}\n          data={this.props.volumes}\n          options={{\n            selection: true,\n            showTextRowsSelected: false,\n            headerStyle: {\n              // backgroundColor: '#71859d',\n              // backgroundColor: '#424850',\n              backgroundColor: '#788595',\n              color: '#FFF'\n            },\n            selectionProps: rowData => ({\n              'data-testid': rowData.name,\n              'id': `VolumeList-checkbox-${rowData.name}`,\n              inputProps: {\n                'title': rowData.name\n              }\n            })\n          }}\n          icons={{\n            Check: () => <Check id = \"VolumeList-icon-check\" /> ,\n            FirstPage: () => <FirstPage id=\"VolumeList-icon-firstpage\" /> ,\n            LastPage: () => <LastPage id=\"VolumeList-icon-lastpage\" />,\n            NextPage: () => <ChevronRight id=\"VolumeList-icon-nextpage\" />,\n            PreviousPage: () => <ChevronLeft id=\"VolumeList-icon-previouspage\" />,\n            Search: () => <Search id=\"VolumeList-icon-search\" /> ,\n            ThirdStateCheck: Remove,\n            DetailPanel: ChevronRight,\n            Export: SaveAlt,\n            Filter: FilterList,\n            Add,\n            Edit: () => <EditIcon id=\"VolumeList-icon-edit\" />,\n            Delete: () => <TrashIcon /> ,\n            SortArrow: ArrowUpward,\n            ResetSearch: ()=> <Clear id=\"VolumeList-icon-clearsearch\" />\n          }}\n          onSelectionChange={(rows) => {\n              this.selectVolumes(rows);\n          }}\n          actions={[\n            {\n              tooltip: 'Delete',\n              icon: TrashIcon,\n              iconProps: {\n                'id': \"VolumeList-icon-delete\"\n              },\n              onClick: () => { this.handleClickOpen() }\n            }\n          ]}\n        />\n        {/* </ThemeProvider> */}\n        <AlertDialog\n          title=\"Delete Volumes\"\n          description=\"Are you sure you want to delete the selected Volumes\"\n          open={this.state.open}\n          handleClose={this.handleClose}\n          onConfirm={() => {\n            this.handleClose()\n            this.props.deleteVolumes(this.state.selectedVolumes);\n          }}\n        />\n      </Paper>\n    );\n  }\n}\n\nVolumeList.propTypes = {\n  volumes: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default withStyles(styles)(VolumeList);\n"]}