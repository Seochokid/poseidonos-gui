90227689c3214af28e3ac76564288be7
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

require("react-dropdown/style.css");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _SaveAlt = _interopRequireDefault(require("@material-ui/icons/SaveAlt"));

var _ChevronLeft = _interopRequireDefault(require("@material-ui/icons/ChevronLeft"));

var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var _FirstPage = _interopRequireDefault(require("@material-ui/icons/FirstPage"));

var _LastPage = _interopRequireDefault(require("@material-ui/icons/LastPage"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _FilterList = _interopRequireDefault(require("@material-ui/icons/FilterList"));

var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));

var _EditTwoTone = _interopRequireDefault(require("@material-ui/icons/EditTwoTone"));

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _ArrowUpward = _interopRequireDefault(require("@material-ui/icons/ArrowUpward"));

var _Clear = _interopRequireDefault(require("@material-ui/icons/Clear"));

var _core = require("@material-ui/core");

var _materialTable = _interopRequireDefault(require("material-table"));

var _icons = require("@material-ui/icons");

var _Dialog = _interopRequireDefault(require("../../Dialog"));

var _theme = require("../../../theme");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/VolumeManagement/VolumeList/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = () => ({
  cardHeader: _objectSpread({}, _theme.customTheme.card.header, {
    marginLeft: 0
  }),
  editBtn: {
    minWidth: 24,
    borderRadius: 100
  }
});

class VolumeList extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      selectedVolumes: [],
      open: false
    };
    this.handleClickOpen = this.handleClickOpen.bind(this);
    this.handleClose = this.handleClose.bind(this);
  }

  handleClickOpen() {
    this.setState({
      open: true
    });
  }

  handleClose() {
    this.setState({
      open: false
    });
  }

  selectVolumes(volumes) {
    this.setState({
      selectedVolumes: volumes
    });
  }

  onVolumeEdit(value, name, id) {
    this.props.changeField({
      value,
      name,
      id
    });
  }

  render() {
    const classes = this.props.classes;
    const volumeTableColumns = [{
      title: 'Name',
      field: 'name'
    }, {
      title: 'Total Size (GB)',
      field: 'size'
    }, {
      title: 'Used Size ',
      field: 'usedspace'
    },
    /*
          {
            title: 'IP Address',
            field: 'ip',
          },
          {
            title: 'Port',
            field: 'subnqn',
          },
          {
            title: 'NQN',
            field: 'subnqn',
          },
    */
    {
      title: 'Max IOPS',
      field: 'maxiops',
      render: rowData => {
        if (rowData.edit) {
          return _react.default.createElement(_core.TextField, {
            id: `VolumeList-textfield-maxiops-${rowData.name}`,
            value: rowData.maxiops,
            type: "number",
            inputProps: {
              min: 0,
              'data-testid': `list-vol-maxiops-${rowData.name}`
            },
            onChange: e => this.onVolumeEdit(e.target.value, 'maxiops', rowData.id),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 134
            },
            __self: this
          });
        }

        return rowData.maxiops === 0 ? 'MAX' : rowData.maxiops;
      }
    }, {
      title: 'Max Bandwidth',
      field: 'maxbw',
      render: rowData => {
        if (rowData.edit) {
          return _react.default.createElement(_core.TextField, {
            id: `VolumeList-textfield-maxbw-${rowData.name}`,
            name: "maxbw",
            value: rowData.maxbw,
            type: "number",
            inputProps: {
              min: 0,
              'data-testid': `list-vol-maxbw-${rowData.name}`
            },
            onChange: e => this.onVolumeEdit(e.target.value, 'maxbw', rowData.id),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 156
            },
            __self: this
          });
        }

        return rowData.maxbw === 0 ? 'MAX' : rowData.maxbw;
      }
    }, {
      title: 'Status',
      field: 'status'
    }, {
      title: 'Update',
      field: 'edit',
      editable: 'never',
      sorting: false,
      render: row => {
        return !row.edit ? _react.default.createElement(_core.Button, {
          className: classes.editBtn,
          "data-testid": `vol-edit-btn-${row.name}`,
          onClick: () => this.props.editVolume(row),
          id: `VolumeList-btn-edit-${row.name}`,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 184
          },
          __self: this
        }, _react.default.createElement(_EditTwoTone.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 190
          },
          __self: this
        })) : _react.default.createElement(_react.default.Fragment, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 193
          },
          __self: this
        }, _react.default.createElement(_core.Button, {
          className: classes.editBtn,
          "data-testid": `vol-edit-save-btn-${row.name}`,
          onClick: () => this.props.saveVolume(row),
          id: `VolumeList-btn-done-${row.name}`,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 194
          },
          __self: this
        }, _react.default.createElement(_icons.Done, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 200
          },
          __self: this
        })), _react.default.createElement(_core.Button, {
          "data-testid": `vol-edit-cancel-btn-${row.name}`,
          className: classes.editBtn,
          onClick: this.props.fetchVolumes,
          id: `VolumeList-btn-clear-${row.name}`,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 202
          },
          __self: this
        }, _react.default.createElement(_Clear.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 208
          },
          __self: this
        })));
      }
    }];
    return _react.default.createElement(_core.Paper, {
      "data-testid": "volumelist-table",
      id: "VolumeList-table",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 217
      },
      __self: this
    }, _react.default.createElement(_materialTable.default, {
      title: _react.default.createElement(_core.Typography, {
        className: classes.cardHeader,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 221
        },
        __self: this
      }, "Volume List"),
      columns: volumeTableColumns,
      data: this.props.volumes,
      options: {
        selection: true,
        showTextRowsSelected: false,
        headerStyle: {
          // backgroundColor: '#71859d',
          // backgroundColor: '#424850',
          backgroundColor: '#788595',
          color: '#FFF'
        },
        selectionProps: rowData => ({
          'data-testid': rowData.name,
          'id': `VolumeList-checkbox-${rowData.name}`,
          inputProps: {
            'title': rowData.name
          }
        })
      },
      icons: {
        Check: () => _react.default.createElement(_Check.default, {
          id: "VolumeList-icon-check",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 243
          },
          __self: this
        }),
        FirstPage: () => _react.default.createElement(_FirstPage.default, {
          id: "VolumeList-icon-firstpage",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 244
          },
          __self: this
        }),
        LastPage: () => _react.default.createElement(_LastPage.default, {
          id: "VolumeList-icon-lastpage",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 245
          },
          __self: this
        }),
        NextPage: () => _react.default.createElement(_ChevronRight.default, {
          id: "VolumeList-icon-nextpage",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 246
          },
          __self: this
        }),
        PreviousPage: () => _react.default.createElement(_ChevronLeft.default, {
          id: "VolumeList-icon-previouspage",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 247
          },
          __self: this
        }),
        Search: () => _react.default.createElement(_Search.default, {
          id: "VolumeList-icon-search",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 248
          },
          __self: this
        }),
        ThirdStateCheck: _Remove.default,
        DetailPanel: _ChevronRight.default,
        Export: _SaveAlt.default,
        Filter: _FilterList.default,
        Add: _Add.default,
        Edit: () => _react.default.createElement(_EditTwoTone.default, {
          id: "VolumeList-icon-edit",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 254
          },
          __self: this
        }),
        Delete: () => _react.default.createElement(_Delete.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 255
          },
          __self: this
        }),
        SortArrow: _ArrowUpward.default,
        ResetSearch: () => _react.default.createElement(_Clear.default, {
          id: "VolumeList-icon-clearsearch",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 257
          },
          __self: this
        })
      },
      onSelectionChange: rows => {
        this.selectVolumes(rows);
      },
      actions: [{
        tooltip: 'Delete',
        icon: _Delete.default,
        iconProps: {
          'id': "VolumeList-icon-delete"
        },
        onClick: () => {
          this.handleClickOpen();
        }
      }],
      __source: {
        fileName: _jsxFileName,
        lineNumber: 219
      },
      __self: this
    }), _react.default.createElement(_Dialog.default, {
      title: "Delete Volumes",
      description: "Are you sure you want to delete the selected Volumes",
      open: this.state.open,
      handleClose: this.handleClose,
      onConfirm: () => {
        this.handleClose();
        this.props.deleteVolumes(this.state.selectedVolumes);
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 274
      },
      __self: this
    }));
  }

}

VolumeList.propTypes = {
  volumes: _propTypes.default.arrayOf(_propTypes.default.object).isRequired
};

var _default = (0, _core.withStyles)(styles)(VolumeList);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,