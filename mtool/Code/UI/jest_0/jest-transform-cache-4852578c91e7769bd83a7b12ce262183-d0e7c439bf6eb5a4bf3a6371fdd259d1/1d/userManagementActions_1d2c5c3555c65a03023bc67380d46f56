488335a59dd31deb551906d790465a4b
/* istanbul ignore next */
"use strict";

var cov_m8f3jjp36 = function () {
  var path = "/home/ibof07/pk/ibofmgmt/Code/UI/src/store/actions/userManagementActions.js";
  var hash = "b49024751f4c5bcb4c0c43507d981ea9c3053eaa";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ibof07/pk/ibofmgmt/Code/UI/src/store/actions/userManagementActions.js",
    statementMap: {
      "0": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 34,
          column: 1
        }
      },
      "1": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "2": {
        start: {
          line: 36,
          column: 28
        },
        end: {
          line: 41,
          column: 1
        }
      },
      "3": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 40,
          column: 6
        }
      },
      "4": {
        start: {
          line: 43,
          column: 30
        },
        end: {
          line: 48,
          column: 1
        }
      },
      "5": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 47,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 29,
            column: 27
          },
          end: {
            line: 29,
            column: 28
          }
        },
        loc: {
          start: {
            line: 29,
            column: 42
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 29
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 36,
            column: 28
          },
          end: {
            line: 36,
            column: 29
          }
        },
        loc: {
          start: {
            line: 36,
            column: 46
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 36
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 30
          },
          end: {
            line: 43,
            column: 31
          }
        },
        loc: {
          start: {
            line: 43,
            column: 41
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 43
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "b49024751f4c5bcb4c0c43507d981ea9c3053eaa"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchUsersInfo = exports.setUsersInfo = exports.openUserBox = void 0;

var
/* istanbul ignore next */
actionTypes = _interopRequireWildcard(require("./actionTypes"));

/* istanbul ignore next */
cov_m8f3jjp36.s[0]++;

const openUserBox = userParam => {
  /* istanbul ignore next */
  cov_m8f3jjp36.f[0]++;
  cov_m8f3jjp36.s[1]++;
  return {
    type: actionTypes.USER_MANAGEMENT_OPEN_USER_BOX,
    userParam
  };
};

/* istanbul ignore next */
exports.openUserBox = openUserBox;
cov_m8f3jjp36.s[2]++;

const setUsersInfo = updatedUsers => {
  /* istanbul ignore next */
  cov_m8f3jjp36.f[1]++;
  cov_m8f3jjp36.s[3]++;
  return {
    type: actionTypes.USER_MANAGEMENT_SET_USERS,
    updatedUsers
  };
};

/* istanbul ignore next */
exports.setUsersInfo = setUsersInfo;
cov_m8f3jjp36.s[4]++;

const fetchUsersInfo = users => {
  /* istanbul ignore next */
  cov_m8f3jjp36.f[2]++;
  cov_m8f3jjp36.s[5]++;
  return {
    type: actionTypes.USER_MANAGEMENT_FETCH_USERS,
    users
  };
};

/* istanbul ignore next */
exports.fetchUsersInfo = fetchUsersInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJNYW5hZ2VtZW50QWN0aW9ucy5qcyJdLCJuYW1lcyI6WyJvcGVuVXNlckJveCIsInVzZXJQYXJhbSIsInR5cGUiLCJhY3Rpb25UeXBlcyIsIlVTRVJfTUFOQUdFTUVOVF9PUEVOX1VTRVJfQk9YIiwic2V0VXNlcnNJbmZvIiwidXBkYXRlZFVzZXJzIiwiVVNFUl9NQU5BR0VNRU5UX1NFVF9VU0VSUyIsImZldGNoVXNlcnNJbmZvIiwidXNlcnMiLCJVU0VSX01BTkFHRU1FTlRfRkVUQ0hfVVNFUlMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCQTtBQUFBO0FBQUE7Ozs7O0FBRU8sTUFBTUEsV0FBVyxHQUFJQyxTQUFELElBQWU7QUFBQTtBQUFBO0FBQUE7QUFDdEMsU0FBTztBQUNIQyxJQUFBQSxJQUFJLEVBQUNDLFdBQVcsQ0FBQ0MsNkJBRGQ7QUFFSEgsSUFBQUE7QUFGRyxHQUFQO0FBSUgsQ0FMTTs7Ozs7O0FBT0EsTUFBTUksWUFBWSxHQUFJQyxZQUFELElBQWtCO0FBQUE7QUFBQTtBQUFBO0FBQzFDLFNBQU87QUFDSEosSUFBQUEsSUFBSSxFQUFDQyxXQUFXLENBQUNJLHlCQURkO0FBRUhELElBQUFBO0FBRkcsR0FBUDtBQUlILENBTE07Ozs7OztBQU9BLE1BQU1FLGNBQWMsR0FBSUMsS0FBRCxJQUFXO0FBQUE7QUFBQTtBQUFBO0FBQ3JDLFNBQU87QUFDSFAsSUFBQUEsSUFBSSxFQUFDQyxXQUFXLENBQUNPLDJCQURkO0FBRUhELElBQUFBO0FBRkcsR0FBUDtBQUlILENBTE0iLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgIENPUFlSSUdIVCAoYykgMjAxOSBTQU1TVU5HIEVMRUNUUk9OSUNTIENPLiwgTFRELiAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICBBTEwgUklHSFRTIFJFU0VSVkVEICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQgdG8gbGljZW5zZWVzIG9mIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuICAgICAgICAvXG4vICAgcHJvZHVjdHMgdG8gdXNlIG9yIGFic3RyYWN0IHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSBmb3IgdGhlIHNvbGUgcHVycG9zZSBvZiAgICAgICAgIC9cbi8gICBpbXBsZW1lbnRpbmcgYSBwcm9kdWN0IGJhc2VkIG9uIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIHByb2R1Y3RzLiAgICAgICAgICAgL1xuLyAgIE5vIG90aGVyIHJpZ2h0cyB0byByZXByb2R1Y2UsIHVzZSwgb3IgZGlzc2VtaW5hdGUgdGhpcyBjb21wdXRlciBwcm9ncmFtLCAgICAgICAgICAvXG4vICAgd2hldGhlciBpbiBwYXJ0IG9yIGluIHdob2xlLCBhcmUgZ3JhbnRlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8gXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBtYWtlcyBubyByZXByZXNlbnRhdGlvbiBvciB3YXJyYW50aWVzIHdpdGggICAgICAgICAgL1xuLyAgIHJlc3BlY3QgdG8gdGhlIHBlcmZvcm1hbmNlIG9mIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgYW5kIHNwZWNpZmljYWxseSBkaXNjbGFpbXMgICAvXG4vICAgYW55IHJlc3BvbnNpYmlsaXR5IGZvciBhbnkgZGFtYWdlcywgc3BlY2lhbCBvciBjb25zZXF1ZW50aWFsLCBjb25uZWN0ZWQgICAgICAgICAgIC9cbi8gICB3aXRoIHRoZSB1c2Ugb2YgdGhpcyBwcm9ncmFtLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cblxuXG5ERVNDUklQVElPTjogPENvbnRhaW5zIHB1cmUgYWN0aW9ucyBmb3IgVXNlciBNYW5hZ2VtZW50IENvbnRhaW5lcj4gKlxuQE5BTUUgOiB1c2VyTWFuYWdlbWVudEFjdGlvbnMuanNcbkBBVVRIT1JTOiBKYXkgSGl0ZXNoIFNhbmdoYXZpIFxuQFZlcnNpb24gOiAxLjAgKlxuQFJFVklTSU9OIEhJU1RPUllcblswMy8wNi8yMDE5XSBbSmF5XSA6IFByb3RvdHlwaW5nLi4uLi4uLi4uLi8vLy8vLy8vLy8vLy8vLy8vLy8vXG4qL1xuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSBcIi4vYWN0aW9uVHlwZXNcIlxuXG5leHBvcnQgY29uc3Qgb3BlblVzZXJCb3ggPSAodXNlclBhcmFtKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTphY3Rpb25UeXBlcy5VU0VSX01BTkFHRU1FTlRfT1BFTl9VU0VSX0JPWCxcbiAgICAgICAgdXNlclBhcmFtLFxuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBzZXRVc2Vyc0luZm8gPSAodXBkYXRlZFVzZXJzKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTphY3Rpb25UeXBlcy5VU0VSX01BTkFHRU1FTlRfU0VUX1VTRVJTLFxuICAgICAgICB1cGRhdGVkVXNlcnMsXG4gICAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGZldGNoVXNlcnNJbmZvID0gKHVzZXJzKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTphY3Rpb25UeXBlcy5VU0VSX01BTkFHRU1FTlRfRkVUQ0hfVVNFUlMsXG4gICAgICAgIHVzZXJzLFxuICAgIH07XG59Il19