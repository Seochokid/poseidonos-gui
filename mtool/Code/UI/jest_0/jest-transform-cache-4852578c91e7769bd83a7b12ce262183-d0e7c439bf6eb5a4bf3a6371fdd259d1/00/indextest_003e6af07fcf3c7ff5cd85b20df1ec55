cb89b894bcc7abc7f2719963863b678f
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactDom = require("react-dom");

var _testUtils = require("react-dom/test-utils");

var _reactI18next = require("react-i18next");

var _redux = require("redux");

var _react2 = require("@testing-library/react");

var _alertManagementReducer = _interopRequireDefault(require("../../../store/reducers/alertManagementReducer"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _index = _interopRequireDefault(require("./index"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AlertTypes/index.test.js";
let wrapper;
let alertClusterList = [{
  alertSubCluster: null,
  // [
  //     {
  //         _id: '1',
  //         name: 'cpu-host',
  //         alertTypes: [
  //             {
  //                 type: 'cpu-idle',
  //             },
  //             {
  //                 type: 'cpu-idle2',
  //             },
  //             {
  //                 type: 'cpu-affinity',
  //             },
  //         ],
  //     },
  // ],
  _id: '1',
  name: 'CPU',
  alertFields: ["usage_idle", "usage_system"]
}];
const myMock = jest.fn();
beforeEach(() => {
  const rootReducers = (0, _redux.combineReducers)({
    alertManagementReducer: _alertManagementReducer.default
  });
  const store = (0, _redux.createStore)(rootReducers);
  wrapper = (0, _react2.render)(_react.default.createElement(_reactI18next.I18nextProvider, {
    i18n: _i18n.default,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 74
    },
    __self: void 0
  }, _react.default.createElement(_reactRedux.Provider, {
    store: store,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 75
    },
    __self: void 0
  }, _react.default.createElement(_index.default, {
    alertClusterList: alertClusterList,
    selectAlertCluster: myMock,
    selectAlertSubCluster: myMock,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 76
    },
    __self: void 0
  }))));
  alertClusterList = null;
});
test('renders alert types component', async () => {
  jest.setTimeout(30000);
  const _wrapper = wrapper,
        getByLabelText = _wrapper.getByLabelText,
        queryAllByText = _wrapper.queryAllByText,
        getAllByTestId = _wrapper.getAllByTestId,
        getAllByRole = _wrapper.getAllByRole,
        getByRole = _wrapper.getByRole,
        getByTestId = _wrapper.getByTestId,
        getByText = _wrapper.getByText,
        getAllByText = _wrapper.getAllByText,
        asFragment = _wrapper.asFragment;
  getByTestId("AlertsTypesTag");
  expect(asFragment()).toMatchSnapshot();
});
test('renders alert types component with null for ternary operator', () => {
  const _wrapper2 = wrapper,
        getByLabelText = _wrapper2.getByLabelText,
        queryAllByText = _wrapper2.queryAllByText,
        getByTestId = _wrapper2.getByTestId,
        getByText = _wrapper2.getByText,
        getAllByText = _wrapper2.getAllByText,
        asFragment = _wrapper2.asFragment;
  expect(asFragment()).toMatchSnapshot();
  getByTestId("AlertsTypesTag");
});
afterEach(_react2.cleanup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,