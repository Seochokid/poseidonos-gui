3fd5775cb88bff9005358162e2e5d933
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState = {
  chassis_front_list: [],
  chassis_rear_list: [],
  model: '',
  manufacturer: '',
  servermac: '',
  serverip: '',
  firmwareversion: '',
  serialno: '',
  hostname: '',
  powerconsumption: 'Refreshing',
  powercap: 'Refreshing',
  powerstatus: 'Refreshing'
};

const hardwareOverviewReducer = (state = initialState, action) => {
  switch (action.type) {
    case actionTypes.HARDWARE_OVERVIEW_FETCH_SERVER_INFORMATION:
      return _objectSpread({}, state, {
        model: action.serverinfo.model,
        manufacturer: action.serverinfo.manufacturer,
        servermac: action.serverinfo.mac,
        serverip: action.serverinfo.ip,
        firmwareversion: action.serverinfo.firmwareversion,
        serialno: action.serverinfo.serialno,
        hostname: action.serverinfo.host
      });

    case actionTypes.HARDWARE_OVERVIEW_FETCH_POWER_INFORMATION:
      let powerstatus = '';
      if (action.powerinfo.powerstatus === "On") powerstatus = 'Power On';else powerstatus = action.powerinfo.powerstatus;
      return _objectSpread({}, state, {
        powerconsumption: action.powerinfo.powerconsumption,
        powercap: action.powerinfo.powercap,
        powerstatus
      });

    case actionTypes.HARDWARE_OVERVIEW_FETCH_CHASSIS_FRONT_INFORMATION:
      return _objectSpread({}, state, {
        chassis_front_list: action.frontinfo
      });

    case actionTypes.HARDWARE_OVERVIEW_FETCH_CHASSIS_REAR_INFORMATION:
      return _objectSpread({}, state, {
        chassis_rear_list: action.rearinfo.rear_info
      });

    default:
      return state;
  }
};

var _default = hardwareOverviewReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhcmR3YXJlT3ZlcnZpZXdSZWR1Y2VyLmpzIl0sIm5hbWVzIjpbImluaXRpYWxTdGF0ZSIsImNoYXNzaXNfZnJvbnRfbGlzdCIsImNoYXNzaXNfcmVhcl9saXN0IiwibW9kZWwiLCJtYW51ZmFjdHVyZXIiLCJzZXJ2ZXJtYWMiLCJzZXJ2ZXJpcCIsImZpcm13YXJldmVyc2lvbiIsInNlcmlhbG5vIiwiaG9zdG5hbWUiLCJwb3dlcmNvbnN1bXB0aW9uIiwicG93ZXJjYXAiLCJwb3dlcnN0YXR1cyIsImhhcmR3YXJlT3ZlcnZpZXdSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwiYWN0aW9uVHlwZXMiLCJIQVJEV0FSRV9PVkVSVklFV19GRVRDSF9TRVJWRVJfSU5GT1JNQVRJT04iLCJzZXJ2ZXJpbmZvIiwibWFjIiwiaXAiLCJob3N0IiwiSEFSRFdBUkVfT1ZFUlZJRVdfRkVUQ0hfUE9XRVJfSU5GT1JNQVRJT04iLCJwb3dlcmluZm8iLCJIQVJEV0FSRV9PVkVSVklFV19GRVRDSF9DSEFTU0lTX0ZST05UX0lORk9STUFUSU9OIiwiZnJvbnRpbmZvIiwiSEFSRFdBUkVfT1ZFUlZJRVdfRkVUQ0hfQ0hBU1NJU19SRUFSX0lORk9STUFUSU9OIiwicmVhcmluZm8iLCJyZWFyX2luZm8iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUEwQkE7Ozs7OztBQUVBLE1BQU1BLFlBQVksR0FBRztBQUNqQkMsRUFBQUEsa0JBQWtCLEVBQUUsRUFESDtBQUVqQkMsRUFBQUEsaUJBQWlCLEVBQUUsRUFGRjtBQUdqQkMsRUFBQUEsS0FBSyxFQUFFLEVBSFU7QUFJakJDLEVBQUFBLFlBQVksRUFBRSxFQUpHO0FBS2pCQyxFQUFBQSxTQUFTLEVBQUUsRUFMTTtBQU1qQkMsRUFBQUEsUUFBUSxFQUFFLEVBTk87QUFPakJDLEVBQUFBLGVBQWUsRUFBRSxFQVBBO0FBUWpCQyxFQUFBQSxRQUFRLEVBQUUsRUFSTztBQVNqQkMsRUFBQUEsUUFBUSxFQUFFLEVBVE87QUFVakJDLEVBQUFBLGdCQUFnQixFQUFFLFlBVkQ7QUFXakJDLEVBQUFBLFFBQVEsRUFBRSxZQVhPO0FBWWpCQyxFQUFBQSxXQUFXLEVBQUU7QUFaSSxDQUFyQjs7QUFlQSxNQUFNQyx1QkFBdUIsR0FBRyxDQUFDQyxLQUFLLEdBQUdkLFlBQVQsRUFBdUJlLE1BQXZCLEtBQWtDO0FBQzlELFVBQVFBLE1BQU0sQ0FBQ0MsSUFBZjtBQUNJLFNBQUtDLFdBQVcsQ0FBQ0MsMENBQWpCO0FBQ0ksK0JBQ09KLEtBRFA7QUFFSVgsUUFBQUEsS0FBSyxFQUFFWSxNQUFNLENBQUNJLFVBQVAsQ0FBa0JoQixLQUY3QjtBQUdJQyxRQUFBQSxZQUFZLEVBQUVXLE1BQU0sQ0FBQ0ksVUFBUCxDQUFrQmYsWUFIcEM7QUFJSUMsUUFBQUEsU0FBUyxFQUFFVSxNQUFNLENBQUNJLFVBQVAsQ0FBa0JDLEdBSmpDO0FBS0lkLFFBQUFBLFFBQVEsRUFBRVMsTUFBTSxDQUFDSSxVQUFQLENBQWtCRSxFQUxoQztBQU1JZCxRQUFBQSxlQUFlLEVBQUVRLE1BQU0sQ0FBQ0ksVUFBUCxDQUFrQlosZUFOdkM7QUFPSUMsUUFBQUEsUUFBUSxFQUFFTyxNQUFNLENBQUNJLFVBQVAsQ0FBa0JYLFFBUGhDO0FBUUlDLFFBQUFBLFFBQVEsRUFBRU0sTUFBTSxDQUFDSSxVQUFQLENBQWtCRztBQVJoQzs7QUFVSixTQUFLTCxXQUFXLENBQUNNLHlDQUFqQjtBQUNJLFVBQUlYLFdBQVcsR0FBRyxFQUFsQjtBQUNBLFVBQUlHLE1BQU0sQ0FBQ1MsU0FBUCxDQUFpQlosV0FBakIsS0FBaUMsSUFBckMsRUFDSUEsV0FBVyxHQUFHLFVBQWQsQ0FESixLQUdJQSxXQUFXLEdBQUdHLE1BQU0sQ0FBQ1MsU0FBUCxDQUFpQlosV0FBL0I7QUFDSiwrQkFDT0UsS0FEUDtBQUVJSixRQUFBQSxnQkFBZ0IsRUFBRUssTUFBTSxDQUFDUyxTQUFQLENBQWlCZCxnQkFGdkM7QUFHSUMsUUFBQUEsUUFBUSxFQUFFSSxNQUFNLENBQUNTLFNBQVAsQ0FBaUJiLFFBSC9CO0FBSUlDLFFBQUFBO0FBSko7O0FBTUosU0FBS0ssV0FBVyxDQUFDUSxpREFBakI7QUFDSSwrQkFDT1gsS0FEUDtBQUVJYixRQUFBQSxrQkFBa0IsRUFBRWMsTUFBTSxDQUFDVztBQUYvQjs7QUFJSixTQUFLVCxXQUFXLENBQUNVLGdEQUFqQjtBQUNJLCtCQUNPYixLQURQO0FBRUlaLFFBQUFBLGlCQUFpQixFQUFHYSxNQUFNLENBQUNhLFFBQVAsQ0FBZ0JDO0FBRnhDOztBQUlKO0FBQ0ksYUFBT2YsS0FBUDtBQW5DUjtBQXFDSCxDQXRDRDs7ZUF3Q2VELHVCIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICBDT1BZUklHSFQgKGMpIDIwMTkgU0FNU1VORyBFTEVDVFJPTklDUyBDTy4sIExURC4gICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgQUxMIFJJR0hUUyBSRVNFUlZFRCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkIHRvIGxpY2Vuc2VlcyBvZiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiAgICAgICAgL1xuLyAgIHByb2R1Y3RzIHRvIHVzZSBvciBhYnN0cmFjdCB0aGlzIGNvbXB1dGVyIHByb2dyYW0gZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgICAgICAgICAvXG4vICAgaW1wbGVtZW50aW5nIGEgcHJvZHVjdCBiYXNlZCBvbiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBwcm9kdWN0cy4gICAgICAgICAgIC9cbi8gICBObyBvdGhlciByaWdodHMgdG8gcmVwcm9kdWNlLCB1c2UsIG9yIGRpc3NlbWluYXRlIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgICAgICAgICAgL1xuLyAgIHdoZXRoZXIgaW4gcGFydCBvciBpbiB3aG9sZSwgYXJlIGdyYW50ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIFxuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gbWFrZXMgbm8gcmVwcmVzZW50YXRpb24gb3Igd2FycmFudGllcyB3aXRoICAgICAgICAgIC9cbi8gICByZXNwZWN0IHRvIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIGNvbXB1dGVyIHByb2dyYW0sIGFuZCBzcGVjaWZpY2FsbHkgZGlzY2xhaW1zICAgL1xuLyAgIGFueSByZXNwb25zaWJpbGl0eSBmb3IgYW55IGRhbWFnZXMsIHNwZWNpYWwgb3IgY29uc2VxdWVudGlhbCwgY29ubmVjdGVkICAgICAgICAgICAvXG4vICAgd2l0aCB0aGUgdXNlIG9mIHRoaXMgcHJvZ3JhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG5cbkRFU0NSSVBUSU9OOiA8Q29udGFpbnMgcmVkdWNlciBGdW5jdGlvbnMgZm9yIGhhcmR3YXJlIGNvbnRhaW5lcj4gKlxuQE5BTUUgOiBoYXJkd2FyZU92ZXJ2aWV3UmVkdWNlci5qc1xuQEFVVEhPUlM6IEpheSBTYW5naGF2aSBcbkBWZXJzaW9uIDogMS4wICpcbkBSRVZJU0lPTiBISVNUT1JZXG5bMDMvMTEvMjAxOV0gW0pheV0gOiBQcm90b3R5cGluZy4uLi4uLi4uLi4vLy8vLy8vLy8vLy8vLy8vLy8vL1xuKi9cblxuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSBcIi4uL2FjdGlvbnMvYWN0aW9uVHlwZXNcIlxuXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XG4gICAgY2hhc3Npc19mcm9udF9saXN0OiBbXSxcbiAgICBjaGFzc2lzX3JlYXJfbGlzdDogW10sXG4gICAgbW9kZWw6ICcnLFxuICAgIG1hbnVmYWN0dXJlcjogJycsXG4gICAgc2VydmVybWFjOiAnJyxcbiAgICBzZXJ2ZXJpcDogJycsXG4gICAgZmlybXdhcmV2ZXJzaW9uOiAnJyxcbiAgICBzZXJpYWxubzogJycsXG4gICAgaG9zdG5hbWU6ICcnLFxuICAgIHBvd2VyY29uc3VtcHRpb246ICdSZWZyZXNoaW5nJyxcbiAgICBwb3dlcmNhcDogJ1JlZnJlc2hpbmcnLFxuICAgIHBvd2Vyc3RhdHVzOiAnUmVmcmVzaGluZycsXG59XG5cbmNvbnN0IGhhcmR3YXJlT3ZlcnZpZXdSZWR1Y2VyID0gKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZXMuSEFSRFdBUkVfT1ZFUlZJRVdfRkVUQ0hfU0VSVkVSX0lORk9STUFUSU9OOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICBtb2RlbDogYWN0aW9uLnNlcnZlcmluZm8ubW9kZWwsXG4gICAgICAgICAgICAgICAgbWFudWZhY3R1cmVyOiBhY3Rpb24uc2VydmVyaW5mby5tYW51ZmFjdHVyZXIsXG4gICAgICAgICAgICAgICAgc2VydmVybWFjOiBhY3Rpb24uc2VydmVyaW5mby5tYWMsXG4gICAgICAgICAgICAgICAgc2VydmVyaXA6IGFjdGlvbi5zZXJ2ZXJpbmZvLmlwLFxuICAgICAgICAgICAgICAgIGZpcm13YXJldmVyc2lvbjogYWN0aW9uLnNlcnZlcmluZm8uZmlybXdhcmV2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIHNlcmlhbG5vOiBhY3Rpb24uc2VydmVyaW5mby5zZXJpYWxubyxcbiAgICAgICAgICAgICAgICBob3N0bmFtZTogYWN0aW9uLnNlcnZlcmluZm8uaG9zdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZXMuSEFSRFdBUkVfT1ZFUlZJRVdfRkVUQ0hfUE9XRVJfSU5GT1JNQVRJT046XG4gICAgICAgICAgICBsZXQgcG93ZXJzdGF0dXMgPSAnJ1xuICAgICAgICAgICAgaWYgKGFjdGlvbi5wb3dlcmluZm8ucG93ZXJzdGF0dXMgPT09IFwiT25cIilcbiAgICAgICAgICAgICAgICBwb3dlcnN0YXR1cyA9ICdQb3dlciBPbidcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwb3dlcnN0YXR1cyA9IGFjdGlvbi5wb3dlcmluZm8ucG93ZXJzdGF0dXNcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgcG93ZXJjb25zdW1wdGlvbjogYWN0aW9uLnBvd2VyaW5mby5wb3dlcmNvbnN1bXB0aW9uLFxuICAgICAgICAgICAgICAgIHBvd2VyY2FwOiBhY3Rpb24ucG93ZXJpbmZvLnBvd2VyY2FwLFxuICAgICAgICAgICAgICAgIHBvd2Vyc3RhdHVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlcy5IQVJEV0FSRV9PVkVSVklFV19GRVRDSF9DSEFTU0lTX0ZST05UX0lORk9STUFUSU9OOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgICBjaGFzc2lzX2Zyb250X2xpc3Q6IGFjdGlvbi5mcm9udGluZm8sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIGFjdGlvblR5cGVzLkhBUkRXQVJFX09WRVJWSUVXX0ZFVENIX0NIQVNTSVNfUkVBUl9JTkZPUk1BVElPTjpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgY2hhc3Npc19yZWFyX2xpc3Q6ICBhY3Rpb24ucmVhcmluZm8ucmVhcl9pbmZvXG4gICAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhcmR3YXJlT3ZlcnZpZXdSZWR1Y2VyOyJdfQ==