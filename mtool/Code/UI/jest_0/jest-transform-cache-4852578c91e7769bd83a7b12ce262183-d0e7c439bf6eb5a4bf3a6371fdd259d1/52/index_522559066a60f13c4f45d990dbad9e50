1c0e2153c24eb1363dee562e824b95e0
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@material-ui/core");

var _pickers = require("@material-ui/pickers");

var _dateFns = _interopRequireDefault(require("@date-io/date-fns"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/LogConfiguration/index.js";
const useStyles = (0, _core.makeStyles)(theme => ({
  paper: {
    width: '100%'
  },
  mainHeader: {
    textAlign: 'left',
    color: 'rgba(255, 255, 255, 0.87)',
    fontSize: '14px',
    width: '100%',
    marginLeft: '10px',
    lineHeight: '2'
  },
  title: {
    backgroundColor: '#788595',
    borderRadius: 0,
    justifyContent: 'center'
  },
  btn: {
    height: '1.8rem',
    fontSize: '12px',
    textTransform: 'none',
    marginRight: '10px',
    width: 125,
    marginBottom: theme.spacing(1)
  },
  btnContainer: {
    padding: theme.spacing(2)
  },
  ibofosSettingGrid: {
    marginTop: theme.spacing(3)
  },
  ibofosSettingInputField: {
    marginLeft: theme.spacing(2),
    fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
    color: 'black',
    fontSize: '12px'
  },
  textField: {
    width: 190,
    padding: '0px',
    marginLeft: theme.spacing(2)
  },
  ibofosSettingButton: {
    marginTop: theme.spacing(2),
    marginLeft: theme.spacing(2),
    height: '1.8rem',
    fontSize: '12px',
    textTransform: 'none',
    marginRight: '10px',
    width: 70
  },
  gridItem: {
    [theme.breakpoints.down('sm')]: {
      justifyContent: 'center',
      display: 'flex'
    }
  },
  deletetextField: {
    marginLeft: theme.spacing(1),
    marginRight: theme.spacing(1),
    width: 190,
    marginTop: theme.spacing(2),
    color: 'black',
    background: 'rgb(245,245,245)',
    textDecoration: 'none',
    borderBottom: 'none',
    '&>input': {
      paddingLeft: '4px'
    }
  }
}));

const LogConfiguration = props => {
  const classes = useStyles();

  const _React$useState = _react.default.useState(new Date()),
        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),
        selectedStartDate = _React$useState2[0];

  const _React$useState3 = _react.default.useState(new Date()),
        _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 1),
        selectedEndDate = _React$useState4[0];

  function downloadLogs() {
    props.downloadLogs({
      start_date: selectedStartDate,
      end_date: selectedEndDate
    });
  }

  return _react.default.createElement(_core.Paper, {
    className: classes.paper,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 123
    },
    __self: void 0
  }, _react.default.createElement(_core.Grid, {
    xs: 12,
    className: classes.title,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 124
    },
    __self: void 0
  }, _react.default.createElement(_core.Typography, {
    className: classes.mainHeader,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 125
    },
    __self: void 0
  }, "Log Collection Configuration")), _react.default.createElement(_core.Grid, {
    xs: 12,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127
    },
    __self: void 0
  }, _react.default.createElement(_pickers.MuiPickersUtilsProvider, {
    utils: _dateFns.default,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 128
    },
    __self: void 0
  }, _react.default.createElement(_core.Grid, {
    item: true,
    container: true,
    justify: "center",
    className: classes.btnContainer,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129
    },
    __self: void 0
  }, _react.default.createElement(_core.Button, {
    onClick: downloadLogs,
    className: classes.btn,
    color: "primary",
    variant: "contained",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 130
    },
    __self: void 0
  }, "Download log")))), _react.default.createElement(_core.Divider, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 136
    },
    __self: void 0
  }), _react.default.createElement(_core.Grid, {
    container: true,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137
    },
    __self: void 0
  }, _react.default.createElement(_core.Grid, {
    xs: 12,
    className: classes.ibofosSettingGrid,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138
    },
    __self: void 0
  }, _react.default.createElement(_core.InputLabel, {
    className: classes.ibofosSettingInputField,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139
    },
    __self: void 0
  }, "Set Poseidon OS Status Time Interval:"), _react.default.createElement(_core.TextField, {
    type: "number",
    inputProps: {
      'data-testid': "ibofosSettingTextField",
      min: 0
    },
    name: "ibofostimeinterval",
    onChange: props.OnHandleChange,
    placeholder: "Time Interval",
    id: "standard-required",
    value: props.ibofostimeinterval,
    className: classes.textField,
    label: "In Sec",
    margin: "none" // onKeyDown={f => /[+-,.,#]$/.test(f.key) && f.preventDefault()}
    ,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 140
    },
    __self: void 0
  }), _react.default.createElement(_core.Button, {
    variant: "contained",
    color: "primary",
    className: classes.ibofosSettingButton,
    "data-testid": "setTimeIntervalButton",
    onClick: () => {
      props.applyIbofOSTimeInterval();
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 156
    },
    __self: void 0
  }, "Apply"), _react.default.createElement(_core.TextField, {
    inputProps: {
      'data-testid': "ibofosSettingTextField",
      readOnly: true,
      className: classes.inputText
    },
    disabled: true,
    value: props.ibofostimeintervalvalue,
    className: classes.deletetextField,
    type: "text",
    margin: "none",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 168
    },
    __self: void 0
  }), _react.default.createElement(_core.Button, {
    variant: "contained",
    color: "primary",
    type: "submit",
    className: classes.ibofosSettingButton,
    "data-testid": "setTimeIntervalButton",
    onClick: () => {
      props.deleteIbofOSTimeInterval();
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 180
    },
    __self: void 0
  }, "Delete"))));
};

var _default = LogConfiguration;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,