{"version":3,"sources":["index.test.js"],"names":["jest","unmock","describe","wrapper","history","store","beforeEach","sagaMiddleware","rootReducers","headerLanguageReducer","authenticationReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","run","rootSaga","route","initialEntries","i18n","afterEach","cleanup","it","asFragment","expect","toMatchSnapshot","getByTestId","visibilityButton","fireEvent","click","usernameInput","querySelector","change","target","value","name","toBe","mock","MockAdapter","axios","passwordInput","data","onPost","reply","localStorage","getItem"],"mappings":"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\n\nDESCRIPTION: Authentication Container Test File\n@NAME : index.test.js\n@AUTHORS: Palak Kapoor\n@Version : 1.0 *\n@REVISION HISTORY\n[03/06/2019] [Palak] : Prototyping..........////////////////////\n*/\n\n\n\nimport React from \"react\";\nimport {\n  render,\n  fireEvent,\n  cleanup,\n  waitForElement,\n} from \"@testing-library/react\";\nimport { Provider } from \"react-redux\";\nimport { I18nextProvider } from \"react-i18next\";\nimport '@testing-library/jest-dom/extend-expect';\n\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter'\nimport { createMemoryHistory } from 'history';\nimport {Router} from 'react-router-dom';\nimport { createStore, combineReducers,applyMiddleware,compose } from \"redux\";\nimport createSagaMiddleware from 'redux-saga';\nimport '@testing-library/jest-dom/extend-expect';\nimport rootSaga from \"../../sagas/indexSaga\"\nimport headerLanguageReducer, {\n  initialState as langState\n} from \"../../store/reducers/headerLanguageReducer\";\nimport authenticationReducer from \"../../store/reducers/authenticationReducer\";\nimport Authentication from \"./index\";\nimport i18n from \"../../i18n\";\n\njest.unmock('axios');\n\ndescribe(\"Authentication\", () => {\n  let wrapper;\n  let history;\n  let store;\n  beforeEach(() => {\n    const sagaMiddleware = createSagaMiddleware();\n    const rootReducers = combineReducers({\n      headerLanguageReducer,\n      authenticationReducer\n    });\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    store = createStore(rootReducers,composeEnhancers(applyMiddleware(sagaMiddleware)))\n    sagaMiddleware.run(rootSaga);\n    const route = '/';\n    history = createMemoryHistory({ initialEntries: [route] })\n\n    wrapper = render(\n      <Router history={history}>\n      <I18nextProvider i18n={i18n}>\n        <Provider store={store}>\n          {\" \"}\n          <Authentication />\n        </Provider>\n      </I18nextProvider>\n      </Router>\n    );\n  });\n\n  afterEach(cleanup);\n\n  it(\"matches snapshot\", () => {\n    const { asFragment } = wrapper;\n    expect(asFragment()).toMatchSnapshot();\n  });\n/*\n  it(\"Language select displays English and Korean\", () => {\n    const { getByTestId, getAllByText } = wrapper;\n    const selectButton = getByTestId(\"selectDropdown\");\n    fireEvent.click(selectButton);\n    getAllByText(/en/i);\n  });\n\n  it(\"Language is changed to English when English is selected\", () => {\n    const { getByTestId } = wrapper;\n    const selectButton = getByTestId(\"selectDropdown\");\n    fireEvent.click(selectButton);\n    const englishButton = getByTestId(\"englishSelect\");\n    fireEvent.click(englishButton);\n    expect(getByTestId(\"submit\")).toHaveTextContent(\"Login\");\n  });\n\n  it(\"Language is changed to Korean when Korean is selected\", () => {\n    const { getByTestId } = wrapper;\n    const selectButton = getByTestId(\"selectDropdown\");\n    fireEvent.click(selectButton);\n    const koreanButton = getByTestId(\"koreanSelect\");\n    fireEvent.click(koreanButton);\n    expect(getByTestId(\"submit\")).toHaveTextContent(\"로그인\");\n  });\n*/\n  it(\"Changes Password Visibility\", () => {\n    const { getByTestId } = wrapper;\n    const visibilityButton = getByTestId(\"visibilityButton\");\n    fireEvent.click(visibilityButton);\n    getByTestId(\"showPassword\");\n  });\n\n  it(\"Changes the value of input field\", () => {\n    const { getByTestId } = wrapper;\n    const usernameInput = getByTestId(\"usernameInput\").querySelector(\"input\");\n    fireEvent.change(usernameInput, {\n        target: { value: 'test', name: 'username' }\n    });\n    expect(usernameInput.value).toBe(\"test\");\n  });\n\n  it(\"Redirects to Dashboard\", async () => {\n    const mock = new MockAdapter(axios);\n    const { getByTestId } = wrapper;\n    const usernameInput = getByTestId(\"usernameInput\").querySelector(\"input\");\n    fireEvent.change(usernameInput, {\n        target: { value: 'test', name: 'username' }\n    });\n    const passwordInput = getByTestId(\"passwordInput\").querySelector(\"input\");\n    fireEvent.change(passwordInput, {\n        target: { value: 'test', name: 'password' }\n    });\n    const data = true;\n    mock.onPost('/api/v1.0/login/').reply(200, data);\n    fireEvent.click(getByTestId(\"submit\"));\n  });\n\n  it(\"Throws invalid credentials error\", async () => {\n    const mock = new MockAdapter(axios);\n    const { getByTestId } = wrapper;\n    const usernameInput = getByTestId(\"usernameInput\").querySelector(\"input\");\n    fireEvent.change(usernameInput, {\n        target: { value: 'test', name: 'username' }\n    });\n    const passwordInput = getByTestId(\"passwordInput\").querySelector(\"input\");\n    fireEvent.change(passwordInput, {\n        target: { value: 'test', name: 'password' }\n    });\n    mock.onPost().reply(500);\n    fireEvent.click(getByTestId(\"submit\"))\n    await waitForElement(() => getByTestId(\"errorMsg\"));\n  });\n\n  it(\"login api doesn't return data\", async () => {\n    const mock = new MockAdapter(axios);\n    const { getByTestId } = wrapper;\n    const usernameInput = getByTestId(\"usernameInput\").querySelector(\"input\");\n    fireEvent.change(usernameInput, {\n        target: { value: 'test', name: 'username' }\n    });\n    const passwordInput = getByTestId(\"passwordInput\").querySelector(\"input\");\n    fireEvent.change(passwordInput, {\n        target: { value: 'test', name: 'password' }\n    });\n    const data = true;\n    mock.onPost('/api/v1.0/login/').reply(200);\n    fireEvent.click(getByTestId(\"submit\"));\n  });\n\n  it(\"Should redirect to dashboard if already logged in\", () => {\n    localStorage.getItem = () => true;\n    wrapper = render(\n      <Router history={history}>\n      <I18nextProvider i18n={i18n}>\n        <Provider store={store}>\n          {\" \"}\n          <Authentication />\n        </Provider>\n      </I18nextProvider>\n      </Router>\n    );\n  });\n});\n"]}