c91607fc1f00c2474c67f6b1731d7750
"use strict";

jest.unmock('axios');

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactRedux = require("react-redux");

var _reactI18next = require("react-i18next");

require("@testing-library/jest-dom/extend-expect");

var _axios = _interopRequireDefault(require("axios"));

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _history = require("history");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _indexSaga = _interopRequireDefault(require("../../sagas/indexSaga"));

var _headerLanguageReducer = _interopRequireWildcard(require("../../store/reducers/headerLanguageReducer"));

var _authenticationReducer = _interopRequireDefault(require("../../store/reducers/authenticationReducer"));

var _index = _interopRequireDefault(require("./index"));

var _i18n = _interopRequireDefault(require("../../i18n"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Authentication/index.test.js";
describe("Authentication", () => {
  let wrapper;
  let history;
  let store;
  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      headerLanguageReducer: _headerLanguageReducer.default,
      authenticationReducer: _authenticationReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = '/';
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    });
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 75
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 76
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 77
      },
      __self: void 0
    }, " ", _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 79
      },
      __self: void 0
    })))));
  });
  afterEach(_react2.cleanup);
  it("matches snapshot", () => {
    const _wrapper = wrapper,
          asFragment = _wrapper.asFragment;
    expect(asFragment()).toMatchSnapshot();
  });
  /*
    it("Language select displays English and Korean", () => {
      const { getByTestId, getAllByText } = wrapper;
      const selectButton = getByTestId("selectDropdown");
      fireEvent.click(selectButton);
      getAllByText(/en/i);
    });
  
    it("Language is changed to English when English is selected", () => {
      const { getByTestId } = wrapper;
      const selectButton = getByTestId("selectDropdown");
      fireEvent.click(selectButton);
      const englishButton = getByTestId("englishSelect");
      fireEvent.click(englishButton);
      expect(getByTestId("submit")).toHaveTextContent("Login");
    });
  
    it("Language is changed to Korean when Korean is selected", () => {
      const { getByTestId } = wrapper;
      const selectButton = getByTestId("selectDropdown");
      fireEvent.click(selectButton);
      const koreanButton = getByTestId("koreanSelect");
      fireEvent.click(koreanButton);
      expect(getByTestId("submit")).toHaveTextContent("로그인");
    });
  */

  it("Changes Password Visibility", () => {
    const _wrapper2 = wrapper,
          getByTestId = _wrapper2.getByTestId;
    const visibilityButton = getByTestId("visibilityButton");

    _react2.fireEvent.click(visibilityButton);

    getByTestId("showPassword");
  });
  it("Changes the value of input field", () => {
    const _wrapper3 = wrapper,
          getByTestId = _wrapper3.getByTestId;
    const usernameInput = getByTestId("usernameInput").querySelector("input");

    _react2.fireEvent.change(usernameInput, {
      target: {
        value: 'test',
        name: 'username'
      }
    });

    expect(usernameInput.value).toBe("test");
  });
  it("Redirects to Dashboard", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    const _wrapper4 = wrapper,
          getByTestId = _wrapper4.getByTestId;
    const usernameInput = getByTestId("usernameInput").querySelector("input");

    _react2.fireEvent.change(usernameInput, {
      target: {
        value: 'test',
        name: 'username'
      }
    });

    const passwordInput = getByTestId("passwordInput").querySelector("input");

    _react2.fireEvent.change(passwordInput, {
      target: {
        value: 'test',
        name: 'password'
      }
    });

    const data = true;
    mock.onPost('/api/v1.0/login/').reply(200, data);

    _react2.fireEvent.click(getByTestId("submit"));
  });
  it("Throws invalid credentials error", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    const _wrapper5 = wrapper,
          getByTestId = _wrapper5.getByTestId;
    const usernameInput = getByTestId("usernameInput").querySelector("input");

    _react2.fireEvent.change(usernameInput, {
      target: {
        value: 'test',
        name: 'username'
      }
    });

    const passwordInput = getByTestId("passwordInput").querySelector("input");

    _react2.fireEvent.change(passwordInput, {
      target: {
        value: 'test',
        name: 'password'
      }
    });

    mock.onPost().reply(500);

    _react2.fireEvent.click(getByTestId("submit"));

    await (0, _react2.waitForElement)(() => getByTestId("errorMsg"));
  });
  it("login api doesn't return data", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    const _wrapper6 = wrapper,
          getByTestId = _wrapper6.getByTestId;
    const usernameInput = getByTestId("usernameInput").querySelector("input");

    _react2.fireEvent.change(usernameInput, {
      target: {
        value: 'test',
        name: 'username'
      }
    });

    const passwordInput = getByTestId("passwordInput").querySelector("input");

    _react2.fireEvent.change(passwordInput, {
      target: {
        value: 'test',
        name: 'password'
      }
    });

    const data = true;
    mock.onPost('/api/v1.0/login/').reply(200);

    _react2.fireEvent.click(getByTestId("submit"));
  });
  it("Should redirect to dashboard if already logged in", () => {
    localStorage.getItem = () => true;

    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 185
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 186
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 187
      },
      __self: void 0
    }, " ", _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 189
      },
      __self: void 0
    })))));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,