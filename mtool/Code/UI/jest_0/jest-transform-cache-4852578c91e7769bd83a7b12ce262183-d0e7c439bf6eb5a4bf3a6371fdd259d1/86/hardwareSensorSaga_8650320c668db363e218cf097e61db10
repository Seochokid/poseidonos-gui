0ec00f4edcf738a205e7fd3cb44aea54
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchPowerSensorInfo = fetchPowerSensorInfo;
exports.fetchFanSensorInfo = fetchFanSensorInfo;
exports.fetchTemperatureSensorInfo = fetchTemperatureSensorInfo;
exports.hardwareSensorWatcher = hardwareSensorWatcher;

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

/* -------------------------------------------------------------------------------------/
                                                                                    /
/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /
/                          ALL RIGHTS RESERVED                                        /
/                                                                                     /
/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /
/   products to use or abstract this computer program for the sole purpose of         /
/   implementing a product based on Samsung Electronics Co., Ltd. products.           /
/   No other rights to reproduce, use, or disseminate this computer program,          /
/   whether in part or in whole, are granted.                                         / 
/                                                                                     /
/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /
/   respect to the performance of this computer program, and specifically disclaims   /
/   any responsibility for any damages, special or consequential, connected           /
/   with the use of this program.                                                     /
/                                                                                     /
/-------------------------------------------------------------------------------------/

DESCRIPTION: <Contains Generator Functions for hardware container> *
@NAME : hardwareSensorSaga.js
@AUTHORS: Jay Sanghavi 
@Version : 1.0 *
@REVISION HISTORY
[03/11/2019] [Jay] : Prototyping..........////////////////////
*/
function* fetchPowerSensorInfo() {
  try {
    // yield put(actionCreators.startLoader('Fetching BMC Information'));
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_power_sensor_info/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    yield (0, _effects.put)(actionCreators.stopLoader());
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchPowerSensorInfo(result.power_sensor_info));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.stopLoader());
    yield (0, _effects.put)(actionCreators.fetchPowerSensorInfo([]));
  } finally {
    ;
  }
}

function* fetchFanSensorInfo() {
  try {
    yield (0, _effects.put)(actionCreators.startLoader('Fetching BMC Information'));
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_fan_sensor_info/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    yield (0, _effects.put)(actionCreators.stopLoader());
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchFanSensorInfo(result.fan_sensor_info));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.stopLoader());
    yield (0, _effects.put)(actionCreators.fetchFanSensorInfo([]));
  } finally {
    ;
  }
}

function* fetchTemperatureSensorInfo() {
  try {
    yield (0, _effects.put)(actionCreators.startLoader('Fetching BMC Information'));
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_temperature_sensor_info/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    yield (0, _effects.put)(actionCreators.stopLoader());
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchTemperatureSensorInfo(result.temperature_sensor_info));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.stopLoader());
    yield (0, _effects.put)(actionCreators.fetchTemperatureSensorInfo([]));
  } finally {
    ;
  }
}

function* hardwareSensorWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_SENSORS_FETCH_POWER_SENSOR_INFORMATION, fetchPowerSensorInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_SENSORS_FETCH_FAN_SENSOR_INFORMATION, fetchFanSensorInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_SENSORS_FETCH_TEMPERATURE_SENSOR_INFORMATION, fetchTemperatureSensorInfo);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,