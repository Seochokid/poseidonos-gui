5f423a7c68db8b72d76d3d2a12fdc62f
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _styles = require("@material-ui/core/styles");

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _Card = _interopRequireDefault(require("@material-ui/core/Card"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/PowerManagementComponents/PowerSummary/index.js";

const styles = theme => ({
  root: {
    flexGrow: 1
  },
  summaryOuterGrid: {
    border: '1px solid gray',
    maxWidth: '100%',
    minHeight: '100px',
    maxHeight: '150px',
    overflowY: 'auto',
    overflowX: 'hidden',
    justifyContent: 'left',
    background: '#fff'
  },
  summaryInfoHeader: {
    textAlign: 'left',
    color: 'rgba(255, 255, 255, 0.87)',
    fontSize: '14px',
    borderRadius: '0px',
    width: '100%',
    marginLeft: '10px',
    lineHeight: '2'
  },
  overviewPaper: {
    width: '100%'
  },
  summaryCard: {
    backgroundColor: '#788595',
    justifyContent: 'center',
    maxWidth: '100%',
    maxHeight: '30px',
    flexBasis: '100%'
  },
  SpecifySummaryCard: {
    marginTop: theme.spacing(2),
    borderRadius: '0px',
    boxShadow: 'none'
  },
  textField: {
    color: "black",
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2),
    width: 300
  }
});

class PowerSummary extends _react.Component {
  constructor(props) {
    super(props);
  }

  componentDidMount() {
    this.props.fetchPowerSummary();
    this.props.fetchPowerInfo();
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_Card.default, {
      className: classes.SpecifySummaryCard,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 99
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      container: true,
      className: classes.summaryOuterGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 100
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      className: classes.summaryCard,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 101
      },
      __self: this
    }, _react.default.createElement(_Typography.default, {
      className: classes.summaryInfoHeader,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 102
      },
      __self: this
    }, "Power Summary")), _react.default.createElement(_TextField.default, {
      className: classes.textField,
      id: "standard-required",
      margin: "none",
      value: this.props.powerconsumption === 0 ? "Error" : this.props.powerconsumption,
      label: "Total Power Consumption (Watts)",
      disabled: true,
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 106
      },
      __self: this
    }), _react.default.createElement(_TextField.default, {
      className: classes.textField,
      id: "standard-required",
      margin: "none",
      value: this.props.currentpowermode,
      disabled: true,
      label: "Current Power Mode",
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 119
      },
      __self: this
    })));
  }

}

const mapStateToProps = state => {
  return {
    currentpowermode: state.hardwarePowerManagementReducer.currentpowermode,
    powerconsumption: state.hardwareOverviewReducer.powerconsumption
  };
};

const mapDispatchToProps = dispatch => {
  return {
    fetchPowerSummary: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_FETCH_POWER_SUMMARY_INFORMATION
    }),
    fetchPowerInfo: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_POWER_INFORMATION
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PowerSummary));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,