53b031c5bd0899bd0e94506c6def3e33
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _styles = require("@material-ui/core/styles");

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _Card = _interopRequireDefault(require("@material-ui/core/Card"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _core = require("@material-ui/core");

var _theme = require("../../../theme");

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/OverviewComponents/ServerInformation/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const formTheme = (0, _core.createMuiTheme)(_objectSpread({}, _theme.customTheme, {
  typography: {
    fontSize: '12px'
  },
  overrides: {
    MuiInput: {
      // Name of the styleSheet
      underline: {
        '&:hover:not($disabled):before': {
          borderBottom: '1px solid rgba(0, 0, 0, 0.42)'
        },
        '&:after': {
          borderBottom: 0
        }
      }
    }
  }
}));

const styles = theme => ({
  root: {
    flexGrow: 1
  },
  serverOuterGrid: {
    maxWidth: '100%',
    minHeight: '140px',
    overflowY: 'auto',
    overflowX: 'hidden',
    justifyContent: 'left',
    background: '#fff'
  },
  serverInfoHeader: {
    textAlign: 'left',
    color: 'rgba(255, 255, 255, 0.87)',
    fontSize: '14px',
    borderRadius: '0px',
    width: '100%',
    marginLeft: '10px',
    lineHeight: '1.5'
  },
  overviewPaper: {
    width: '100%'
  },
  serverCard: {
    backgroundColor: '#788595',
    justifyContent: 'center',
    maxWidth: '100%',
    maxHeight: '24px',
    flexBasis: '100%'
  },
  SpecifyServerCard: {
    borderRadius: '0px',
    boxShadow: 'none'
  },
  textField: {
    color: "black",
    marginLeft: theme.spacing(1),
    marginRight: theme.spacing(1),
    width: 230
  }
});

class ServerInformation extends _react.Component {
  constructor(props) {
    super(props);
  }

  componentDidMount() {
    this.props.fetchServerInfo();
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_Card.default, {
      className: classes.SpecifyServerCard,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 116
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      container: true,
      className: classes.serverOuterGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 117
      },
      __self: this
    }, _react.default.createElement(_MuiThemeProvider.default, {
      theme: formTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 118
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      className: classes.serverCard,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 119
      },
      __self: this
    }, _react.default.createElement(_Typography.default, {
      className: classes.serverInfoHeader,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 120
      },
      __self: this
    }, "Server Information")), _react.default.createElement(_TextField.default, {
      onFocus: event => {
        event.target.select();
      },
      className: classes.textField,
      id: "standard-required",
      margin: "none",
      value: this.props.model === "" ? "NA" : this.props.model,
      label: "Model" // disabled
      ,
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 124
      },
      __self: this
    }), _react.default.createElement(_TextField.default, {
      className: classes.textField,
      onFocus: event => {
        event.target.select();
      },
      id: "standard-required",
      margin: "none" // disabled
      ,
      value: this.props.manufacturer === "" ? "NA" : this.props.manufacturer,
      label: "Manufacturer",
      InputProps: {
        readOnly: true,
        autoFocus: false,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 143
      },
      __self: this
    }), _react.default.createElement(_TextField.default, {
      className: classes.textField,
      onFocus: event => {
        event.target.select();
      },
      id: "standard-required",
      margin: "none",
      value: this.props.servermac === "" ? "NA" : this.props.servermac,
      label: "BMC MAC Address" // disabled
      ,
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 160
      },
      __self: this
    }), _react.default.createElement(_TextField.default, {
      className: classes.textField,
      onFocus: event => {
        event.target.select();
      },
      id: "standard-required",
      margin: "none",
      value: this.props.serverip === "" ? "NA" : this.props.serverip // disabled
      ,
      label: "BMC IP Address",
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 176
      },
      __self: this
    }), _react.default.createElement(_TextField.default, {
      className: classes.textField,
      onFocus: event => {
        event.target.select();
      },
      id: "standard-required",
      margin: "none",
      value: this.props.firmwareversion === "" ? "NA" : this.props.firmwareversion,
      label: "BMC Firmware Version" // disabled
      ,
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 192
      },
      __self: this
    }), _react.default.createElement(_TextField.default, {
      className: classes.textField,
      onFocus: event => {
        event.target.select();
      },
      id: "standard-required",
      margin: "none",
      value: this.props.serialno === "" ? "NA" : this.props.serialno,
      label: "Serial Number" // disabled
      ,
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 208
      },
      __self: this
    }))));
  }

}

const mapStateToProps = state => {
  return {
    model: state.hardwareOverviewReducer.model,
    manufacturer: state.hardwareOverviewReducer.manufacturer,
    servermac: state.hardwareOverviewReducer.servermac,
    serverip: state.hardwareOverviewReducer.serverip,
    firmwareversion: state.hardwareOverviewReducer.firmwareversion,
    serialno: state.hardwareOverviewReducer.serialno,
    hostname: state.hardwareOverviewReducer.hostname
  };
};

const mapDispatchToProps = dispatch => {
  return {
    fetchServerInfo: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_SERVER_INFORMATION
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ServerInformation));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,