fd1d08b27fdfb0aeeef2b39d8ce2e0c5
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _reactRouterDom = require("react-router-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactI18next = require("react-i18next");

var _Container = _interopRequireDefault(require("@material-ui/core/Container"));

var _CssBaseline = _interopRequireDefault(require("@material-ui/core/CssBaseline"));

var _CardMedia = _interopRequireDefault(require("@material-ui/core/CardMedia"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _styles = require("@material-ui/core/styles");

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Visibility = _interopRequireDefault(require("@material-ui/icons/Visibility"));

var _VisibilityOff = _interopRequireDefault(require("@material-ui/icons/VisibilityOff"));

var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Input = _interopRequireDefault(require("@material-ui/core/Input"));

var _AccountCircle = _interopRequireDefault(require("@material-ui/icons/AccountCircle"));

var _reactRedux = require("react-redux");

var _HeaderLogo = _interopRequireDefault(require("../../assets/images/Header-logo.png"));

var _theme = _interopRequireDefault(require("../../theme"));

require("./Authentication.css");

var _SamsungLogoBlue = _interopRequireDefault(require("../../assets/images/Samsung-logo-blue.png"));

var actionTypes = _interopRequireWildcard(require("../../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../../store/actions/exportActionCreators"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Authentication/index.js";

const styles = theme => ({
  container: {
    height: '97vh',
    display: 'flex'
  },
  LoginContainer: {
    width: '60%',
    // backgroundImage: 'linear-gradient(to bottom right, #14161f, #304eb1)',
    backgroundImage: 'linear-gradient(to bottom right, #171719, #788595)',
    // backgroundImage: 'linear-gradient(to bottom  , #000000, #f1f0f0)',
    border: '1px solid black',
    height: '500px',
    margin: 'auto',
    alignItems: 'center',
    position: 'relative'
  },
  formControl: {
    float: 'right',
    width: '95px',
    fontSize: '1px'
  },
  cardmedia: {
    backgroundSize: 'auto',
    alt: 'Samsung iBoF Management Tool',
    width: 'auto',
    height: '50px',
    clear: 'right',
    marginBottom: '100px'
  },
  paper: {
    marginTop: theme.spacing(8),
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center'
  },
  submit: {
    margin: theme.spacing(3, 0, 2),
    // background: '#007bff',
    background: '#788595',
    fontSize: '12px',
    marginTop: '0px',
    marginBottom: '0px'
  },
  samsungLogo: {
    margin: 'auto',
    position: 'absolute',
    height: '50px',
    width: 'auto',
    marginBottom: '0',
    left: '0',
    bottom: '0',
    right: '0',
    backgroundSize: 'contain'
  },
  form: {
    width: '100%',
    marginTop: theme.spacing(1)
  },
  input: {
    height: '100px',
    color: 'black',
    outline: 'none',
    textOverflow: 'ellipsis',
    overflow: 'hidden',
    whiteSpace: 'nowrap'
  },
  selectmenu: {
    background: '#202e5e',
    border: 'none',
    outline: 'none',
    marginTop: '5px',
    marginBottom: '10px',
    color: 'rgba(255, 255, 255, 0.87)',
    fontSize: '12px',
    width: '70px',
    paddingRight: '2px',
    textAlignLast: 'center',
    height: '20px'
  },
  select: {
    border: 'none',
    fontSize: '12px',
    color: 'rgba(255, 255, 255, 0.87)',
    textAlignLast: 'center',
    height: '20px',
    outline: 'none',
    marginTop: '5px',
    marginBottom: '0px',
    width: '70px',
    textDecoration: 'none',
    paddingBottom: '0px',
    '&:before': {
      borderBottom: 'none'
    },
    '&:hover:not(.Mui-disabled):before': {
      borderBottom: 'none'
    },
    '&:after': {
      borderBottom: 'none'
    }
  },
  root: {
    borderBottom: 'none'
  },
  icon: {
    fill: 'white'
  },
  menuText: {
    fontSize: '12px',
    minHeight: '0px',
    textAlign: 'left'
  },
  ul: {
    color: 'rgba(255, 255, 255, 0.87)',
    // background: 'rgba(45, 71, 159, 1)',
    background: 'rgb(111, 122, 137)',
    marginLeft: '-4px',
    borderRadius: '0px',
    '&>ul': {
      paddingTop: '0px',
      textAlign: 'left'
    }
  },
  textField: {
    background: 'rgba(255, 255, 255, 0.87)',
    marginBottom: '20px',
    height: '30px',
    textOverflow: 'ellipsis',
    overflow: 'hidden',
    whiteSpace: 'nowrap',
    borderRadius: '4px',
    '&>input': {
      paddingRight: '40px'
    }
  },
  inputAdornment: {
    position: 'absolute',
    right: 0,
    paddingRight: '13px',
    opacity: 0.6
  },
  passwordAdornment: {
    position: 'absolute',
    right: 0
  }
});

class Authentication extends _react.Component {
  constructor(props) {
    super(props);

    this.handleClickShowPassword = () => {
      this.setState({
        showPassword: !this.state.showPassword
      });
    };

    this.handleLanguageChange = event => {
      this.props.changeLanguage(event.target.value);
      this.props.i18n.changeLanguage(event.target.value);
    };

    localStorage.clear(); // if (localStorage.getItem('isLoggedIn') === true) {
    //   this.props.history.push('/dashboard');
    // }

    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
    this.handleLanguageChange = this.handleLanguageChange.bind(this);
    this.handleClickShowPassword = this.handleClickShowPassword.bind(this);
    this.state = {
      showPassword: false
    };
  }

  componentWillMount() {
    this.props.i18n.changeLanguage(this.props.lang);
  }

  handleSubmit(event) {
    event.preventDefault();
    const payload = {
      username: this.props.username,
      password: this.props.password
    };
    this.props.login(payload, this.props.history);
  }

  handleChange(event) {
    const _event$target = event.target,
          name = _event$target.name,
          value = _event$target.value;
    const payload = {
      name,
      value
    };
    this.props.changeCredentials(payload);
  }

  render() {
    const t = this.props.t;
    const classes = this.props.classes;

    if (this.props.isLoggedIn) {
      return _react.default.createElement(_reactRouterDom.Redirect, {
        to: "/dashboard",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 268
        },
        __self: this
      });
    }

    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 271
      },
      __self: this
    }, _react.default.createElement(_Container.default, {
      className: classes.container,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 272
      },
      __self: this
    }, _react.default.createElement(_Paper.default, {
      xs: 12,
      className: classes.LoginContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 273
      },
      __self: this
    }, _react.default.createElement(_CardMedia.default, {
      className: classes.cardmedia,
      image: _HeaderLogo.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 313
      },
      __self: this
    }), _react.default.createElement(_Container.default, {
      component: "main",
      maxWidth: "xs",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 315
      },
      __self: this
    }, _react.default.createElement(_CssBaseline.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 316
      },
      __self: this
    }), _react.default.createElement("div", {
      className: classes.paper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 317
      },
      __self: this
    }, _react.default.createElement("form", {
      className: classes.form,
      onSubmit: this.handleSubmit,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 318
      },
      __self: this
    }, _react.default.createElement(_Input.default, {
      required: true,
      fullWidth: true,
      "data-testid": "usernameInput",
      id: "email",
      placeholder: t('Username'),
      InputProps: {
        className: classes.input // 'data-testid': "usernameInput"

      },
      name: "username",
      className: classes.textField,
      onChange: this.handleChange,
      endAdornment: _react.default.createElement(_InputAdornment.default, {
        className: classes.inputAdornment,
        position: "end",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 334
        },
        __self: this
      }, _react.default.createElement(_AccountCircle.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 338
        },
        __self: this
      })),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 319
      },
      __self: this
    }), _react.default.createElement(_Input.default, {
      required: true,
      fullWidth: true,
      "data-testid": "passwordInput",
      placeholder: t('Password'),
      name: "password",
      InputProps: {
        className: classes.input
      },
      type: this.state.showPassword ? 'text' : 'password',
      id: "password",
      autoComplete: "current-password",
      className: classes.textField,
      onChange: this.handleChange,
      endAdornment: _react.default.createElement(_InputAdornment.default, {
        className: classes.passwordAdornment,
        position: "end",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 359
        },
        __self: this
      }, _react.default.createElement(_IconButton.default, {
        "aria-label": "toggle password visibility",
        onClick: this.handleClickShowPassword,
        "data-testid": "visibilityButton",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 363
        },
        __self: this
      }, this.state.showPassword ? _react.default.createElement(_Visibility.default, {
        "data-testid": "showPassword",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 369
        },
        __self: this
      }) : _react.default.createElement(_VisibilityOff.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 371
        },
        __self: this
      }))),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 343
      },
      __self: this
    }), _react.default.createElement(_Button.default, {
      type: "submit",
      "data-testid": "submit",
      fullWidth: true,
      variant: "contained",
      color: "primary",
      className: classes.submit,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 378
      },
      __self: this
    }, t('Login'))), this.props.loginFailed ? _react.default.createElement(_Typography.default, {
      variant: "caption",
      component: "span",
      "data-testid": "errorMsg",
      style: {
        marginLeft: '10%;',
        color: 'red'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 390
      },
      __self: this
    }, t('Login failed! Invalid id or password')) : _react.default.createElement("span", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 399
      },
      __self: this
    }, "\xA0"))), _react.default.createElement(_CardMedia.default, {
      image: _SamsungLogoBlue.default,
      className: classes.samsungLogo,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 403
      },
      __self: this
    }))));
  }

}

const mapStateToProps = state => {
  return {
    lang: state.headerLanguageReducer.lang,
    username: state.authenticationReducer.username,
    password: state.authenticationReducer.password,
    loginFailed: state.authenticationReducer.loginFailed,
    isLoggedIn: state.authenticationReducer.isLoggedIn
  };
};

const mapDispatchToProps = dispatch => {
  return {
    changeLanguage: val => dispatch(actionCreators.changeLanguage(val)),
    changeCredentials: payload => dispatch(actionCreators.changeCredentials(payload)),
    login: (data, fn) => dispatch({
      type: actionTypes.SAGA_LOGIN,
      payload: data,
      history: fn
    })
  };
};

Authentication.propTypes = {
  history: _propTypes.default.shape({
    push: _propTypes.default.func
  })
};
Authentication.defaultProps = {
  history: {
    push: () => {}
  }
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)((0, _reactI18next.withTranslation)('translations')(Authentication)));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,