6dee9e1b4c0e73133f12b0c725e24f20
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));

var _DialogActions = _interopRequireDefault(require("@material-ui/core/DialogActions"));

var _DialogContent = _interopRequireDefault(require("@material-ui/core/DialogContent"));

var _DialogContentText = _interopRequireDefault(require("@material-ui/core/DialogContentText"));

var _styles = require("@material-ui/core/styles");

var _DialogTitle = _interopRequireDefault(require("@material-ui/core/DialogTitle"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _DeleteICON = _interopRequireDefault(require("../../assets/images/Delete-ICON.png"));

var _ERRORICON = _interopRequireDefault(require("../../assets/images/ERROR-ICON.png"));

var _INFOICON = _interopRequireDefault(require("../../assets/images/INFO-ICON.png"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/Dialog/index.js";

const styles = theme => ({
  title: {
    // backgroundColor: '#18355f',
    backgroundColor: '#424850',
    color: theme.palette.common.white,
    padding: '5px'
  },
  dialogContent: {
    display: 'flex',
    alignItems: 'center'
  },
  submit: {
    // background: '#007bff',
    height: '1.8rem',
    fontSize: '12px',
    textTransform: 'none',
    minWidth: '0px',
    width: '60px'
  },
  closeButton: {
    position: 'absolute',
    right: theme.spacing(),
    top: '0px',
    color: theme.palette.grey[500]
  },
  buttonStyle: {
    height: '22px',
    background: '#1a4d91',
    padding: '2px 16px',
    textAlign: 'center',
    cursor: 'pointer',
    color: 'white',
    margin: '0 5px',
    border: 'none',
    display: 'flex',
    justifyContent: 'center',
    align: 'center'
  },
  actions: {
    margin: '0 20px 20px 20px',
    justifyContent: 'center'
  }
});

const DialogTitle = (0, _styles.withStyles)(styles)(props => {
  const children = props.children,
        classes = props.classes,
        onClose = props.onClose;
  return _react.default.createElement(_DialogTitle.default, {
    disableTypography: true,
    className: classes.title,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89
    },
    __self: void 0
  }, _react.default.createElement(_Typography.default, {
    variant: "h6",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 90
    },
    __self: void 0
  }, children), _react.default.createElement(_IconButton.default, {
    "aria-label": "Close",
    className: classes.closeButton,
    onClick: onClose,
    "data-testid": "alertCloseButton",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91
    },
    __self: void 0
  }, _react.default.createElement("span", {
    style: {
      fontSize: '14px',
      color: '#fff'
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 97
    },
    __self: void 0
  }, "x")));
});

class AlertDialog extends _react.default.Component {
  // handleClickOpen = () => {
  //   this.setState({ open: true });
  // };
  // handleClose = () => {
  //   this.setState({ open: false });
  // };
  render() {
    const classes = this.props.classes;
    const actions = this.props.type !== 'alert' && this.props.type !== 'info' ? _react.default.createElement(_DialogActions.default, {
      className: classes.actions,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 117
      },
      __self: this
    }, _react.default.createElement(_Button.default, {
      color: "primary",
      variant: "contained",
      onClick: this.props.handleClose,
      className: classes.submit,
      autoFocus: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 118
      },
      __self: this
    }, "No"), _react.default.createElement(_Button.default, {
      color: "primary",
      variant: "contained",
      onClick: this.props.onConfirm,
      className: classes.submit,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 127
      },
      __self: this
    }, "Yes")) : _react.default.createElement(_DialogActions.default, {
      className: classes.actions,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 137
      },
      __self: this
    }, _react.default.createElement(_Button.default, {
      color: "primary",
      variant: "contained",
      onClick: this.props.handleClose,
      className: classes.submit,
      autoFocus: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 138
      },
      __self: this
    }, "OK"));

    const getIcon = type => {
      if (type === 'alert') return _ERRORICON.default;
      if (type === 'info') return _INFOICON.default;
      return _DeleteICON.default;
    };

    return _react.default.createElement("div", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 157
      },
      __self: this
    }, _react.default.createElement(_Dialog.default // minWidth="xs"
    , {
      maxWidth: "xs" // fullWidth="false"
      ,
      open: this.props.open ? this.props.open : false,
      onClose: this.props.handleClose,
      "aria-labelledby": "alert-dialog-title",
      "aria-describedby": "alert-dialog-description",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 161
      },
      __self: this
    }, _react.default.createElement(DialogTitle, {
      onClose: this.props.handleClose,
      id: "alert-dialog-title",
      className: classes.title,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 170
      },
      __self: this
    }, _react.default.createElement("span", {
      style: {
        display: 'flex',
        padding: '3px',
        paddingLeft: '10px',
        color: '#fff',
        fontSize: '14px',
        fontWeight: 500,
        alignItems: 'center'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 175
      },
      __self: this
    }, this.props.title)), _react.default.createElement(_DialogContent.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 189
      },
      __self: this
    }, _react.default.createElement(_DialogContentText.default, {
      id: "alert-dialog-description",
      className: classes.dialogContent,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 190
      },
      __self: this
    }, _react.default.createElement("span", {
      style: {
        padding: '35px 1px 0px 30px',
        color: '#000',
        fontSize: '12px',
        display: 'inline-block'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 194
      },
      __self: this
    }, _react.default.createElement("img", {
      style: {
        height: '20px',
        marginRight: '7px'
      },
      alt: "icon",
      src: getIcon(this.props.type),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 202
      },
      __self: this
    })), _react.default.createElement("span", {
      style: {
        padding: '35px 30px 0px 0px',
        color: '#000',
        fontSize: '12px',
        display: 'block'
      },
      "data-testid": "alertDescription",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 210
      },
      __self: this
    }, this.props.description)), _react.default.createElement("p", {
      style: {
        color: '#000',
        fontSize: '12px',
        padding: '0px 0px 0px 61px',
        display: 'block',
        marginTop: '0px'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 222
      },
      __self: this
    }, this.props.errCode)), actions));
  }

}

var _default = (0, _styles.withStyles)(styles)(AlertDialog);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,