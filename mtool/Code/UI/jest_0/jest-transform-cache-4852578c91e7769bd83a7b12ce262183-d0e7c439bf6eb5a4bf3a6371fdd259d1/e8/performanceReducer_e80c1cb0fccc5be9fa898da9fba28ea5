ac4400d189f41a3bb9e8ca2e23f16a60
/* istanbul ignore next */
"use strict";

var cov_oc6og2omh = function () {
  var path = "/home/ibof07/pk/ibofmgmt/Code/UI/src/store/reducers/performanceReducer.js";
  var hash = "c21e0b17dec586af5dd1d239bcf7a521b48267e1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ibof07/pk/ibofmgmt/Code/UI/src/store/reducers/performanceReducer.js",
    statementMap: {
      "0": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 86,
          column: 1
        }
      },
      "1": {
        start: {
          line: 88,
          column: 27
        },
        end: {
          line: 260,
          column: 1
        }
      },
      "2": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 259,
          column: 5
        }
      },
      "3": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "4": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 121,
          column: 13
        }
      },
      "5": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 129,
          column: 13
        }
      },
      "6": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "7": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "8": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "9": {
        start: {
          line: 157,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "10": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 180,
          column: 13
        }
      },
      "11": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 197,
          column: 13
        }
      },
      "12": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "13": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "14": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "15": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "16": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 88,
            column: 27
          },
          end: {
            line: 88,
            column: 28
          }
        },
        loc: {
          start: {
            line: 88,
            column: 61
          },
          end: {
            line: 260,
            column: 1
          }
        },
        line: 88
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 88,
            column: 28
          },
          end: {
            line: 88,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 88,
            column: 36
          },
          end: {
            line: 88,
            column: 48
          }
        }],
        line: 88
      },
      "1": {
        loc: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 106,
            column: 8
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 121,
            column: 13
          }
        }, {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 129,
            column: 13
          }
        }, {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: 156,
            column: 8
          },
          end: {
            line: 163,
            column: 13
          }
        }, {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 180,
            column: 13
          }
        }, {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 197,
            column: 13
          }
        }, {
          start: {
            line: 198,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: 216,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        }, {
          start: {
            line: 234,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 256,
            column: 9
          }
        }, {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 258,
            column: 25
          }
        }],
        line: 89
      },
      "2": {
        loc: {
          start: {
            line: 175,
            column: 37
          },
          end: {
            line: 175,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 60
          },
          end: {
            line: 175,
            column: 74
          }
        }, {
          start: {
            line: 175,
            column: 77
          },
          end: {
            line: 175,
            column: 81
          }
        }],
        line: 175
      },
      "3": {
        loc: {
          start: {
            line: 176,
            column: 35
          },
          end: {
            line: 176,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 56
          },
          end: {
            line: 176,
            column: 68
          }
        }, {
          start: {
            line: 176,
            column: 71
          },
          end: {
            line: 176,
            column: 75
          }
        }],
        line: 176
      },
      "4": {
        loc: {
          start: {
            line: 192,
            column: 37
          },
          end: {
            line: 192,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 60
          },
          end: {
            line: 192,
            column: 74
          }
        }, {
          start: {
            line: 192,
            column: 77
          },
          end: {
            line: 192,
            column: 81
          }
        }],
        line: 192
      },
      "5": {
        loc: {
          start: {
            line: 193,
            column: 35
          },
          end: {
            line: 193,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 56
          },
          end: {
            line: 193,
            column: 68
          }
        }, {
          start: {
            line: 193,
            column: 71
          },
          end: {
            line: 193,
            column: 75
          }
        }],
        line: 193
      },
      "6": {
        loc: {
          start: {
            line: 209,
            column: 37
          },
          end: {
            line: 209,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 60
          },
          end: {
            line: 209,
            column: 74
          }
        }, {
          start: {
            line: 209,
            column: 77
          },
          end: {
            line: 209,
            column: 81
          }
        }],
        line: 209
      },
      "7": {
        loc: {
          start: {
            line: 210,
            column: 35
          },
          end: {
            line: 210,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 210,
            column: 56
          },
          end: {
            line: 210,
            column: 68
          }
        }, {
          start: {
            line: 210,
            column: 71
          },
          end: {
            line: 210,
            column: 75
          }
        }],
        line: 210
      },
      "8": {
        loc: {
          start: {
            line: 227,
            column: 37
          },
          end: {
            line: 227,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 227,
            column: 60
          },
          end: {
            line: 227,
            column: 74
          }
        }, {
          start: {
            line: 227,
            column: 76
          },
          end: {
            line: 227,
            column: 80
          }
        }],
        line: 227
      },
      "9": {
        loc: {
          start: {
            line: 228,
            column: 35
          },
          end: {
            line: 228,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 228,
            column: 56
          },
          end: {
            line: 228,
            column: 68
          }
        }, {
          start: {
            line: 228,
            column: 71
          },
          end: {
            line: 228,
            column: 75
          }
        }],
        line: 228
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "c21e0b17dec586af5dd1d239bcf7a521b48267e1"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.initialState = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var
/* istanbul ignore next */
actionTypes = _interopRequireWildcard(require("../actions/actionTypes"));

/* istanbul ignore next */ function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const initialState =
/* istanbul ignore next */
(cov_oc6og2omh.s[0]++, {
  cpuUsage: {
    yLabel: 'CPU Usage (Percentage)',
    values: [],
    loaded: false,
    name: 'CPU Usage'
  },
  diskWrite: {
    yLabel: 'Write (MB/S)',
    values: [],
    loaded: false,
    name: 'Host Storage Write'
  },
  diskUsed: {
    yLabel: 'Used (percentage)',
    values: [],
    loaded: false,
    name: 'Host Storage Usage'
  },
  readIOPS: {
    yLabel: 'KIOPS',
    values: [],
    loaded: false,
    name: 'Read IOPS'
  },
  writeIOPS: {
    yLabel: 'KIOPS',
    values: [],
    loaded: false,
    name: 'Write IOPS'
  },
  readBandwidth: {
    yLabel: 'Bandwidth (MB/s)',
    values: [],
    loaded: false,
    name: 'Read Bandwidth'
  },
  writeBandwidth: {
    yLabel: 'Bandwidth (MB/s)',
    values: [],
    loaded: false,
    name: 'Write Bandwidth'
  },
  latency: {
    yLabel: 'Latency (ns)',
    values: [],
    loaded: false,
    name: 'Latency'
  },
  power_usage: {
    yLabel: 'Watts (W)',
    values: [],
    loaded: false,
    name: 'Input Power'
  },
  vols: {}
});

/* istanbul ignore next */
exports.initialState = initialState;
cov_oc6og2omh.s[1]++;

const performanceReducer = (state =
/* istanbul ignore next */
(cov_oc6og2omh.b[0][0]++, initialState), action) => {
  /* istanbul ignore next */
  cov_oc6og2omh.f[0]++;
  cov_oc6og2omh.s[2]++;

  switch (action.type) {
    // case actionTypes.FETCH_DISK_USED:
    //     return {
    //         ...state,
    //         diskUsed: {
    //             ...state.diskUsed,
    //             values: action.diskUser
    //         }
    //     }
    // case actionTypes.FETCH_DISK_WRITE:
    //     return {
    //         ...state,
    //         diskWrite: {
    //             ...state.diskWrite,
    //             values: action.diskWrite
    //         }
    //     }
    case actionTypes.FETCH_CPU_USAGE:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][0]++;
      cov_oc6og2omh.s[3]++;
      return (
        /* istanbul ignore next */
        _objectSpread({}, state, {
          cpuUsage:
          /* istanbul ignore next */
          _objectSpread({}, state.cpuUsage, {
            values: action.cpuUsage
          })
        })
      );

    case actionTypes.FETCH_READ_BANDWIDTH:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][1]++;
      cov_oc6og2omh.s[4]++;
      return (
        /* istanbul ignore next */
        _objectSpread({}, state, {
          readBandwidth:
          /* istanbul ignore next */
          _objectSpread({}, state.readBandwidth, {
            values: action.bw
          })
        })
      );

    case actionTypes.FETCH_WRITE_BANDWIDTH:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][2]++;
      cov_oc6og2omh.s[5]++;
      return (
        /* istanbul ignore next */
        _objectSpread({}, state, {
          writeBandwidth:
          /* istanbul ignore next */
          _objectSpread({}, state.writeBandwidth, {
            values: action.bw
          })
        })
      );

    case actionTypes.FETCH_LATENCY:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][3]++;
      cov_oc6og2omh.s[6]++;
      return (
        /* istanbul ignore next */
        _objectSpread({}, state, {
          latency:
          /* istanbul ignore next */
          _objectSpread({}, state.latency, {
            values: action.latency
          })
        })
      );

    case actionTypes.FETCH_READ_IOPS:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][4]++;
      {
        /* istanbul ignore next */
        cov_oc6og2omh.s[7]++;
        return (
          /* istanbul ignore next */
          _objectSpread({}, state, {
            readIOPS:
            /* istanbul ignore next */
            _objectSpread({}, state.readIOPS, {
              values: action.iops
            })
          })
        );
      }

    case actionTypes.FETCH_WRITE_IOPS:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][5]++;
      {
        /* istanbul ignore next */
        cov_oc6og2omh.s[8]++;
        return (
          /* istanbul ignore next */
          _objectSpread({}, state, {
            writeIOPS:
            /* istanbul ignore next */
            _objectSpread({}, state.writeIOPS, {
              values: action.iops
            })
          })
        );
      }

    case actionTypes.FETCH_INPUT_POWER_VARIATION:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][6]++;
      cov_oc6og2omh.s[9]++;
      return (
        /* istanbul ignore next */
        _objectSpread({}, state, {
          power_usage:
          /* istanbul ignore next */
          _objectSpread({}, state.power_usage, {
            values: action.watts
          })
        })
      );

    case actionTypes.FETCH_VOL_READ_BW:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][7]++;
      cov_oc6og2omh.s[10]++;
      return (
        /* istanbul ignore next */
        _objectSpread({}, state, {
          vols:
          /* istanbul ignore next */
          _objectSpread({}, state.vols, {
            [action.level]:
            /* istanbul ignore next */
            _objectSpread({}, state.vols[action.level], {
              readBandwidth: {
                yLabel: 'Bandwidth (MB/s)',
                values: action.bw,
                name: `Read Bandwidth ${action.name}`,
                maxiops: action.maxiops !== 0 ?
                /* istanbul ignore next */
                (cov_oc6og2omh.b[2][0]++, action.maxiops) :
                /* istanbul ignore next */
                (cov_oc6og2omh.b[2][1]++, null),
                maxbw: action.maxbw !== 0 ?
                /* istanbul ignore next */
                (cov_oc6og2omh.b[3][0]++, action.maxbw) :
                /* istanbul ignore next */
                (cov_oc6og2omh.b[3][1]++, null)
              }
            })
          })
        })
      );

    case actionTypes.FETCH_VOL_WRITE_BW:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][8]++;
      cov_oc6og2omh.s[11]++;
      return (
        /* istanbul ignore next */
        _objectSpread({}, state, {
          vols:
          /* istanbul ignore next */
          _objectSpread({}, state.vols, {
            [action.level]:
            /* istanbul ignore next */
            _objectSpread({}, state.vols[action.level], {
              writeBandwidth: {
                yLabel: 'Bandwidth (MB/s)',
                values: action.bw,
                name: `Write Bandwidth ${action.name}`,
                maxiops: action.maxiops !== 0 ?
                /* istanbul ignore next */
                (cov_oc6og2omh.b[4][0]++, action.maxiops) :
                /* istanbul ignore next */
                (cov_oc6og2omh.b[4][1]++, null),
                maxbw: action.maxbw !== 0 ?
                /* istanbul ignore next */
                (cov_oc6og2omh.b[5][0]++, action.maxbw) :
                /* istanbul ignore next */
                (cov_oc6og2omh.b[5][1]++, null)
              }
            })
          })
        })
      );

    case actionTypes.FETCH_VOL_READ_IOPS:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][9]++;
      {
        /* istanbul ignore next */
        cov_oc6og2omh.s[12]++;
        return (
          /* istanbul ignore next */
          _objectSpread({}, state, {
            vols:
            /* istanbul ignore next */
            _objectSpread({}, state.vols, {
              [action.level]:
              /* istanbul ignore next */
              _objectSpread({}, state.vols[action.level], {
                readIOPS: {
                  yLabel: 'KIOPS',
                  values: action.iops,
                  name: `Read IOPS ${action.name}`,
                  maxiops: action.maxiops !== 0 ?
                  /* istanbul ignore next */
                  (cov_oc6og2omh.b[6][0]++, action.maxiops) :
                  /* istanbul ignore next */
                  (cov_oc6og2omh.b[6][1]++, null),
                  maxbw: action.maxbw !== 0 ?
                  /* istanbul ignore next */
                  (cov_oc6og2omh.b[7][0]++, action.maxbw) :
                  /* istanbul ignore next */
                  (cov_oc6og2omh.b[7][1]++, null)
                }
              })
            })
          })
        );
      }

    case actionTypes.FETCH_VOL_WRITE_IOPS:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][10]++;
      {
        /* istanbul ignore next */
        cov_oc6og2omh.s[13]++;
        return (
          /* istanbul ignore next */
          _objectSpread({}, state, {
            vols:
            /* istanbul ignore next */
            _objectSpread({}, state.vols, {
              [action.level]:
              /* istanbul ignore next */
              _objectSpread({}, state.vols[action.level], {
                writeIOPS: {
                  yLabel: 'KIOPS',
                  values: action.iops,
                  name: `Write IOPS ${action.name}`,
                  maxiops: action.maxiops !== 0 ?
                  /* istanbul ignore next */
                  (cov_oc6og2omh.b[8][0]++, action.maxiops) :
                  /* istanbul ignore next */
                  (cov_oc6og2omh.b[8][1]++, null),
                  maxbw: action.maxbw !== 0 ?
                  /* istanbul ignore next */
                  (cov_oc6og2omh.b[9][0]++, action.maxbw) :
                  /* istanbul ignore next */
                  (cov_oc6og2omh.b[9][1]++, null)
                }
              })
            })
          })
        );
      }

    case actionTypes.FETCH_VOL_LATENCY:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][11]++;
      {
        /* istanbul ignore next */
        cov_oc6og2omh.s[14]++;
        return (
          /* istanbul ignore next */
          _objectSpread({}, state, {
            vols:
            /* istanbul ignore next */
            _objectSpread({}, state.vols, {
              [action.level]:
              /* istanbul ignore next */
              _objectSpread({}, state.vols[action.level], {
                latency: {
                  yLabel: 'Latency (ns)',
                  values: action.latency,
                  name: `Latency ${action.name}` // maxiops: action.maxiops !== 0 ? action.maxiops: null,
                  // maxbw: action.maxbw !== 0 ? action.maxbw : null

                }
              })
            })
          })
        );
      }

    case actionTypes.RESET_PERF_STATE:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][12]++;
      {
        /* istanbul ignore next */
        cov_oc6og2omh.s[15]++;
        return (
          /* istanbul ignore next */
          _objectSpread({}, initialState)
        );
      }

    default:
      /* istanbul ignore next */
      cov_oc6og2omh.b[1][13]++;
      cov_oc6og2omh.s[16]++;
      return state;
  }
};

/* istanbul ignore next */
var _default = performanceReducer;

/* istanbul ignore next */
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,