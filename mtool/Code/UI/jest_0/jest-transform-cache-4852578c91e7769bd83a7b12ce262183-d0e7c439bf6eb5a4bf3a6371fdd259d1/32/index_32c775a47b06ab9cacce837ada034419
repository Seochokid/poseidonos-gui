d1d9e209ab12aba2780d9c3283e8b060
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@material-ui/core");

require("./AlertFields.css");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AlertFields/index.js";

const styles = theme => {
  return {
    radioGroup: {
      display: 'flex',
      flexDirection: 'column',
      marginLeft: theme.spacing(1)
    },
    alertTypesOuterGrid: {
      border: '1px solid gray',
      maxWidth: '100%',
      minHeight: '130px',
      maxHeight: '130px',
      overflowY: 'auto',
      overflowX: 'hidden',
      background: '#fff'
    },
    alertTypesInnerGrid: {
      maxWidth: '100%'
    },
    alertTypesHeader: {
      backgroundColor: '#788595',
      color: 'white',
      paddingLeft: '5px',
      paddingTop: '3px',
      fontSize: '14px',
      height: '25px'
    },
    radioButtonClass: {
      margin: theme.spacing(1, 0)
    }
  };
};

const AlertFields = props => {
  const classes = props.classes;
  return _react.default.createElement(_core.Grid, {
    sm: 6,
    xs: 12,
    item: true,
    container: true,
    "data-testid": "AlertFieldsTag",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 68
    },
    __self: void 0
  }, _react.default.createElement(_core.Grid, {
    xs: 12,
    item: true,
    className: classes.alertTypesOuterGrid,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 69
    },
    __self: void 0
  }, _react.default.createElement(_core.Typography, {
    className: classes.alertTypesHeader,
    variant: "h6",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 70
    },
    __self: void 0
  }, "Alert Fields"), _react.default.createElement(_core.Grid, {
    sm: 6,
    xs: 12,
    item: true,
    className: classes.alertTypesInnerGrid,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 71
    },
    __self: void 0
  }, _react.default.createElement(_core.RadioGroup, {
    name: "alertRadioButton",
    className: classes.radioGroup,
    onChange: props.onHandleChange,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 72
    },
    __self: void 0
  }, props.alertClusterList[props.radioindex].alertFields && props.alertClusterName && props.selectedAlertSubCluster && props.alertType ? props.alertClusterList[props.radioindex].alertFields.map(alertField => {
    return alertField !== 'NA' ? _react.default.createElement(_core.FormControlLabel, {
      key: alertField,
      control: _react.default.createElement(_core.Radio, {
        "data-testid": "alertFieldRadioTag",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        },
        __self: void 0
      }),
      checked: props.alertRadioButton === alertField,
      value: alertField,
      label: alertField,
      labelPlacement: "end",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 86
      },
      __self: void 0
    }) : alertField;
  }) : null))));
};

var _default = (0, _core.withStyles)(styles)(AlertFields);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInN0eWxlcyIsInRoZW1lIiwicmFkaW9Hcm91cCIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwibWFyZ2luTGVmdCIsInNwYWNpbmciLCJhbGVydFR5cGVzT3V0ZXJHcmlkIiwiYm9yZGVyIiwibWF4V2lkdGgiLCJtaW5IZWlnaHQiLCJtYXhIZWlnaHQiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJiYWNrZ3JvdW5kIiwiYWxlcnRUeXBlc0lubmVyR3JpZCIsImFsZXJ0VHlwZXNIZWFkZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb2xvciIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1RvcCIsImZvbnRTaXplIiwiaGVpZ2h0IiwicmFkaW9CdXR0b25DbGFzcyIsIm1hcmdpbiIsIkFsZXJ0RmllbGRzIiwicHJvcHMiLCJjbGFzc2VzIiwib25IYW5kbGVDaGFuZ2UiLCJhbGVydENsdXN0ZXJMaXN0IiwicmFkaW9pbmRleCIsImFsZXJ0RmllbGRzIiwiYWxlcnRDbHVzdGVyTmFtZSIsInNlbGVjdGVkQWxlcnRTdWJDbHVzdGVyIiwiYWxlcnRUeXBlIiwibWFwIiwiYWxlcnRGaWVsZCIsImFsZXJ0UmFkaW9CdXR0b24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQTBCQTs7QUFDQTs7QUFDQTs7OztBQUdBLE1BQU1BLE1BQU0sR0FBSUMsS0FBSyxJQUFJO0FBQ3ZCLFNBQVE7QUFDTkMsSUFBQUEsVUFBVSxFQUFDO0FBQ1RDLE1BQUFBLE9BQU8sRUFBQyxNQURDO0FBRVRDLE1BQUFBLGFBQWEsRUFBQyxRQUZMO0FBR1RDLE1BQUFBLFVBQVUsRUFBQ0osS0FBSyxDQUFDSyxPQUFOLENBQWMsQ0FBZDtBQUhGLEtBREw7QUFNTkMsSUFBQUEsbUJBQW1CLEVBQUU7QUFDbkJDLE1BQUFBLE1BQU0sRUFBRSxnQkFEVztBQUVuQkMsTUFBQUEsUUFBUSxFQUFFLE1BRlM7QUFHbkJDLE1BQUFBLFNBQVMsRUFBRSxPQUhRO0FBSW5CQyxNQUFB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QUFBO0FBQUE7QUFBQSxNQUZKLEdBV0lBLFVBWk47QUFhRCxHQWZELENBSkgsR0FxQkcsSUExQk4sQ0FERixDQUZGLENBREYsQ0FERjtBQXFDRCxDQXZDRDs7ZUF5Q2Usc0JBQVdwQyxNQUFYLEVBQW1CeUIsV0FBbkIsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgQ09QWVJJR0hUIChjKSAyMDE5IFNBTVNVTkcgRUxFQ1RST05JQ1MgQ08uLCBMVEQuICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgIEFMTCBSSUdIVFMgUkVTRVJWRUQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCB0byBsaWNlbnNlZXMgb2YgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gICAgICAgIC9cbi8gICBwcm9kdWN0cyB0byB1c2Ugb3IgYWJzdHJhY3QgdGhpcyBjb21wdXRlciBwcm9ncmFtIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mICAgICAgICAgL1xuLyAgIGltcGxlbWVudGluZyBhIHByb2R1Y3QgYmFzZWQgb24gU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gcHJvZHVjdHMuICAgICAgICAgICAvXG4vICAgTm8gb3RoZXIgcmlnaHRzIHRvIHJlcHJvZHVjZSwgdXNlLCBvciBkaXNzZW1pbmF0ZSB0aGlzIGNvbXB1dGVyIHByb2dyYW0sICAgICAgICAgIC9cbi8gICB3aGV0aGVyIGluIHBhcnQgb3IgaW4gd2hvbGUsIGFyZSBncmFudGVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIG1ha2VzIG5vIHJlcHJlc2VudGF0aW9uIG9yIHdhcnJhbnRpZXMgd2l0aCAgICAgICAgICAvXG4vICAgcmVzcGVjdCB0byB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyBjb21wdXRlciBwcm9ncmFtLCBhbmQgc3BlY2lmaWNhbGx5IGRpc2NsYWltcyAgIC9cbi8gICBhbnkgcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYW1hZ2VzLCBzcGVjaWFsIG9yIGNvbnNlcXVlbnRpYWwsIGNvbm5lY3RlZCAgICAgICAgICAgL1xuLyAgIHdpdGggdGhlIHVzZSBvZiB0aGlzIHByb2dyYW0uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuXG5cbkRFU0NSSVBUSU9OOiBBbGVydCBNYW5hZ2VtZW50IENvbXBvbmVudCBmb3Igc2VsZWN0aW5nIEFsZXJ0IEZpZWxkc1xuQE5BTUUgOiBpbmRleC5qc1xuQEFVVEhPUlM6IEpheSBIaXRlc2ggU2FuZ2hhdmkgXG5AVmVyc2lvbiA6IDEuMCAqXG5AUkVWSVNJT04gSElTVE9SWVxuWzAzLzA2LzIwMTldIFtKYXldIDogUHJvdG90eXBpbmcuLi4uLi4uLi4uLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2xMYWJlbCwgUmFkaW8sIFJhZGlvR3JvdXAsIEdyaWQsIFR5cG9ncmFwaHksIHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XG5pbXBvcnQgJy4vQWxlcnRGaWVsZHMuY3NzJztcblxuXG5jb25zdCBzdHlsZXMgPSAodGhlbWUgPT4ge1xuICByZXR1cm4gKHtcbiAgICByYWRpb0dyb3VwOntcbiAgICAgIGRpc3BsYXk6J2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjonY29sdW1uJyxcbiAgICAgIG1hcmdpbkxlZnQ6dGhlbWUuc3BhY2luZygxKVxuICAgIH0sXG4gICAgYWxlcnRUeXBlc091dGVyR3JpZDoge1xuICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGdyYXknLFxuICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgIG1pbkhlaWdodDogJzEzMHB4JyxcbiAgICAgIG1heEhlaWdodDogJzEzMHB4JyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIGJhY2tncm91bmQ6ICcjZmZmJ1xuICAgIH0sXG4gICAgYWxlcnRUeXBlc0lubmVyR3JpZDoge1xuICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICB9LFxuICAgIGFsZXJ0VHlwZXNIZWFkZXI6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJyM3ODg1OTUnLFxuICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICBwYWRkaW5nTGVmdDogJzVweCcsXG4gICAgICBwYWRkaW5nVG9wOiAnM3B4JyxcbiAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICBoZWlnaHQ6ICcyNXB4JyxcbiAgICB9LFxuICAgIHJhZGlvQnV0dG9uQ2xhc3M6IHtcbiAgICAgIG1hcmdpbjogdGhlbWUuc3BhY2luZygxLCAwKSxcbiAgICB9XG4gIH0pXG59KTtcblxuY29uc3QgQWxlcnRGaWVsZHMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgY2xhc3NlcyB9ID0gcHJvcHM7XG4gIHJldHVybiAoXG4gICAgPEdyaWQgc209ezZ9IHhzPXsxMn0gaXRlbSBjb250YWluZXIgZGF0YS10ZXN0aWQgPSBcIkFsZXJ0RmllbGRzVGFnXCI+XG4gICAgICA8R3JpZCB4cz17MTJ9IGl0ZW0gY2xhc3NOYW1lPXtjbGFzc2VzLmFsZXJ0VHlwZXNPdXRlckdyaWR9PlxuICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMuYWxlcnRUeXBlc0hlYWRlcn0gdmFyaWFudD1cImg2XCI+QWxlcnQgRmllbGRzPC9UeXBvZ3JhcGh5PlxuICAgICAgICA8R3JpZCBzbT17Nn0geHM9ezEyfSBpdGVtIGNsYXNzTmFtZT17Y2xhc3Nlcy5hbGVydFR5cGVzSW5uZXJHcmlkfT5cbiAgICAgICAgICA8UmFkaW9Hcm91cFxuICAgICAgICAgICAgbmFtZT1cImFsZXJ0UmFkaW9CdXR0b25cIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnJhZGlvR3JvdXB9XG4gICAgICAgICAgICBvbkNoYW5nZT17cHJvcHMub25IYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Byb3BzLmFsZXJ0Q2x1c3Rlckxpc3RbcHJvcHMucmFkaW9pbmRleF0uYWxlcnRGaWVsZHMgJiZcbiAgICAgICAgICAgICAgcHJvcHMuYWxlcnRDbHVzdGVyTmFtZSAmJlxuICAgICAgICAgICAgICBwcm9wcy5zZWxlY3RlZEFsZXJ0U3ViQ2x1c3RlciAmJlxuICAgICAgICAgICAgICBwcm9wcy5hbGVydFR5cGVcbiAgICAgICAgICAgICAgPyBwcm9wcy5hbGVydENsdXN0ZXJMaXN0W3Byb3BzLnJhZGlvaW5kZXhdLmFsZXJ0RmllbGRzLm1hcChcbiAgICAgICAgICAgICAgICAoYWxlcnRGaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgYWxlcnRGaWVsZCAhPT0gJ05BJyA/XG4gICAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sTGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0ge2FsZXJ0RmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2w9ezxSYWRpbyBkYXRhLXRlc3RpZCA9IFwiYWxlcnRGaWVsZFJhZGlvVGFnXCIgLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3Byb3BzLmFsZXJ0UmFkaW9CdXR0b24gPT09IGFsZXJ0RmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXthbGVydEZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17YWxlcnRGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxQbGFjZW1lbnQ9XCJlbmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgOiBhbGVydEZpZWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICAgIDwvUmFkaW9Hcm91cD5cbiAgICAgICAgPC9HcmlkPlxuICAgICAgPC9HcmlkPlxuICAgIDwvR3JpZD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzKShBbGVydEZpZWxkcyk7XG4iXX0=