a5c490ab070b1cc996d56eb1d51e5b55
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _materialTable = _interopRequireDefault(require("material-table"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _styles = require("@material-ui/core/styles");

var _core = require("@material-ui/core");

var _icons = require("@material-ui/icons");

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _Dialog = _interopRequireDefault(require("../../Dialog"));

require("./AlertTable.css");

var _theme = require("../../../theme");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AlertTable/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => {
  return {
    titleContainer: {
      marginTop: "-5px",
      maxWidth: '100%',
      flexBasis: '100%'
    },
    pageHeader: {
      textAlign: 'left',
      fontSize: '16px',
      fontWeight: 'bold',
      color: '#424850',
      marginBottom: theme.spacing(1)
    },
    tableContainer: {
      maxWidth: '100%',
      flexBasis: '100%'
    }
  };
};

let alertsData = [];

class AlertTable extends _react.Component {
  constructor(props) {
    super(props);
    this.theme = (0, _core.createMuiTheme)({
      typography: {
        fontSize: 12,
        fontFamily: 'Arial'
      },
      palette: {
        primary: {
          main: '#4caf50'
        },
        secondary: {
          main: '#ff9100'
        }
      }
    });
    this.state = {
      alertConditionValue: "",
      columns: [{
        title: 'Alert Name',
        field: 'alertName',
        editable: 'never'
      }, {
        title: 'Alert Type',
        field: 'alertType',
        editable: 'never'
      }, {
        title: 'Alert Condition',
        field: 'alertCondition',
        render: rowData => _react.default.createElement(_core.Select, {
          SelectDisplayProps: {
            'data-testid': "SelectEditTag"
          },
          disabled: true,
          value: rowData && rowData.tableData && rowData.tableData.id !== null ? this.props.alerts && this.props.alerts[rowData.tableData.id] ? this.props.alerts[rowData.tableData.id].alertCondition : 'This is NULL' : 'This is NULL',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 100
          },
          __self: this
        }, this.props.dropdownCondition ? this.props.dropdownCondition.map(eachValue => {
          return _react.default.createElement(_core.MenuItem, {
            key: eachValue,
            value: eachValue,
            "data-testid": "SelectEditMenuItemTag",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 108
            },
            __self: this
          }, eachValue);
        }) : null),
        editComponent: row => _react.default.createElement(_core.Select, {
          SelectDisplayProps: {
            'data-testid': "SelectEditTag"
          },
          onChange: event => {
            alertsData = [...this.props.alerts];
            alertsData[row.rowData.tableData.id].alertCondition = event.target.value;
            row.rowData.alertCondition = event.target.value;
            this.props.updateAlertsState(alertsData);
            this.setState(_objectSpread({}, this.state, {
              rowid: row.rowData.tableData.id,
              alertConditionValue: event.target.value
            }));
          },
          value: row && row.rowData && row.rowData.tableData && row.rowData.tableData.id !== null ? this.props.alerts[row.rowData.tableData.id].alertCondition : 'asd',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 116
          },
          __self: this
        }, this.props.dropdownCondition ? this.props.dropdownCondition.map(eachValue => {
          return _react.default.createElement(_core.MenuItem, {
            key: eachValue,
            value: eachValue,
            "data-testid": "SelectEditMenuItemTag",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 135
            },
            __self: this
          }, eachValue);
        }) : null)
      }, {
        title: 'Alert Value',
        field: 'alertRange',
        type: 'numeric',
        headerStyle: {
          textAlign: 'left'
        },
        cellStyle: {
          textAlign: 'left'
        }
      }, {
        title: 'Active/Inactive',
        field: 'active',
        editable: 'never',
        render: row => _react.default.createElement(_core.Switch, {
          "data-testid": "SwitchTag",
          disabled: row && row.tableData && row.tableData.editing === 'update',
          size: "small",
          checked: row.active,
          onChange: () => this.props.togglealertstatus(row.tableData.id),
          color: "primary",
          inputProps: {
            'aria-label': 'primary checkbox'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 157
          },
          __self: this
        })
      }, {
        title: 'Alert Description',
        field: 'description'
      }]
    };
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_core.Grid, {
      item: true,
      "data-testid": "AlertsTableTag",
      container: true,
      sm: 6,
      xs: 12,
      className: classes.titleContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 179
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      sm: 6,
      xs: 12,
      item: true,
      className: classes.tableContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 180
      },
      __self: this
    }, _react.default.createElement(_MuiThemeProvider.default, {
      theme: this.theme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 181
      },
      __self: this
    }, _react.default.createElement(_materialTable.default, {
      style: {
        flexBasis: '100%'
      },
      editable: {
        onRowUpdate: (newData, oldData) => new Promise(resolve => {
          setTimeout(() => {
            if (this.state.alertConditionValue === "") newData.alertCondition = oldData.alertCondition;else newData.alertCondition = this.state.alertConditionValue;
            this.props.saveChange(newData);
            this.setState(_objectSpread({}, this.state, {
              alertConditionValue: ""
            }));
            resolve();
          }, 1000);
        }),
        onRowDelete: oldData => new Promise(resolve => {
          setTimeout(() => {
            {
              const event = {
                target: {
                  checked: true
                }
              };
              this.props.selectalerts(event, oldData.tableData.id);
              this.props.deletealerts();
            }
            resolve();
          }, 1000);
        })
      },
      icons: {
        Check: _icons.Check,
        FirstPage: _icons.FirstPage,
        LastPage: _icons.LastPage,
        NextPage: _icons.ChevronRight,
        PreviousPage: _icons.ChevronLeft,
        Search: _icons.Search,
        ThirdStateCheck: _icons.Remove,
        DetailPanel: _icons.ChevronRight,
        Export: _icons.SaveAlt,
        Filter: _icons.FilterList,
        Add: _icons.Add,
        Edit: _icons.Edit,
        Delete: _Delete.default,
        SortArrow: _icons.ArrowUpward,
        Clear: _icons.Clear
      },
      columns: this.state.columns,
      data: this.props.alerts,
      options: {
        headerStyle: _theme.customTheme.table.header,
        actionsColumnIndex: -1,
        selection: false,
        sorting: true,
        toolbar: false,
        maxBodyHeight: '200px'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 182
      },
      __self: this
    }), _react.default.createElement(_Dialog.default, {
      title: this.props.alerttitle,
      type: "",
      description: this.props.alertdescription,
      open: this.props.alertOpen,
      handleClose: this.props.handleAlertClose,
      onConfirm: this.props.triggerCommand,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 241
      },
      __self: this
    }))));
  }

}

;

var _default = (0, _styles.withStyles)(styles)(AlertTable);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,