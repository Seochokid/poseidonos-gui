dfbd1c416a813b9b5b869bfd293d6da6
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _core = require("@material-ui/core");

var _theme = require("../../../theme");

require("../../../containers/Volume/Volume.css");

require("./CreateVolume.css");

var _Dialog = _interopRequireDefault(require("../../Dialog"));

var actionCreators = _interopRequireWildcard(require("../../../store/actions/exportActionCreators"));

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/VolumeManagement/CreateVolume/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const io = require('socket.io-client');

const styles = theme => ({
  formContainer: {
    width: '100%',
    display: 'flex',
    padding: theme.spacing(0, 4),
    flexWrap: 'wrap',
    boxSizing: 'border-box'
  },
  volBtnContainer: {
    margin: theme.spacing(1, 0)
  },
  unitSelect: {
    marginTop: theme.spacing(2),
    height: 32
  },
  unitText: {
    width: 'calc(80% - 60px)',
    display: 'flex',
    justifyContent: 'flex-end',
    [theme.breakpoints.down('xs')]: {
      width: '60%'
    }
  },
  formControl: {
    [theme.breakpoints.down('xs')]: {
      justifyContent: 'center'
    }
  },
  button: {
    height: '1.8rem',
    lineHeight: '0px'
  },
  volumeName: {
    width: '80%'
  },
  volumeUnit: {
    minWidth: 60,
    [theme.breakpoints.down('xs')]: {
      width: '20%'
    }
  },
  volumeCreatePaper: {
    height: 330,
    [theme.breakpoints.down('xs')]: {
      height: 470
    }
  },
  createHeader: _theme.customTheme.card.header,
  caption: {
    color: '#424850',
    marginBottom: theme.spacing(2),
    marginTop: theme.spacing(2)
  },
  labelCheckbox: {
    marginTop: theme.spacing(3)
  }
});

class CreateVolume extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      volume_count: 1,
      volume_name: 'vol',
      volume_suffix: 0,
      volume_size: 100,
      volume_description: '',
      volume_units: 'GB',
      form_valid: true,
      open: false,
      alert_description: '',
      maxbw: 0,
      maxiops: 0,
      stop_on_error_checkbox: false,
      mount_vol: true
    };
    this.setUnit = this.setUnit.bind(this);
    this.handleChange = this.handleChange.bind(this);
    this.createVolumeInParent = this.createVolumeInParent.bind(this);
    this.handleClose = this.handleClose.bind(this);
  }

  componentDidMount() {
    // namespace to connect to the websocket for multi-volume creation
    const createVolSocketEndPoint = ":5000/create_vol";
    const createVolSocket = io(createVolSocketEndPoint, {
      transports: ['websocket'],
      query: {
        'x-access-token': localStorage.getItem('token')
      }
    });
    createVolSocket.on('connect', () => {
      console.log("connected to create volume socket");
    }); // callback function for create multi-volume response

    createVolSocket.on("create_multi_volume", msg => {
      if (this.props.createVolumeButton === true) {
        let total_count = msg['total_count'];
        let pass = msg['pass'];
        let description = msg['description'];
        let error_msg = 'Status: ' + pass + "/" + total_count + ' volume(s) created successfully';
        this.props.toggleCreateVolumeButton(false);
        this.props.showStorageAlert({
          alertType: 'info',
          alertTitle: 'Create Volume',
          errorMsg: error_msg,
          errorCode: description
        });
        this.props.fetchVolumes();
      }
    });
  }

  setUnit(event) {
    this.setState({
      volume_units: event.target.value
    });
  }

  handleChange(event) {
    const _event$target = event.target,
          name = _event$target.name,
          value = _event$target.value;

    if (name === 'stop_on_error_checkbox') {
      this.setState({
        stop_on_error_checkbox: !this.state.stop_on_error_checkbox
      });
    } else if (name === 'mount_vol_checkbox') {
      this.setState({
        mount_vol: !this.state.mount_vol
      });
    } else this.setState({
      [name]: value
    });
  }

  handleClose() {
    this.setState({
      open: false
    });
  }

  createVolumeInParent() {
    let isError = true;
    let errorDesc = '';
    if (this.state.volume_size.length === 0) errorDesc = "Please Enter Volume Size";else if (this.state.volume_size < 1) errorDesc = "Volume Size Should be greater than 0";else if (this.state.volume_name.length < 1) errorDesc = "Please Enter Volume Name";else if (this.state.volume_count.length === 0) errorDesc = "Please Enter Volume Count";else if (this.state.volume_count < 1) errorDesc = "Volume Count should be greater than 0";else if (this.state.volume_count > parseInt(this.props.maxVolumeCount, 10)) errorDesc = `Volume Count should not exceed ${this.props.maxVolumeCount}`;else if (this.state.volume_count > 1 && this.state.volume_suffix < 0) errorDesc = "Suffix Value cannot be negative";else if (this.state.volume_count > 1 && this.state.volume_suffix === null) errorDesc = "Please Enter Suffix Start Value";else if (this.state.maxbw.length === 0) errorDesc = "Please Enter Maximum Bandwidth (MB/s) ";else if (this.state.maxiops.length === 0) errorDesc = "Please Enter Maximum IOPS (KIOPS)";else if (this.state.maxbw < 0) errorDesc = "Max Bandwidth cannot be negative";else if (this.state.maxiops < 0) errorDesc = "Maximum IOPS be negative";else if (this.state.maxiops > 0 && this.state.maxiops < 10) errorDesc = "Invalid value for Maximum IOPS";else isError = false;

    if (isError === true) {
      this.setState({
        open: true,
        alert_description: errorDesc
      });
      return;
    }

    this.props.createVolume(_objectSpread({}, this.state));
    this.setState(_objectSpread({}, this.state, {
      volume_count: 1,
      volume_name: 'vol',
      volume_suffix: 0,
      volume_size: 100,
      volume_description: '',
      volume_units: 'GB',
      maxbw: 0,
      maxiops: 0,
      stop_on_error_checkbox: false,
      mount_vol: true
    }));
  }

  render() {
    const classes = this.props.classes;
    let volumeCountTitle;
    if (this.props.volCount > 1) volumeCountTitle = `Specify the number of volumes to create. ${this.props.volCount} volumes already exist. POS supports max ${this.props.maxVolumeCount} volumes`;else if (this.props.volCount === 1) volumeCountTitle = `Specify the number of volumes to create. ${this.props.volCount} volume already exists. POS supports max ${this.props.maxVolumeCount} volumes`;else volumeCountTitle = `Specify the number of volumes to create. POS supports max ${this.props.maxVolumeCount} volumes`;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 259
      },
      __self: this
    }, _react.default.createElement(_core.Paper, {
      className: classes.volumeCreatePaper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 260
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 261
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.createHeader,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 262
      },
      __self: this
    }, "Create Volume")), _react.default.createElement("form", {
      className: classes.formContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 266
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      sm: 6,
      justify: "flex-start",
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 267
      },
      __self: this
    }, _react.default.createElement(_core.Tooltip, {
      title: volumeCountTitle,
      placement: "bottom-start",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 268
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.volumeName,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 272
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      id: "create-vol-count",
      name: "volume_count",
      label: "Volume Count",
      type: "number",
      inputProps: {
        min: 1,
        max: this.props.maxVolumeCount,
        'data-testid': "create-vol-count"
      },
      value: this.state.volume_count,
      onChange: this.handleChange,
      required: "true",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 273
      },
      __self: this
    })))), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      sm: 6,
      justify: "flex-end",
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 290
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.volumeName,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 291
      },
      __self: this
    }, _react.default.createElement(_core.FormControlLabel, {
      control: _react.default.createElement(_core.Checkbox, {
        name: "mount_vol_checkbox",
        color: "primary",
        id: "mount-vol-checkbox",
        checked: this.state.mount_vol,
        value: "Mount Volume",
        onChange: this.handleChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 294
        },
        __self: this
      }),
      label: "Mount Volume",
      className: classes.labelCheckbox,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 292
      },
      __self: this
    }))), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 306
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      variant: "h4",
      component: "h4",
      className: classes.caption,
      display: "block",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 307
      },
      __self: this
    }, "For Volume Count > 1, please provide a seed in the Suffix Start Value field (e.g. 0,1)")), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      sm: 6,
      justify: "flex-start",
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 312
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.volumeName,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 313
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      id: "create-vol-name",
      label: "Volume Name",
      name: "volume_name",
      value: this.state.volume_name,
      onChange: this.handleChange,
      inputProps: {
        'data-testid': "create-vol-name"
      },
      required: "true",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 314
      },
      __self: this
    }))), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      sm: 6,
      justify: "flex-end",
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 327
      },
      __self: this
    }, _react.default.createElement(_core.Tooltip, {
      title: " Min suffix value allowed is 0. The suffix will be appended to the volume name to form the final volume name (e.g. vol_0, vol_1)",
      placement: "bottom-start",
      disableFocusListener: this.state.volume_count < 2,
      disableHoverListener: this.state.volume_count < 2,
      disableTouchListener: this.state.volume_count < 2,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 328
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.volumeName,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 336
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      id: "create-vol-suffix",
      label: "Suffix Start Value",
      name: "volume_suffix",
      type: "number",
      InputProps: {
        inputProps: {
          min: 0
        }
      },
      value: this.state.volume_suffix,
      onChange: this.handleChange,
      disabled: this.state.volume_count < 2,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 337
      },
      __self: this
    })))), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      sm: 6,
      justify: "flex-start",
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 351
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.unitText,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 352
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      id: "create-vol-size",
      label: "Volume Size",
      name: "volume_size",
      value: this.state.volume_size,
      onChange: this.handleChange,
      type: "number",
      inputProps: {
        'data-testid': "create-vol-size"
      },
      required: "true",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 353
      },
      __self: this
    })), _react.default.createElement(_core.FormControl, {
      className: classes.volumeUnit,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 366
      },
      __self: this
    }, _react.default.createElement(_core.Select, {
      value: this.state.volume_units,
      onChange: this.setUnit,
      inputProps: {
        name: 'Volume Unit',
        id: 'vol_unit'
      },
      SelectDisplayProps: {
        'data-testid': 'volume-unit'
      },
      className: classes.unitSelect,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 367
      },
      __self: this
    }, _react.default.createElement(_core.MenuItem, {
      value: "GB",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 379
      },
      __self: this
    }, "GB"), _react.default.createElement(_core.MenuItem, {
      value: "TB",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 380
      },
      __self: this
    }, "TB")))), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      sm: 6,
      justify: "flex-end",
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 386
      },
      __self: this
    }, _react.default.createElement(_core.Tooltip, {
      title: "Min Value 10. 0 means max",
      placement: "bottom-start",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 387
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.volumeName,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 388
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      id: "create-vol-maxiops",
      label: "Maximum IOPS (KIOPS)",
      name: "maxiops",
      value: this.state.maxiops,
      onChange: this.handleChange,
      type: "number" // placeholder="Min Value 10. 0 means max"
      ,
      inputProps: {
        min: 0,
        'data-testid': "create-vol-max-iops"
      },
      required: "true",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 389
      },
      __self: this
    })))), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      sm: 6,
      justify: "flex-start",
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 403
      },
      __self: this
    }, _react.default.createElement(_core.Tooltip, {
      title: "0 means max",
      placement: "bottom-start",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 404
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.volumeName,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 405
      },
      __self: this
    }, _react.default.createElement(_core.TextField, {
      id: "create-vol-maxbw",
      label: "Maximum Bandwidth (MB/s)",
      name: "maxbw",
      value: this.state.maxbw,
      onChange: this.handleChange,
      type: "number" // placeholder="0 means max"
      ,
      inputProps: {
        min: 0,
        'data-testid': "create-vol-max-bw"
      },
      required: "true",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 406
      },
      __self: this
    })))), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      sm: 6,
      justify: "flex-end",
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 422
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.volumeName,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 423
      },
      __self: this
    }, _react.default.createElement(_core.Tooltip, {
      title: "Do you want to proceed with subsequent volume creation in case an error occurs or abort the remaining process?",
      placement: "top-start",
      disableFocusListener: this.state.volume_count < 2,
      disableHoverListener: this.state.volume_count < 2,
      disableTouchListener: this.state.volume_count < 2,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 424
      },
      __self: this
    }, _react.default.createElement(_core.FormControlLabel, {
      disabled: this.state.volume_count < 2,
      control: _react.default.createElement(_core.Checkbox, {
        name: "stop_on_error_checkbox",
        color: "primary",
        id: "create-vol-stop-on-error-checkbox",
        checked: this.state.stop_on_error_checkbox,
        value: "Stop on error",
        onChange: this.handleChange,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 434
        },
        __self: this
      }),
      label: "Stop Multi-Volume Creation on Error",
      className: classes.labelCheckbox,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 431
      },
      __self: this
    })))), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      xs: 12,
      display: "flex",
      justify: "flex-start",
      className: `${classes.volBtnContainer} ${classes.formControl}`,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 462
      },
      __self: this
    }, _react.default.createElement(_core.Tooltip, {
      title: "Volume Creation is in progress. Please wait for sometime.",
      placement: "right-start",
      open: this.props.createVolumeButton,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 463
      },
      __self: this
    }, _react.default.createElement(_core.Button, {
      onClick: this.createVolumeInParent,
      variant: "contained",
      color: "primary",
      "data-testid": "createvolume-btn",
      className: classes.button,
      disabled: this.props.createVolumeButton,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 468
      },
      __self: this
    }, "Create Volume")))), _react.default.createElement(_Dialog.default, {
      title: "Create Volume",
      description: this.state.alert_description,
      type: "alert",
      open: this.state.open,
      handleClose: this.handleClose,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 481
      },
      __self: this
    })));
  }

}

CreateVolume.propTypes = {
  createVolume: _propTypes.default.func.isRequired
};

const mapStateToProps = state => {
  return {
    createVolumeButton: state.storageReducer.createVolumeButton
  };
};

const mapDispatchToProps = dispatch => {
  return {
    toggleCreateVolumeButton: flag => dispatch(actionCreators.toggleCreateVolumeButton(flag)),
    showStorageAlert: alertParams => dispatch(actionCreators.showStorageAlert(alertParams)),
    fetchVolumes: () => dispatch({
      type: actionTypes.SAGA_FETCH_VOLUMES
    })
  };
};

var _default = (0, _core.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(CreateVolume));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,