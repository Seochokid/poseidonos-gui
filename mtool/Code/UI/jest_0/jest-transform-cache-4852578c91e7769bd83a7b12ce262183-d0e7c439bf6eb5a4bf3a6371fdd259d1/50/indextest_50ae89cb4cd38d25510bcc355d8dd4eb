7dd9b0ea6ab66fc63a24c75f412027c1
"use strict";

jest.unmock('axios');

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactDom = require("react-dom");

var _testUtils = require("react-dom/test-utils");

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _axios = _interopRequireDefault(require("axios"));

var _reactI18next = require("react-i18next");

var _redux = require("redux");

var _react2 = require("@testing-library/react");

var _alertManagementReducer = _interopRequireDefault(require("../../../store/reducers/alertManagementReducer"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _index = _interopRequireDefault(require("./index"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AlertTable/index.test.js";
let wrapper;
let dropDownValues = null;
let alerts = [{
  "_id": {
    "$oid": "5d5e67b7f082d4c68c98f58b"
  },
  "alertName": "NewAlert",
  "alertCluster": "cpu",
  "alertSubCluster": "device",
  "alertType": "cpu-total",
  "alertCondition": null,
  "alertField": "usage_system",
  "description": "last",
  "alertRange": "109",
  "active": true
}];
beforeEach(() => {
  const rootReducers = (0, _redux.combineReducers)({
    alertManagementReducer: _alertManagementReducer.default
  });
  const store = (0, _redux.createStore)(rootReducers);
  const myMock = jest.fn();
  wrapper = (0, _react2.render)(_react.default.createElement(_reactI18next.I18nextProvider, {
    i18n: _i18n.default,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52
    },
    __self: void 0
  }, _react.default.createElement(_reactRedux.Provider, {
    store: store,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53
    },
    __self: void 0
  }, _react.default.createElement(_index.default, {
    dropdownCondition: dropDownValues,
    alerts: alerts,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54
    },
    __self: void 0
  }))));
  dropDownValues = null;
});
test('renders alert table component with null for ternary operator', () => {
  const _wrapper = wrapper,
        getByLabelText = _wrapper.getByLabelText,
        queryAllByText = _wrapper.queryAllByText,
        getByTestId = _wrapper.getByTestId,
        getByText = _wrapper.getByText,
        getAllByText = _wrapper.getAllByText,
        asFragment = _wrapper.asFragment;
  expect(asFragment()).toMatchSnapshot();
  getByTestId("AlertsTableTag");
  const input = getByTestId("AlertsTableTag").querySelector('button');

  _react2.fireEvent.click(input);

  _react2.fireEvent.change(input, {
    target: {
      value: "Samsung # \n"
    }
  });
});
afterEach(_react2.cleanup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiamVzdCIsInVubW9jayIsIndyYXBwZXIiLCJkcm9wRG93blZhbHVlcyIsImFsZXJ0cyIsImJlZm9yZUVhY2giLCJyb290UmVkdWNlcnMiLCJhbGVydE1hbmFnZW1lbnRSZWR1Y2VyIiwic3RvcmUiLCJteU1vY2siLCJmbiIsImkxOG4iLCJ0ZXN0IiwiZ2V0QnlMYWJlbFRleHQiLCJxdWVyeUFsbEJ5VGV4dCIsImdldEJ5VGVzdElkIiwiZ2V0QnlUZXh0IiwiZ2V0QWxsQnlUZXh0IiwiYXNGcmFnbWVudCIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCIsImlucHV0IiwicXVlcnlTZWxlY3RvciIsImZpcmVFdmVudCIsImNsaWNrIiwiY2hhbmdlIiwidGFyZ2V0IiwidmFsdWUiLCJhZnRlckVhY2giLCJjbGVhbnVwIl0sIm1hcHBpbmdzIjoiOztBQXdDQUEsSUFBSSxDQUFDQyxNQUFMLENBQVksT0FBWjs7OztBQWJBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7QUFHQSxJQUFJQyxPQUFKO0FBQ0EsSUFBSUMsY0FBYyxHQUFHLElBQXJCO0FBQ0EsSUFBSUMsTUFBTSxHQUFHLENBQUM7QUFBRSxTQUFPO0FBQUUsWUFBUTtBQUFWLEdBQVQ7QUFBaUQsZUFBYSxVQUE5RDtBQUEwRSxrQkFBZ0IsS0FBMUY7QUFBaUcscUJBQW1CLFFBQXBIO0FBQThILGVBQWEsV0FBM0k7QUFBd0osb0JBQWtCLElBQTFLO0FBQWdMLGdCQUFjLGNBQTlMO0FBQThNLGlCQUFlLE1BQTdOO0FBQXFPLGdCQUFjLEtBQW5QO0FBQTBQLFlBQVU7QUFBcFEsQ0FBRCxDQUFiO0FBQ0FDLFVBQVUsQ0FBQyxNQUFNO0FBQ2IsUUFBTUMsWUFBWSxHQUFHLDRCQUFnQjtBQUNqQ0MsSUFBQUEsc0JBQXNCLEVBQXRCQTtBQURpQyxHQUFoQixDQUFyQjtBQUdBLFFBQU1DLEtBQUssR0FBRyx3QkFBWUYsWUFBWixDQUFkO0FBQ0EsUUFBTUcsTUFBTSxHQUFHVCxJQUFJLENBQUNVLEVBQUwsRUFBZjtBQUNBUixFQUFBQSxPQUFPLEdBQUcsb0JBQ04sNkJBQUMsNkJBQUQ7QUFBaUIsSUFBQSxJQUFJLEVBQUVTLGFBQXZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ksNkJBQUMsb0JBQUQ7QUFBVSxJQUFBLEtBQUssRUFBRUgsS0FBakI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDSSw2QkFBQyxjQUFEO0FBQVksSUFBQSxpQkFBaUIsRUFBRUwsY0FBL0I7QUFBK0MsSUFBQSxNQUFNLEVBQUVDLE1BQXZEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBREosQ0FESixDQURNLENBQVY7QUFNQUQsRUFBQUEsY0FBYyxHQUFHLElBQWpCO0FBQ0gsQ0FiUyxDQUFWO0FBZ0JBUyxJQUFJLENBQUMsOERBQUQsRUFBaUUsTUFBTTtBQUFBLG1CQUNzQlYsT0FEdEI7QUFBQSxRQUMvRFcsY0FEK0QsWUFDL0RBLGNBRCtEO0FBQUEsUUFDL0NDLGNBRCtDLFlBQy9DQSxjQUQrQztBQUFBLFFBQy9CQyxXQUQrQixZQUMvQkEsV0FEK0I7QUFBQSxRQUNsQkMsU0FEa0IsWUFDbEJBLFNBRGtCO0FBQUEsUUFDUEMsWUFETyxZQUNQQSxZQURPO0FBQUEsUUFDT0MsVUFEUCxZQUNPQSxVQURQO0FBRXZFQyxFQUFBQSxNQUFNLENBQUNELFVBQVUsRUFBWCxDQUFOLENBQXFCRSxlQUFyQjtBQUNBTCxFQUFBQSxXQUFXLENBQUMsZ0JBQUQsQ0FBWDtBQUVBLFFBQU1NLEtBQUssR0FBR04sV0FBVyxDQUFDLGdCQUFELENBQVgsQ0FBOEJPLGFBQTlCLENBQTRDLFFBQTVDLENBQWQ7O0FBQ0FDLG9CQUFVQyxLQUFWLENBQWdCSCxLQUFoQjs7QUFDQUUsb0JBQVVFLE1BQVYsQ0FBaUJKLEtBQWpCLEVBQXdCO0FBQUVLLElBQUFBLE1BQU0sRUFBRTtBQUFFQyxNQUFBQSxLQUFLLEVBQUU7QUFBVDtBQUFWLEdBQXhCO0FBQ0gsQ0FSRyxDQUFKO0FBVUFDLFNBQVMsQ0FBQ0MsZUFBRCxDQUFUIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICBDT1BZUklHSFQgKGMpIDIwMTkgU0FNU1VORyBFTEVDVFJPTklDUyBDTy4sIExURC4gICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgQUxMIFJJR0hUUyBSRVNFUlZFRCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkIHRvIGxpY2Vuc2VlcyBvZiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiAgICAgICAgL1xuLyAgIHByb2R1Y3RzIHRvIHVzZSBvciBhYnN0cmFjdCB0aGlzIGNvbXB1dGVyIHByb2dyYW0gZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgICAgICAgICAvXG4vICAgaW1wbGVtZW50aW5nIGEgcHJvZHVjdCBiYXNlZCBvbiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBwcm9kdWN0cy4gICAgICAgICAgIC9cbi8gICBObyBvdGhlciByaWdodHMgdG8gcmVwcm9kdWNlLCB1c2UsIG9yIGRpc3NlbWluYXRlIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgICAgICAgICAgL1xuLyAgIHdoZXRoZXIgaW4gcGFydCBvciBpbiB3aG9sZSwgYXJlIGdyYW50ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIFxuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gbWFrZXMgbm8gcmVwcmVzZW50YXRpb24gb3Igd2FycmFudGllcyB3aXRoICAgICAgICAgIC9cbi8gICByZXNwZWN0IHRvIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIGNvbXB1dGVyIHByb2dyYW0sIGFuZCBzcGVjaWZpY2FsbHkgZGlzY2xhaW1zICAgL1xuLyAgIGFueSByZXNwb25zaWJpbGl0eSBmb3IgYW55IGRhbWFnZXMsIHNwZWNpYWwgb3IgY29uc2VxdWVudGlhbCwgY29ubmVjdGVkICAgICAgICAgICAvXG4vICAgd2l0aCB0aGUgdXNlIG9mIHRoaXMgcHJvZ3JhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG5cblxuREVTQ1JJUFRJT046IEFsZXJ0IFRhYmxlIFRlc3QgRmlsZVxuQE5BTUUgOiBpbmRleC50ZXN0LmpzXG5AQVVUSE9SUzogSmF5IEhpdGVzaCBTYW5naGF2aSBcbkBWZXJzaW9uIDogMS4wICpcbkBSRVZJU0lPTiBISVNUT1JZXG5bMDMvMDYvMjAxOV0gW0pheV0gOiBQcm90b3R5cGluZy4uLi4uLi4uLi4vLy8vLy8vLy8vLy8vLy8vLy8vL1xuKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBSZWFjdERPTSwgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgeyBhY3QgfSBmcm9tICdyZWFjdC1kb20vdGVzdC11dGlscydcbmltcG9ydCBNb2NrQWRhcHRlciBmcm9tICdheGlvcy1tb2NrLWFkYXB0ZXInXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXG5pbXBvcnQgeyBJMThuZXh0UHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtaTE4bmV4dFwiO1xuaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzLCBjcmVhdGVTdG9yZSB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIGNsZWFudXAsIGdldEJ5VGV4dCwgZ2V0QnlUaXRsZSwgZ2V0QWxsQnlUaXRsZSwgd2FpdEZvckVsZW1lbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCBhbGVydE1hbmFnZW1lbnRSZWR1Y2VyIGZyb20gXCIuLi8uLi8uLi9zdG9yZS9yZWR1Y2Vycy9hbGVydE1hbmFnZW1lbnRSZWR1Y2VyXCJcbmltcG9ydCBpMThuIGZyb20gXCIuLi8uLi8uLi9pMThuXCI7XG5pbXBvcnQgQWxlcnRUYWJsZSBmcm9tICcuL2luZGV4JztcblxuamVzdC51bm1vY2soJ2F4aW9zJyk7XG5sZXQgd3JhcHBlcjtcbmxldCBkcm9wRG93blZhbHVlcyA9IG51bGw7XG5sZXQgYWxlcnRzID0gW3sgXCJfaWRcIjogeyBcIiRvaWRcIjogXCI1ZDVlNjdiN2YwODJkNGM2OGM5OGY1OGJcIiB9LCBcImFsZXJ0TmFtZVwiOiBcIk5ld0FsZXJ0XCIsIFwiYWxlcnRDbHVzdGVyXCI6IFwiY3B1XCIsIFwiYWxlcnRTdWJDbHVzdGVyXCI6IFwiZGV2aWNlXCIsIFwiYWxlcnRUeXBlXCI6IFwiY3B1LXRvdGFsXCIsIFwiYWxlcnRDb25kaXRpb25cIjogbnVsbCwgXCJhbGVydEZpZWxkXCI6IFwidXNhZ2Vfc3lzdGVtXCIsIFwiZGVzY3JpcHRpb25cIjogXCJsYXN0XCIsIFwiYWxlcnRSYW5nZVwiOiBcIjEwOVwiLCBcImFjdGl2ZVwiOiB0cnVlIH0sXVxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgY29uc3Qgcm9vdFJlZHVjZXJzID0gY29tYmluZVJlZHVjZXJzKHtcbiAgICAgICAgYWxlcnRNYW5hZ2VtZW50UmVkdWNlcixcbiAgICB9KTtcbiAgICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VycylcbiAgICBjb25zdCBteU1vY2sgPSBqZXN0LmZuKCk7XG4gICAgd3JhcHBlciA9IHJlbmRlcihcbiAgICAgICAgPEkxOG5leHRQcm92aWRlciBpMThuPXtpMThufT5cbiAgICAgICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICAgICAgICAgIDxBbGVydFRhYmxlIGRyb3Bkb3duQ29uZGl0aW9uPXtkcm9wRG93blZhbHVlc30gYWxlcnRzPXthbGVydHN9IC8+XG4gICAgICAgICAgICA8L1Byb3ZpZGVyPlxuICAgICAgICA8L0kxOG5leHRQcm92aWRlcj4pO1xuICAgIGRyb3BEb3duVmFsdWVzID0gbnVsbDtcbn0pO1xuXG4gIFxudGVzdCgncmVuZGVycyBhbGVydCB0YWJsZSBjb21wb25lbnQgd2l0aCBudWxsIGZvciB0ZXJuYXJ5IG9wZXJhdG9yJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgZ2V0QnlMYWJlbFRleHQsIHF1ZXJ5QWxsQnlUZXh0LCBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0LCBnZXRBbGxCeVRleHQsIGFzRnJhZ21lbnQgfSA9IHdyYXBwZXI7XG4gICAgZXhwZWN0KGFzRnJhZ21lbnQoKSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgZ2V0QnlUZXN0SWQoXCJBbGVydHNUYWJsZVRhZ1wiKTtcblxuICAgIGNvbnN0IGlucHV0ID0gZ2V0QnlUZXN0SWQoXCJBbGVydHNUYWJsZVRhZ1wiKS5xdWVyeVNlbGVjdG9yKCdidXR0b24nKVxuICAgIGZpcmVFdmVudC5jbGljayhpbnB1dCk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZShpbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiU2Ftc3VuZyAjIFxcblwiIH0gfSk7XG59KTtcblxuYWZ0ZXJFYWNoKGNsZWFudXApXG4iXX0=