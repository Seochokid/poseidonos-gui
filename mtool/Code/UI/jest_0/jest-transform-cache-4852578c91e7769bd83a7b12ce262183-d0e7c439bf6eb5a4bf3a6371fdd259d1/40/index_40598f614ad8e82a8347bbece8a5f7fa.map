{"version":3,"sources":["index.js"],"names":["styles","alertTypesOuterGrid","border","maxWidth","overflowY","overflowX","minHeight","maxHeight","background","alertTypesInnerGrid","alertTypesHeader","backgroundColor","color","paddingLeft","paddingTop","fontSize","height","AlertTypes","props","classes","alertClusterList","map","cluster","i","_id","name","selectAlertCluster","alertSubCluster","subcluster","j","selectAlertSubCluster","root","alertTypes","type","selected","alertTypeSelected"],"mappings":"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\n\nDESCRIPTION: Alert Management Component for selecting Alert Types\n@NAME : index.js\n@AUTHORS: Jay Hitesh Sanghavi \n@Version : 1.0 *\n@REVISION HISTORY\n[03/06/2019] [Jay] : Prototyping..........////////////////////\n*/\nimport React from 'react';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { FormControlLabel, Checkbox, FormGroup, Grid, Typography, withStyles } from '@material-ui/core';\nimport './AlertTypes.css';\n\nconst styles = (() => {\n  return ({\n    alertTypesOuterGrid: {\n      border: '1px solid gray',\n      maxWidth: '100%',\n      overflowY: 'auto',\n      overflowX: 'hidden',\n      minHeight: '130px',\n      maxHeight: '130px',\n      background: '#fff'\n    },\n    alertTypesInnerGrid: {\n      maxWidth: '100%',\n    },\n    alertTypesHeader: {\n      backgroundColor: '#788595',\n      color: 'white',\n      paddingLeft: '5px',\n      paddingTop: '3px',\n      fontSize: '14px',\n      height: '25px',\n    }\n  })\n});\nconst AlertTypes = props => {\n  const { classes } = props;\n  return (\n    <Grid sm={6} xs={12} data-testid=\"AlertsTypesTag\" item container>\n      <Grid xs={12} item className={classes.alertTypesOuterGrid}>\n        <Typography className={classes.alertTypesHeader} variant=\"h6\">Alert Types</Typography>\n        <Grid sm={6} xs={12} item className={classes.alertTypesInnerGrid}>\n          {props.alertClusterList\n            ? props.alertClusterList.map((cluster, i) => {\n              return (\n                <TreeView\n                  key={cluster._id}\n                  defaultCollapseIcon={<ExpandMoreIcon />}\n                  defaultExpandIcon={<ChevronRightIcon />}\n                  data-testid=\"ClusterTag\"\n                >\n                  <TreeItem nodeId={cluster.name} label={cluster.name}\n                    role=\"treeitem\"\n                    onClick={() => {\n                      props.selectAlertCluster(cluster, i)\n                    }\n                    }\n                  >\n                    {cluster.alertSubCluster\n                      ? cluster.alertSubCluster.map((subcluster, j) => {\n                        return (\n                          <TreeItem key={subcluster.name} nodeId={subcluster.name} label={subcluster.name} role=\"subtreeitem\" onClick={() => {\n                            props.selectAlertSubCluster(cluster.name, subcluster, i);\n                          }}\n                          >\n                            <FormGroup row={false} root={classes.root}>\n                              {subcluster.alertTypes.map(type => {\n                                return (\n                                  <FormControlLabel\n                                    key={type.type}\n                                    control={<Checkbox checked={!(!type.selected)} onChange={() => props.alertTypeSelected(type, i, j)} />}\n                                    label={type.type}\n                                    data-testid = \"alertTypesCheckbox\" \n                                    role=\"formControl\"\n                                    labelPlacement=\"end\"\n                                  />\n\n                                );\n\n                              })}\n                            </FormGroup>\n                          </TreeItem>\n                        );\n                      }) : null}\n                  </TreeItem>\n                </TreeView>\n              );\n            })\n            : null}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(AlertTypes);\n"]}