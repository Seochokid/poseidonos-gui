227968ebe7c1424e390d83b3a4f87ade
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _TreeView = _interopRequireDefault(require("@material-ui/lab/TreeView"));

var _ExpandMore = _interopRequireDefault(require("@material-ui/icons/ExpandMore"));

var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var _TreeItem = _interopRequireDefault(require("@material-ui/lab/TreeItem"));

var _core = require("@material-ui/core");

require("./AlertTypes.css");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AlertTypes/index.js";

const styles = () => {
  return {
    alertTypesOuterGrid: {
      border: '1px solid gray',
      maxWidth: '100%',
      overflowY: 'auto',
      overflowX: 'hidden',
      minHeight: '130px',
      maxHeight: '130px',
      background: '#fff'
    },
    alertTypesInnerGrid: {
      maxWidth: '100%'
    },
    alertTypesHeader: {
      backgroundColor: '#788595',
      color: 'white',
      paddingLeft: '5px',
      paddingTop: '3px',
      fontSize: '14px',
      height: '25px'
    }
  };
};

const AlertTypes = props => {
  const classes = props.classes;
  return _react.default.createElement(_core.Grid, {
    sm: 6,
    xs: 12,
    "data-testid": "AlertsTypesTag",
    item: true,
    container: true,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 62
    },
    __self: void 0
  }, _react.default.createElement(_core.Grid, {
    xs: 12,
    item: true,
    className: classes.alertTypesOuterGrid,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 63
    },
    __self: void 0
  }, _react.default.createElement(_core.Typography, {
    className: classes.alertTypesHeader,
    variant: "h6",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 64
    },
    __self: void 0
  }, "Alert Types"), _react.default.createElement(_core.Grid, {
    sm: 6,
    xs: 12,
    item: true,
    className: classes.alertTypesInnerGrid,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 65
    },
    __self: void 0
  }, props.alertClusterList ? props.alertClusterList.map((cluster, i) => {
    return _react.default.createElement(_TreeView.default, {
      key: cluster._id,
      defaultCollapseIcon: _react.default.createElement(_ExpandMore.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        },
        __self: void 0
      }),
      defaultExpandIcon: _react.default.createElement(_ChevronRight.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 72
        },
        __self: void 0
      }),
      "data-testid": "ClusterTag",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 69
      },
      __self: void 0
    }, _react.default.createElement(_TreeItem.default, {
      nodeId: cluster.name,
      label: cluster.name,
      role: "treeitem",
      onClick: () => {
        props.selectAlertCluster(cluster, i);
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 75
      },
      __self: void 0
    }, cluster.alertSubCluster ? cluster.alertSubCluster.map((subcluster, j) => {
      return _react.default.createElement(_TreeItem.default, {
        key: subcluster.name,
        nodeId: subcluster.name,
        label: subcluster.name,
        role: "subtreeitem",
        onClick: () => {
          props.selectAlertSubCluster(cluster.name, subcluster, i);
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        },
        __self: void 0
      }, _react.default.createElement(_core.FormGroup, {
        row: false,
        root: classes.root,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        },
        __self: void 0
      }, subcluster.alertTypes.map(type => {
        return _react.default.createElement(_core.FormControlLabel, {
          key: type.type,
          control: _react.default.createElement(_core.Checkbox, {
            checked: !!type.selected,
            onChange: () => props.alertTypeSelected(type, i, j),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 94
            },
            __self: void 0
          }),
          label: type.type,
          "data-testid": "alertTypesCheckbox",
          role: "formControl",
          labelPlacement: "end",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 92
          },
          __self: void 0
        });
      })));
    }) : null));
  }) : null)));
};

var _default = (0, _core.withStyles)(styles)(AlertTypes);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,