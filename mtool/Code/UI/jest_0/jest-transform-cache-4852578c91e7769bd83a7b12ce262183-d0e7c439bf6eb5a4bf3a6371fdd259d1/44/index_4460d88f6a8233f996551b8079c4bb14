6c3ed1afc4951d1517c0f3eda007e59e
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _styles = require("@material-ui/core/styles");

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _Switch = _interopRequireDefault(require("@material-ui/core/Switch"));

var _Tooltip = _interopRequireDefault(require("@material-ui/core/Tooltip"));

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/OverviewComponents/PowerInformation/index.js";

const styles = theme => ({
  root: {
    flexGrow: 1
  },
  overviewPaper: {
    width: "100%"
  },
  textField: {
    color: "black",
    marginLeft: theme.spacing(1),
    marginRight: theme.spacing(1),
    width: 230
  },
  powerParentGrid: {
    marginTop: theme.spacing(0.5)
  },
  powerOuterGrid: {
    // border: "1px solid gray",
    maxWidth: "100%",
    flexBasis: "100%",
    overflowY: "auto",
    overflowX: "hidden",
    minHeight: "130px",
    // maxHeight: "130px",
    background: "#fff"
  },
  powerInnerGrid: {
    maxWidth: "100%",
    marginTop: theme.spacing(1)
  },
  powerHeader: {
    backgroundColor: "#788595",
    color: "white",
    paddingLeft: "5px",
    fontSize: "14px",
    height: "24px"
  },
  label: {
    marginLeft: theme.spacing(1),
    marginTop: theme.spacing(3)
  },
  submit: {
    height: "1.75rem",
    fontSize: "12px",
    textTransform: "none",
    marginTop: "18px",
    marginRight: "15px",
    // minWidth: '0px',
    maxWidth: "110px"
  }
});

class PowerInformation extends _react.Component {
  constructor(props) {
    super(props);
  }

  componentDidMount() {
    this.props.fetchPowerInfo();
    this.interval = setInterval(() => {
      this.props.fetchPowerInfo("doNotStartLoader");
    }, 300000);
  }

  componentWillUnmount() {
    clearInterval(this.interval);
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_Grid.default, {
      item: true,
      container: true,
      spacing: 2,
      className: classes.powerParentGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 111
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      sm: 6,
      xs: 12,
      item: true,
      container: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 112
      },
      __self: this
    }, _react.default.createElement(_Paper.default, {
      xs: 12,
      item: true,
      className: classes.powerOuterGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113
      },
      __self: this
    }, _react.default.createElement(_Typography.default, {
      className: classes.powerHeader,
      variant: "h6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 114
      },
      __self: this
    }, "Power Options"), _react.default.createElement(_Grid.default, {
      sm: 6,
      xs: 12,
      item: true,
      className: classes.powerInnerGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 117
      },
      __self: this
    }, _react.default.createElement(_TextField.default, {
      className: classes.textField,
      id: "standard-required",
      margin: "none",
      value: this.props.powerconsumption === 0 ? "Error" : this.props.powerconsumption,
      label: "Power Consumption (Watts)",
      disabled: true,
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 118
      },
      __self: this
    }), _react.default.createElement(_TextField.default, {
      className: classes.textField,
      id: "standard-required",
      margin: "none",
      value: this.props.powercap,
      disabled: true,
      label: "Power CAP",
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 132
      },
      __self: this
    }), _react.default.createElement(_TextField.default, {
      className: classes.textField,
      id: "standard-required",
      margin: "none",
      disabled: true,
      value: this.props.powerstatus,
      label: " CPU Power Status",
      InputProps: {
        readOnly: true,
        classes: {
          input: classes.textField
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 146
      },
      __self: this
    }), _react.default.createElement("div", {
      style: {
        paddingBottom: "10px"
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 160
      },
      __self: this
    }, _react.default.createElement(_Tooltip.default, {
      title: "Power On Poseidon Box",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 161
      },
      __self: this
    }, _react.default.createElement(_Button.default, {
      "data-testid": "PowerOnButton",
      variant: "contained",
      color: "primary",
      type: "submit",
      style: {
        marginLeft: "20px"
      },
      className: classes.submit,
      onClick: () => {
        this.props.openAlert("Power On Poseidon Box");
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 162
      },
      __self: this
    }, "On")), _react.default.createElement(_Tooltip.default, {
      title: "Power Off Poseidon Box",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 176
      },
      __self: this
    }, _react.default.createElement(_Button.default, {
      "data-testid": "PowerOffButton",
      variant: "contained",
      color: "primary",
      type: "submit",
      className: classes.submit,
      onClick: () => {
        this.props.openAlert("Power Off Poseidon Box");
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 177
      },
      __self: this
    }, "Off")), _react.default.createElement(_Tooltip.default, {
      title: "Force Power Off Poseidon Box",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 190
      },
      __self: this
    }, _react.default.createElement(_Button.default, {
      "data-testid": "ForcePowerOffButton",
      variant: "contained",
      color: "primary",
      type: "submit",
      className: classes.submit,
      onClick: () => {
        this.props.openAlert("Force Power Off Poseidon Box");
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 191
      },
      __self: this
    }, "Force Off")), _react.default.createElement(_Tooltip.default, {
      title: "Restart Poseidon Box",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 204
      },
      __self: this
    }, _react.default.createElement(_Button.default, {
      "data-testid": "ForceRestartButton",
      variant: "contained",
      color: "primary",
      type: "submit",
      className: classes.submit,
      onClick: () => {
        this.props.openAlert("Force Restart Poseidon Box");
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 205
      },
      __self: this
    }, "Restart")))))), _react.default.createElement(_Grid.default, {
      sm: 6,
      xs: 12,
      item: true,
      container: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 223
      },
      __self: this
    }, _react.default.createElement(_Paper.default, {
      xs: 12,
      item: true,
      className: classes.powerOuterGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 224
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      sm: 6,
      xs: 12,
      item: true,
      className: classes.powerInnerGrid,
      style: {
        textAlign: "center",
        marginTop: "60px"
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 225
      },
      __self: this
    }, _react.default.createElement("label", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 232
      },
      __self: this
    }, "Turn On Server LED"), _react.default.createElement(_Switch.default, {
      size: "small",
      checked: true,
      color: "primary" // onClick={() => console.log("here")}
      ,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 233
      },
      __self: this
    })))));
  }

}

const mapStateToProps = state => {
  return {
    powerconsumption: state.hardwareOverviewReducer.powerconsumption,
    powercap: state.hardwareOverviewReducer.powercap,
    powerstatus: state.hardwareOverviewReducer.powerstatus
  };
};

const mapDispatchToProps = dispatch => {
  return {
    fetchPowerInfo: param => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_POWER_INFORMATION,
      param
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PowerInformation));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,