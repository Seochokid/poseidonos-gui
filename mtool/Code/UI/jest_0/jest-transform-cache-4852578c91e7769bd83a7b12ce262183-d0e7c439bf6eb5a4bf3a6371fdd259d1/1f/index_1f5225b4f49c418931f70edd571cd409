92ecaeba8f979ab88b8f2f61bfbc51db
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _styles = require("@material-ui/core/styles");

var _materialTable = _interopRequireWildcard(require("material-table"));

var _core = require("@material-ui/core");

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _SaveAlt = _interopRequireDefault(require("@material-ui/icons/SaveAlt"));

var _ChevronLeft = _interopRequireDefault(require("@material-ui/icons/ChevronLeft"));

var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var _FirstPage = _interopRequireDefault(require("@material-ui/icons/FirstPage"));

var _LastPage = _interopRequireDefault(require("@material-ui/icons/LastPage"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _FilterList = _interopRequireDefault(require("@material-ui/icons/FilterList"));

var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));

var _Edit = _interopRequireDefault(require("@material-ui/icons/Edit"));

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _ArrowUpward = _interopRequireDefault(require("@material-ui/icons/ArrowUpward"));

var _Clear = _interopRequireDefault(require("@material-ui/icons/Clear"));

var _Ok14x = _interopRequireDefault(require("../../../assets/images/Ok14x14.png"));

var _NotOk14x = _interopRequireDefault(require("../../../assets/images/Not-Ok14x14.png"));

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../../../store/actions/exportActionCreators"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/PowerManagementComponents/PowerStateTable/index.js";

const styles = theme => ({
  multilineColor: {
    color: 'black'
  },
  root: {
    flexGrow: 1
  },
  Paper: {
    marginTop: theme.spacing(2),
    marginBottom: theme.spacing(2),
    width: '100%',
    maxHeight: '100%'
  },
  powerParentGrid: {
    maxWidth: '100%',
    flexBasis: '100%',
    minHeight: '100%',
    marginTop: theme.spacing(2)
  },
  powerOuterGrid: {
    border: '1px solid gray',
    maxWidth: '100%',
    flexBasis: '100%',
    overflowY: 'auto',
    overflowX: 'hidden',
    background: '#fff'
  },
  summaryOuterGrid: {
    border: '1px solid gray',
    maxWidth: '100%',
    minHeight: '140px',
    maxHeight: '150px',
    overflowY: 'auto',
    overflowX: 'hidden',
    justifyContent: 'left',
    background: '#fff'
  },
  summaryInfoHeader: {
    textAlign: 'left',
    color: 'rgba(255, 255, 255, 0.87)',
    fontSize: '14px',
    borderRadius: '0px',
    width: '100%',
    marginLeft: '10px',
    lineHeight: '2'
  },
  summaryCard: {
    backgroundColor: '#788595',
    justifyContent: 'center',
    maxWidth: '100%',
    maxHeight: '30px',
    flexBasis: '100%'
  },
  ToggleCard: {
    margin: theme.spacing(2),
    maxWidth: '100%',
    flexBasis: '100%'
  },
  textField: {
    color: "black",
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2),
    width: 300
  },
  radioGroup: {
    display: 'flex',
    flexDirection: 'row',
    textAlign: 'center',
    marginTop: theme.spacing(1)
  }
});

class PowerStateTable extends _react.Component {
  constructor(props) {
    super(props);
    this.theme = (0, _core.createMuiTheme)({
      overrides: {
        MuiSvgIcon: {
          //  stylesheet name
          root: {
            //  rule name
            color: '#808080'
          }
        },
        MuiTablePagination: {
          menuItem: {
            fontSize: "12px",
            minHeight: "0px"
          },
          select: {
            width: "45px"
          },
          toolbar: {
            maxHeight: '50px',
            minHeight: '20px'
          }
        }
      },
      palette: {
        primary: {
          main: '#4caf50'
        },
        secondary: {
          main: '#808080'
        }
      }
    });
    this.interval = null;
    this.state = {
      columns: [{
        title: 'Drive Name',
        field: 'driveName',
        editable: 'never',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("p", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 181
          },
          __self: this
        }, `nvme${rowData.tableData.id}`)
      }, {
        title: 'Drive Status',
        field: 'Status.Health',
        editable: 'never',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        },
        render: rowData => _react.default.createElement("img", {
          src: rowData.Status && rowData.Status.Health === 'OK' ? _Ok14x.default : _NotOk14x.default,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 194
          },
          __self: this
        })
      }, {
        title: 'Min Power State Value',
        field: 'MinPowerState',
        editable: 'never',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        }
      }, {
        title: 'Max Power State Value',
        field: 'MaxPowerState',
        editable: 'never',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        }
      }, {
        title: 'Current Power State',
        field: 'PowerState',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        }
      }]
    };
  }

  componentDidMount() {
    this.props.fetchChassisFrontInfo();
    this.interval = setInterval(() => {
      this.props.fetchChassisFrontInfo();
    }, 5000);
  }

  componentWillUnmount() {
    clearInterval(this.interval);
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_core.Paper, {
      className: classes.Paper,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 241
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      sm: 6,
      xs: 12,
      item: true,
      container: true,
      className: classes.powerParentGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 242
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      xs: 12,
      item: true,
      className: classes.powerOuterGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 243
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      className: classes.summaryCard,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 244
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      className: classes.summaryInfoHeader,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 245
      },
      __self: this
    }, "Power Mode")), _react.default.createElement(_Grid.default, {
      className: classes.ToggleCard,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 249
      },
      __self: this
    }, _react.default.createElement("label", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 250
      },
      __self: this
    }, "Select Power Mode: "), _react.default.createElement(_core.RadioGroup, {
      className: classes.radioGroup,
      name: "powermode" // value = {this.props.powermode}
      ,
      onChange: event => {
        this.props.handleChange(event);
      } // onChange={(event) => { this.props.setCurrentPowerMode({"newpowermode":event.target.value}); }}
      ,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 251
      },
      __self: this
    }, _react.default.createElement(_core.FormControlLabel, {
      value: "Manual",
      checked: this.props.powermode === "Manual",
      control: _react.default.createElement(_core.Radio, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 261
        },
        __self: this
      }),
      label: "Manual",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 258
      },
      __self: this
    }), _react.default.createElement(_core.FormControlLabel, {
      value: "Power Efficient",
      checked: this.props.powermode === "Power Efficient",
      control: _react.default.createElement(_core.Radio, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 267
        },
        __self: this
      }),
      label: "Power Efficient",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 264
      },
      __self: this
    }), _react.default.createElement(_core.FormControlLabel, {
      value: "Performance",
      checked: this.props.powermode === "Performance",
      control: _react.default.createElement(_core.Radio, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 274
        },
        __self: this
      }),
      label: "Performance",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 271
      },
      __self: this
    }))))), this.props.powermode === "Manual" ? _react.default.createElement(_Grid.default, {
      sm: 6,
      xs: 12,
      item: true,
      container: true,
      className: classes.powerParentGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 283
      },
      __self: this
    }, _react.default.createElement(_Grid.default, {
      xs: 12,
      item: true,
      className: classes.powerOuterGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 284
      },
      __self: this
    }, _react.default.createElement(_MuiThemeProvider.default, {
      theme: this.theme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 286
      },
      __self: this
    }, _react.default.createElement(_materialTable.default, {
      icons: {
        Check: _Check.default,
        FirstPage: _FirstPage.default,
        LastPage: _LastPage.default,
        NextPage: _ChevronRight.default,
        PreviousPage: _ChevronLeft.default,
        Search: _Search.default,
        ThirdStateCheck: _Remove.default,
        DetailPanel: _ChevronRight.default,
        Export: _SaveAlt.default,
        Filter: _FilterList.default,
        Add: _Add.default,
        Edit: _Edit.default,
        Delete: _Delete.default,
        SortArrow: _ArrowUpward.default,
        Clear: _Clear.default
      },
      components: {
        EditField: props => {
          clearInterval(this.interval);

          if (props.columnDef.required && props.value.length === 0) {
            return _react.default.createElement(_materialTable.MTableEditField, Object.assign({}, props, {
              error: true,
              label: "Required",
              __source: {
                fileName: _jsxFileName,
                lineNumber: 309
              },
              __self: this
            }));
          }

          return _react.default.createElement(_materialTable.MTableEditField, Object.assign({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 311
            },
            __self: this
          }));
        }
      },
      editable: {
        onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {
          clearInterval(this.interval);
          clearInterval(this.interval);

          if (newData.PowerState < oldData.MinPowerState || newData.PowerState > oldData.MaxPowerState) {
            this.props.openAlertBox({
              alertOpen: true,
              istypealert: true,
              alerttype: 'alert',
              alerttitle: 'Change Power State',
              alertdescription: 'Power State Value is out of range'
            });
            this.interval = setInterval(() => {
              this.props.fetchChassisFrontInfo();
            }, 5000);
          } else if (newData.PowerState === oldData.PowerState) {
            this.props.openAlertBox({
              alertOpen: true,
              istypealert: true,
              alerttype: 'info',
              alerttitle: 'Change Power State',
              alertdescription: `Already in Power State ${oldData.PowerState}`
            });
          } else if (newData.PowerState >= oldData.MinPowerState && newData.PowerState <= oldData.MaxPowerState) {
            this.props.changeCurrentPowerState(newData);
            const interval_alert = setInterval(() => {
              if (this.props.alertStatus == true) {
                clearInterval(interval_alert);
              }
            }, 1000);
          }

          this.interval = setInterval(() => {
            this.props.fetchChassisFrontInfo();
          }, 5000);
          resolve();
        })
      },
      columns: this.state.columns,
      data: this.props.chassis_front_list,
      options: {
        actionsColumnIndex: -1,
        selection: false,
        sorting: true,
        toolbar: false,
        rowStyle: {
          fontSize: '4px'
        },
        search: false,
        paginationType: 'normal',
        loadingType: 'linear',
        maxBodyHeight: '260px',
        headerStyle: {
          backgroundColor: '#788595',
          color: 'rgba(255, 255, 255, 0.87)',
          fontSize: '14px',
          height: '10%',
          paddingTop: '2px',
          paddingBottom: '2px'
        }
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 287
      },
      __self: this
    })))) : null);
  }

}

const mapStateToProps = state => {
  return {
    chassis_front_list: state.hardwareOverviewReducer.chassis_front_list,
    currentpowermode: state.hardwarePowerManagementReducer.currentpowermode,
    alertStatus: state.alertManagementReducer.alertOpen
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setCurrentPowerMode: param => dispatch({
      type: actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_SET_CURRENT_POWER_MODE,
      param
    }),
    changeCurrentPowerState: param => dispatch({
      type: actionTypes.SAGA_HARDWARE_POWER_MANAGEMENT_CHANGE_CURRENT_POWER_STATE,
      param
    }),
    openAlertBox: alertParam => dispatch(actionCreators.openAlertBox(alertParam)),
    fetchChassisFrontInfo: param => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_CHASSIS_FRONT_INFORMATION,
      param
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PowerStateTable));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,