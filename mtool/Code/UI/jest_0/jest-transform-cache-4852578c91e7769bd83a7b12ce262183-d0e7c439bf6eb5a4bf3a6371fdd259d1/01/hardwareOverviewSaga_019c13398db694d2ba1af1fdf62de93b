9568ab20277406e605a5bb7bb69ccac9
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchChassisFrontInfo = fetchChassisFrontInfo;
exports.fetchChassisRearInfo = fetchChassisRearInfo;
exports.fetchServerInfo = fetchServerInfo;
exports.fetchPowerInfo = fetchPowerInfo;
exports.rebootSystem = rebootSystem;
exports.shutdownSystem = shutdownSystem;
exports.powerOnSystem = powerOnSystem;
exports.forceShutdownSystem = forceShutdownSystem;
exports.hardwareOverviewWatcher = hardwareOverviewWatcher;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function* fetchChassisFrontInfo(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_chassis_front_info/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchChassisFrontInfo(result.front_info));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Hardware',
      alertdescription: 'Unable to retrieve data'
    }));
    yield (0, _effects.put)(actionCreators.fetchChassisFrontInfo([]));
  } finally {
    ;
  }
}

function* fetchChassisRearInfo() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_chassis_rear_info/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      const chassisList = [];
      result.forEach(chassis => {
        chassisList.push(_objectSpread({}, chassis));
      });
      yield (0, _effects.put)(actionCreators.fetchChassisRearInfo(chassisList));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.fetchChassisRearInfo([]));
  }
}

function* fetchServerInfo() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_server_info/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchServerInfo(result));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.fetchServerInfo({
      model: '',
      manufacturer: '',
      mac: '',
      ip: '',
      firmwareversion: '',
      serialno: '',
      host: ''
    }));
  }
}

function* fetchPowerInfo(action) {
  try {
    // if(action.param == null || action.param != "doNotStartLoader")
    //     yield put(actionCreators.startLoader('Fetching BMC Information'));
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_power_info/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    yield (0, _effects.put)(actionCreators.stopLoader());
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchPowerInfo(result));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.stopLoader());
    yield (0, _effects.put)(actionCreators.fetchPowerInfo({
      powerconsumption: '',
      powercap: '',
      powerstatus: 'Off'
    }));
  }
}

function* rebootSystem(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/reboot_system/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield (0, _effects.put)(actionCreators.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        alerttitle: 'Reboot System',
        alertdescription: 'System Reboot Successful'
      }));
    } else if (response === 400) yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Reboot System',
      alertdescription: 'System Reboot Failed'
    }));else yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Reboot System',
      alertdescription: 'System Reboot Failed'
    }));

    yield (0, _effects.put)(actionCreators.fetchChassisFrontInfo([]));
    yield (0, _effects.put)(actionCreators.fetchPowerInfo({
      powerconsumption: '',
      powercap: '',
      powerstatus: 'Off'
    }));
    yield (0, _effects.put)(actionCreators.fetchServerInfo({
      model: '',
      manufacturer: '',
      mac: '',
      ip: '',
      firmwareversion: '',
      serialno: '',
      host: ''
    }));
  } catch (error) {
    yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Reboot System',
      alertdescription: 'System Reboot Failed'
    }));
  }
}

function* shutdownSystem(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/shutdown_system/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield (0, _effects.put)(actionCreators.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        alerttitle: 'Shutdown System',
        alertdescription: 'System Shutdown Successful'
      }));
    } else if (response === 400) yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Shutdown System',
      alertdescription: 'System Shutdown Failed'
    }));else yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Shutdown System',
      alertdescription: 'System Shutdown Failed'
    }));
  } catch (error) {
    yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Shutdown System',
      alertdescription: 'System Shutdown Failed'
    }));
  }
}

function* powerOnSystem(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/power_on_system/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield (0, _effects.put)(actionCreators.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        alerttitle: 'Power On System',
        alertdescription: 'Power On Successful'
      }));
    } else if (response === 400) yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Power On System',
      alertdescription: 'Power On Failed'
    }));else yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Power On System',
      alertdescription: 'Power On Failed'
    }));
  } catch (error) {
    yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Power On System',
      alertdescription: 'Power On Failed'
    }));
    ;
  }
}

function* forceShutdownSystem(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/force_shutdown_system/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield (0, _effects.put)(actionCreators.openAlertBox({
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        alerttitle: 'Shutdown System',
        alertdescription: 'System Shutdown Successful'
      }));
    } else if (response === 400) yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Shutdown System',
      alertdescription: 'System Shutdown Failed'
    }));else yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Shutdown System',
      alertdescription: 'System Shutdown Failed'
    }));
  } catch (error) {
    yield (0, _effects.put)(actionCreators.openAlertBox({
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Shutdown System',
      alertdescription: 'System Shutdown Failed'
    }));
  }
}

function* hardwareOverviewWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_SERVER_INFORMATION, fetchServerInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_POWER_INFORMATION, fetchPowerInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_CHASSIS_FRONT_INFORMATION, fetchChassisFrontInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_CHASSIS_REAR_INFORMATION, fetchChassisRearInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_OVERVIEW_REBOOT_SYSTEM, rebootSystem);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_OVERVIEW_SHUTDOWN_SYSTEM, shutdownSystem);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_OVERVIEW_FORCE_SHUTDOWN_SYSTEM, forceShutdownSystem);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_OVERVIEW_POWER_ON_SYSTEM, powerOnSystem);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,