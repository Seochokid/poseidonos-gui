0b74d530d498297fa02b98896f75c629
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _core = require("@material-ui/core");

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _UserTable = _interopRequireDefault(require("../../../components/UserTable"));

var _AddNewUser = _interopRequireDefault(require("../../../components/AddNewUser"));

require("./User-Management.css");

var _Dialog = _interopRequireDefault(require("../../../components/Dialog"));

var _theme = _interopRequireWildcard(require("../../../theme"));

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../../../store/actions/exportActionCreators"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/ConfigurationSetting/User-Management/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => ({
  content: {
    flexGrow: 1,
    width: '100%',
    boxSizing: 'border-box',
    padding: theme.spacing(2, 0)
  },
  toolbar: _theme.customTheme.toolbar,
  cardHeader: _theme.customTheme.card.header
});

class UserManagement extends _react.Component {
  constructor(props) {
    super(props);
    this.toggleUserStatus = this.toggleUserStatus.bind(this);
    this.selectUser = this.selectUser.bind(this);
    this.deleteUsers = this.deleteUsers.bind(this);
    this.saveUser = this.saveUser.bind(this);
    this.OnHandleSubmit = this.OnHandleSubmit.bind(this);
    this.onCancel = this.onCancel.bind(this);
    this.OnHandleChange = this.OnHandleChange.bind(this);
    this.openAlert = this.openAlert.bind(this);
    this.handleAlertClose = this.handleAlertClose.bind(this);
    this.triggerCommand = this.triggerCommand.bind(this);
    this.validate = this.validate.bind(this);
    this.state = {
      username: "",
      password: "",
      confirmpassword: "",
      user_role: "Admin",
      mobilenumber: "+82",
      emailid: "",
      phone_number: "+82"
    };
  }

  componentDidMount() {
    this.props.fetchUsersInfo();
  }

  onCancel() {
    this.setState(_objectSpread({}, this.state, {
      username: "",
      password: "",
      confirmpassword: "",
      user_role: "Admin",
      mobilenumber: "+82",
      emailid: "",
      phone_number: "+82"
    }));
  }

  toggleUserStatus(i) {
    const user = {
      userid: this.props.users[i]._id,
      status: !this.props.users[i].active
    };
    this.props.toggleUsersInfo(user);
  }

  selectUser(event, i) {
    const users = [...this.props.users];
    users[i].selected = event.target.checked;
    this.setState(_objectSpread({}, this.state, {
      users
    }));
  }

  saveUser(user, i) {
    const newUser = _objectSpread({}, user, {
      oldid: this.props.users[i]._id
    });

    this.props.updateUsersInfo(newUser);
  }

  deleteUsers() {
    const ids = [];
    const currentUser = localStorage.getItem('userid');
    this.props.users.forEach(user => {
      if (user.selected && user._id !== currentUser) {
        ids.push(user._id);
      } else if (user.selected && user._id === currentUser) {
        this.props.openAlertBox({
          istypealert: true,
          alerttype: 'alert',
          alertOpen: true,
          alerttitle: 'Delete User',
          alertdescription: 'Current user cannot be deleted'
        });
      }
    });

    if (ids.length === 0) {
      this.setState({
        istypealert: true,
        alerttype: 'alert',
        alertOpen: true,
        alerttitle: 'Delete User',
        alertdescription: 'Select the users to be deleted'
      });
    }

    const data = {
      ids
    };
    this.props.deleteUsersInfo(data);
  }

  OnHandleChange(event) {
    const _event$target = event.target,
          name = _event$target.name,
          value = _event$target.value;
    this.setState(_objectSpread({}, this.state, {
      [name]: value
    }));
  }

  validate() {
    if (!this.state.username) {
      this.props.openAlertBox({
        alertOpen: true,
        alerttype: 'alert',
        istypealert: true,
        alerttitle: "Add New User",
        alertdescription: "Please Enter a Valid Username"
      });
    } else if (!this.state.password || !this.state.confirmpassword) this.props.openAlertBox({
      alerttitle: "Add New User",
      alertOpen: true,
      alerttype: "alert",
      istypealert: true,
      alertdescription: "Please Enter a Valid Password"
    });else if (this.state.password !== this.state.confirmpassword) this.props.openAlertBox({
      alerttitle: "Add New User",
      alertOpen: true,
      alerttype: "alert",
      istypealert: true,
      alertdescription: "Passwords do not match"
    });else if (!this.state.mobilenumber || this.state.mobilenumber.length < 4) this.props.openAlertBox({
      alerttitle: "Add New User",
      alertOpen: true,
      alerttype: "alert",
      istypealert: true,
      alertdescription: "Please Enter a Valid Mobile Number"
    });else if (!this.state.emailid || !(this.state.emailid.indexOf('@') > -1) || !(this.state.emailid.indexOf('.') > -1)) this.props.openAlertBox({
      alerttitle: "Add New User",
      alertOpen: true,
      alerttype: "alert",
      istypealert: true,
      alertdescription: "Please Enter a Valid Email ID"
    });else {
      this.setState(_objectSpread({}, this.state, {
        error: ""
      }));
      return true;
    }

    return false;
  }

  openAlert(operationType) {
    if (operationType === "Submit") {
      if (!this.validate()) return;
    }

    this.props.openAlertBox({
      alertOpen: true,
      addDeleteSend: operationType,
      alerttype: 'delete',
      istypealert: false,
      alerttitle: `${operationType} User`,
      alertdescription: `Are you sure you want to ${operationType} the user?`
    });
  }

  triggerCommand() {
    if (this.props.addDeleteSend === 'Submit') {
      this.OnHandleSubmit();
      this.handleAlertClose();
    } else if (this.props.addDeleteSend === 'Cancel') {
      this.onCancel();
      this.handleAlertClose();
    }
  }

  handleAlertClose() {
    this.props.openAlertBox({
      alertOpen: false
    });
  }

  OnHandleSubmit() {
    this.props.addNewUserInfo(this.state);
    this.setState({
      username: "",
      password: "",
      confirmpassword: "",
      user_role: "Admin",
      mobilenumber: "+82",
      emailid: ""
    });
  }

  render() {
    const classes = this.props.classes;
    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 229
      },
      __self: this
    }, _react.default.createElement("main", {
      className: classes.content,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 233
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      spacing: 3,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 235
      },
      __self: this
    }, _react.default.createElement(_UserTable.default, {
      selectUser: this.selectUser,
      toggleUserStatus: this.toggleUserStatus,
      saveChange: this.saveUser,
      deleteUsers: this.deleteUsers,
      users: this.props.users,
      phone_number: this.state.phone_number,
      OnHandleChange: this.OnHandleChange,
      openAlertBox: this.props.openAlertBox,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 236
      },
      __self: this
    }), _react.default.createElement(_AddNewUser.default, {
      username: this.state.username,
      password: this.state.password,
      confirmpassword: this.state.confirmpassword,
      mobilenumber: this.state.mobilenumber,
      emailid: this.state.emailid,
      openAlert: this.openAlert,
      onCancel: this.onCancel,
      OnHandleChange: this.OnHandleChange,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 246
      },
      __self: this
    }))), _react.default.createElement(_Dialog.default, {
      title: this.props.alerttitle,
      description: this.props.alertdescription,
      open: this.props.alertOpen,
      type: this.props.alerttype,
      handleClose: this.handleAlertClose,
      onConfirm: this.triggerCommand,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 259
      },
      __self: this
    }));
  }

}

const mapStateToProps = state => {
  return {
    users: state.userManagementReducer.users,
    addDeleteSend: state.alertManagementReducer.addDeleteSend,
    alertOpen: state.alertManagementReducer.alertOpen,
    alerttype: state.alertManagementReducer.alerttype,
    istypealert: state.alertManagementReducer.istypealert,
    alerttitle: state.alertManagementReducer.alerttitle,
    alertdescription: state.alertManagementReducer.alertdescription
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setUsersInfo: updatedUsers => dispatch(actionCreators.setUsersInfo(updatedUsers)),
    openAlertBox: alertParam => dispatch(actionCreators.openAlertBox(alertParam)),
    fetchUsersInfo: () => dispatch({
      type: actionTypes.SAGA_USER_MANAGEMENT_FETCH_USERS
    }),
    updateUsersInfo: newUsers => dispatch({
      type: actionTypes.SAGA_USER_MANAGEMENT_UPDATE_USERS,
      newUsers
    }),
    deleteUsersInfo: deleteUsers => dispatch({
      type: actionTypes.SAGA_USER_MANAGEMENT_DELETE_USERS,
      deleteUsers
    }),
    toggleUsersInfo: toggleUsers => dispatch({
      type: actionTypes.SAGA_USER_MANAGEMENT_TOGGLE_USERS,
      toggleUsers
    }),
    addNewUserInfo: addNewUser => dispatch({
      type: actionTypes.SAGA_USER_MANAGEMENT_ADD_NEW_USERS,
      addNewUser
    })
  };
};

var _default = (0, _core.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(UserManagement));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,