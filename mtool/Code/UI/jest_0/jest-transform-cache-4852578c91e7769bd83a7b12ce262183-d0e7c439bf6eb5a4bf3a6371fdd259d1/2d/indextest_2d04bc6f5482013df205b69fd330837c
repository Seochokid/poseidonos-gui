5dd514c07a246849010cdf11cdbff84e
"use strict";

jest.unmock('axios');

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactI18next = require("react-i18next");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _testUtils = require("react-dom/test-utils");

var _reactRedux = require("react-redux");

var _axios = _interopRequireDefault(require("axios"));

var _history = require("history");

var _react2 = require("@testing-library/react");

var _index = _interopRequireDefault(require("./index"));

var _headerReducer = _interopRequireDefault(require("../../../store/reducers/headerReducer"));

var _headerLanguageReducer = _interopRequireDefault(require("../../../store/reducers/headerLanguageReducer"));

var _alertManagementReducer = _interopRequireDefault(require("../../../store/reducers/alertManagementReducer"));

var _configurationsettingReducer = _interopRequireDefault(require("../../../store/reducers/configurationsettingReducer"));

var _indexSaga = _interopRequireDefault(require("../../../sagas/indexSaga"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/ConfigurationSetting/Alert-Management/index.test.js";
describe("Alert Management", () => {
  let select_input;
  let select_save;
  let select_delete;
  let select_switch_tag;
  let select_input_child;
  let wrapper;
  let store;
  let history;
  let alerts = [{
    "_id": {
      "$oid": "5d5e67b7f082d4c68c98f58b"
    },
    "alertName": "NewAlert",
    "alertCluster": "cpu",
    "alertSubCluster": "device",
    "alertType": "cpu-total",
    "alertCondition": null,
    "alertField": "usage_system",
    "description": "last",
    "alertRange": "109",
    "active": true
  }];
  let alertClusterList = [{
    alertFields: ['usage_idle', 'usage_system', 'NA']
  }];
  const radioindex = 0;
  const alertClusterName = "Random";
  const selectedAlertSubCluster = 'Random';
  const alertType = 'Random';
  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const composeEnhancers = window.REDUX_DEVTOOLS_EXTENSION_COMPOSE || _redux.compose;
    const rootReducers = (0, _redux.combineReducers)({
      alertManagementReducer: _alertManagementReducer.default,
      headerReducer: _headerReducer.default,
      headerLanguageReducer: _headerLanguageReducer.default,
      configurationsettingReducer: _configurationsettingReducer.default
    });
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = '/';
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    });
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 80
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 81
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82
      },
      __self: void 0
    }, _react.default.createElement(_index.default, {
      alerts: alerts,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 83
      },
      __self: void 0
    })))));
  });
  afterEach(_react2.cleanup);
  it('renders alert management saga', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_alerts/').reply(200, null);
    response = mock.onGet('/api/v1.0/get_alert_types/').reply(200, null);
  });
  it('renders alert management saga', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_alerts/').reply(401, null);
    response = mock.onGet('/api/v1.0/get_alert_types/').reply(401, null);
  });
  it('renders alert management saga', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let data = [{
      "_id": {
        "$oid": "5d5e67b7f082d4c68c98f58b"
      },
      "alertName": "NewAlert",
      "alertCluster": "cpu",
      "alertSubCluster": "device",
      "alertType": "cpu-total",
      "alertCondition": "Greater Than",
      "alertField": "usage_system",
      "description": "last",
      "alertRange": "109",
      "active": true
    }, {
      "_id": {
        "$oid": "5d660a4bd4bf85b0c852ed03"
      },
      "alertName": "ThisisAwesome",
      "alertCluster": "cpu",
      "alertSubCluster": "cpu ",
      "alertType": "cpu-total",
      "alertCondition": "Equal To",
      "alertField": "usage_user",
      "description": "Hmmm",
      "alertRange": "93",
      "active": true
    }, {
      "_id": {
        "$oid": "5d666e0bd4bf85b0c852ed05"
      },
      "alertName": "Alert1",
      "alertCluster": "cpu",
      "alertSubCluster": "cpu ",
      "alertType": "cpu-total",
      "alertCondition": "Equal To Or Greater",
      "alertField": "usage_user",
      "description": "Yayyy",
      "alertRange": "34",
      "active": true
    }];
    let response = mock.onGet('/api/v1.0/get_alerts/').reply(200, data);
    data = {
      "alert_types": [{
        "_id": 1,
        "alertFields": ["lat_data_0_id", "lat_data_0_tid_arr_0_aid_arr_0_aid", "lat_data_0_tid_arr_0_aid_arr_0_cnt_miss_low", "lat_data_0_tid_arr_0_aid_arr_0_cnt_miss_up", "lat_data_0_tid_arr_0_aid_arr_0_cnt_sample", "lat_data_0_tid_arr_0_aid_arr_0_low_qt", "lat_data_0_tid_arr_0_aid_arr_0_max", "lat_data_0_tid_arr_0_aid_arr_0_mean", "lat_data_0_tid_arr_0_aid_arr_0_min", "lat_data_0_tid_arr_0_aid_arr_0_phase", "lat_data_0_tid_arr_0_aid_arr_0_qos_2nine", "lat_data_0_tid_arr_0_aid_arr_0_qos_3nine", "lat_data_0_tid_arr_0_aid_arr_0_qos_4nine", "lat_data_0_tid_arr_0_aid_arr_0_std", "lat_data_0_tid_arr_0_aid_arr_0_up_qt", "lat_data_0_tid_arr_0_tid", "lat_data_0_tid_arr_1_aid_arr_0_aid", "lat_data_0_tid_arr_1_aid_arr_0_cnt_miss_low", "lat_data_0_tid_arr_1_aid_arr_0_cnt_miss_up", "lat_data_0_tid_arr_1_aid_arr_0_cnt_sample", "lat_data_0_tid_arr_1_aid_arr_0_low_qt", "lat_data_0_tid_arr_1_aid_arr_0_max", "lat_data_0_tid_arr_1_aid_arr_0_mean", "lat_data_0_tid_arr_1_aid_arr_0_min", "lat_data_0_tid_arr_1_aid_arr_0_phase", "lat_data_0_tid_arr_1_aid_arr_0_qos_2nine", "lat_data_0_tid_arr_1_aid_arr_0_qos_3nine", "lat_data_0_tid_arr_1_aid_arr_0_qos_4nine", "lat_data_0_tid_arr_1_aid_arr_0_std", "lat_data_0_tid_arr_1_aid_arr_0_up_qt", "lat_data_0_tid_arr_1_tid", "perf_data_0_id", "perf_data_0_tid_arr_0_tid", "perf_data_0_tid_arr_1_aid_arr_0_aid", "perf_data_0_tid_arr_1_aid_arr_0_bw_read", "perf_data_0_tid_arr_1_aid_arr_0_bw_total", "perf_data_0_tid_arr_1_aid_arr_0_bw_write", "perf_data_0_tid_arr_1_aid_arr_0_cnt_128kb", "perf_data_0_tid_arr_1_aid_arr_0_cnt_16kb", "perf_data_0_tid_arr_1_aid_arr_0_cnt_1kb", "perf_data_0_tid_arr_1_aid_arr_0_cnt_256kb", "perf_data_0_tid_arr_1_aid_arr_0_cnt_2kb", "perf_data_0_tid_arr_1_aid_arr_0_cnt_32kb", "perf_data_0_tid_arr_1_aid_arr_0_cnt_4kb", "perf_data_0_tid_arr_1_aid_arr_0_cnt_512b", "perf_data_0_tid_arr_1_aid_arr_0_cnt_64kb", "perf_data_0_tid_arr_1_aid_arr_0_cnt_8kb", "perf_data_0_tid_arr_1_aid_arr_0_cnt_big", "perf_data_0_tid_arr_1_aid_arr_0_cnt_no_align", "perf_data_0_tid_arr_1_aid_arr_0_iops_read", "perf_data_0_tid_arr_1_aid_arr_0_iops_total", "perf_data_0_tid_arr_1_aid_arr_0_iops_write", "perf_data_0_tid_arr_1_tid", "streaming_interval"],
        "alertSubCluster": [{
          "_id": 1,
          "alertTypes": [{
            "type": "2030045418"
          }],
          "name": "host"
        }, {
          "_id": 2,
          "alertTypes": [{
            "type": "/home/dinesh/ibof_devel_1206/ibofos/air_result.json"
          }],
          "name": "path"
        }],
        "name": "air"
      }, {
        "_id": 2,
        "alertFields": ["usage_guest", "usage_guest_nice", "usage_idle", "usage_iowait", "usage_irq", "usage_nice", "usage_softirq", "usage_steal", "usage_system", "usage_user"],
        "alertSubCluster": [{
          "_id": 1,
          "alertTypes": [{
            "type": "cpu-total"
          }, {
            "type": "cpu0"
          }, {
            "type": "cpu1"
          }, {
            "type": "cpu10"
          }, {
            "type": "cpu11"
          }, {
            "type": "cpu12"
          }, {
            "type": "cpu13"
          }, {
            "type": "cpu14"
          }, {
            "type": "cpu15"
          }, {
            "type": "cpu16"
          }, {
            "type": "cpu17"
          }, {
            "type": "cpu18"
          }, {
            "type": "cpu19"
          }, {
            "type": "cpu2"
          }, {
            "type": "cpu20"
          }, {
            "type": "cpu21"
          }, {
            "type": "cpu22"
          }, {
            "type": "cpu23"
          }, {
            "type": "cpu24"
          }, {
            "type": "cpu25"
          }, {
            "type": "cpu26"
          }, {
            "type": "cpu27"
          }, {
            "type": "cpu28"
          }, {
            "type": "cpu29"
          }, {
            "type": "cpu3"
          }, {
            "type": "cpu30"
          }, {
            "type": "cpu31"
          }, {
            "type": "cpu32"
          }, {
            "type": "cpu33"
          }, {
            "type": "cpu34"
          }, {
            "type": "cpu35"
          }, {
            "type": "cpu36"
          }, {
            "type": "cpu37"
          }, {
            "type": "cpu38"
          }, {
            "type": "cpu39"
          }, {
            "type": "cpu4"
          }, {
            "type": "cpu40"
          }, {
            "type": "cpu41"
          }, {
            "type": "cpu42"
          }, {
            "type": "cpu43"
          }, {
            "type": "cpu44"
          }, {
            "type": "cpu45"
          }, {
            "type": "cpu46"
          }, {
            "type": "cpu47"
          }, {
            "type": "cpu5"
          }, {
            "type": "cpu6"
          }, {
            "type": "cpu7"
          }, {
            "type": "cpu8"
          }, {
            "type": "cpu9"
          }],
          "name": "cpu"
        }, {
          "_id": 2,
          "alertTypes": [{
            "type": "2030045418"
          }],
          "name": "host"
        }],
        "name": "cpu"
      }, {
        "_id": 3,
        "alertFields": ["free", "inodes_free", "inodes_total", "inodes_used", "total", "used", "used_percent"],
        "alertSubCluster": [{
          "_id": 1,
          "alertTypes": [{
            "type": "sdb1"
          }, {
            "type": "sdb2"
          }, {
            "type": "sdb5"
          }],
          "name": "device"
        }, {
          "_id": 2,
          "alertTypes": [{
            "type": "ext4"
          }],
          "name": "fstype"
        }, {
          "_id": 3,
          "alertTypes": [{
            "type": "2030045418"
          }],
          "name": "host"
        }, {
          "_id": 4,
          "alertTypes": [{
            "type": "rw"
          }],
          "name": "mode"
        }, {
          "_id": 5,
          "alertTypes": [{
            "type": "/"
          }, {
            "type": "/home"
          }, {
            "type": "/usr"
          }],
          "name": "path"
        }],
        "name": "disk"
      }, {
        "_id": 4,
        "alertFields": ["io_time", "iops_in_progress", "read_bytes", "read_time", "reads", "weighted_io_time", "write_bytes", "write_time", "writes"],
        "alertSubCluster": [{
          "_id": 1,
          "alertTypes": [{
            "type": "2030045418"
          }],
          "name": "host"
        }, {
          "_id": 2,
          "alertTypes": [{
            "type": "loop0"
          }, {
            "type": "loop1"
          }, {
            "type": "loop2"
          }, {
            "type": "nvme0n1"
          }, {
            "type": "nvme1n1"
          }, {
            "type": "nvme2n1"
          }, {
            "type": "nvme3n1"
          }, {
            "type": "sda"
          }, {
            "type": "sda1"
          }, {
            "type": "sda2"
          }, {
            "type": "sdb"
          }, {
            "type": "sdb1"
          }, {
            "type": "sdb2"
          }, {
            "type": "sdb3"
          }, {
            "type": "sdb5"
          }],
          "name": "name"
        }],
        "name": "diskio"
      }, {
        "_id": 5,
        "alertFields": ["boot_time", "context_switches", "entropy_avail", "interrupts", "processes_forked"],
        "alertSubCluster": [{
          "_id": 1,
          "alertTypes": [{
            "type": "2030045418"
          }],
          "name": "host"
        }],
        "name": "kernel"
      }, {
        "_id": 6,
        "alertFields": ["active", "available", "available_percent", "buffered", "cached", "commit_limit", "committed_as", "dirty", "free", "high_free", "high_total", "huge_page_size", "huge_pages_free", "huge_pages_total", "inactive", "low_free", "low_total", "mapped", "page_tables", "shared", "slab", "swap_cached", "swap_free", "swap_total", "total", "used", "used_percent", "vmalloc_chunk", "vmalloc_total", "vmalloc_used", "wired", "write_back", "write_back_tmp"],
        "alertSubCluster": [{
          "_id": 1,
          "alertTypes": [{
            "type": "2030045418"
          }],
          "name": "host"
        }],
        "name": "mem"
      }, {
        "_id": 7,
        "alertFields": ["blocked", "dead", "idle", "paging", "running", "sleeping", "stopped", "total", "total_threads", "unknown", "zombies"],
        "alertSubCluster": [{
          "_id": 1,
          "alertTypes": [{
            "type": "2030045418"
          }],
          "name": "host"
        }],
        "name": "processes"
      }, {
        "_id": 8,
        "alertFields": ["free", "in", "out", "total", "used", "used_percent"],
        "alertSubCluster": [{
          "_id": 1,
          "alertTypes": [{
            "type": "2030045418"
          }],
          "name": "host"
        }],
        "name": "swap"
      }, {
        "_id": 9,
        "alertFields": ["load1", "load15", "load5", "n_cpus", "n_users", "uptime", "uptime_format"],
        "alertSubCluster": [{
          "_id": 1,
          "alertTypes": [{
            "type": "2030045418"
          }],
          "name": "host"
        }],
        "name": "system"
      }]
    };
    response = mock.onGet('/api/v1.0/get_alert_types/').reply(200, data);
  });
  test('renders alert table component', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    jest.setTimeout(30000);
    const _wrapper = wrapper,
          getByLabelText = _wrapper.getByLabelText,
          queryAllByText = _wrapper.queryAllByText,
          getByTitle = _wrapper.getByTitle,
          getAllByTestId = _wrapper.getAllByTestId,
          getAllByTitle = _wrapper.getAllByTitle,
          getByTestId = _wrapper.getByTestId,
          getByText = _wrapper.getByText,
          getAllByText = _wrapper.getAllByText,
          asFragment = _wrapper.asFragment;
    getByTestId("AlertsTableTag");
    await (0, _testUtils.act)(async () => {
      select_input = await (0, _react2.waitForElement)(() => getAllByTitle('Edit')[0]);

      _react2.fireEvent.click(select_input);

      select_input = await (0, _react2.waitForElement)(() => getAllByTestId("SelectEditTag")[0]);

      _react2.fireEvent.click(select_input); // select_input = await waitForElement(() => getAllByTestId("SelectEditMenuItemTag")[0]);
      // fireEvent.click(select_input);
      // select_input = await waitForElement(() => getAllByTestId("SelectEditMenuItemTag")[0]);
      // fireEvent.change(select_input, { target: { value: "Less Than" } });


      let spy = jest.spyOn(_axios.default, "post").mockReturnValue(200);

      _react2.fireEvent.click(getAllByTitle('Save')[0]);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toBeCalled(); //toHave('/api/v1.0/update_alerts/', { "_id":{"$oid":"5d5e67b7f082d4c68c98f58b"},"alertName": "NewAlert", "alertCluster": "cpu", "alertSubCluster": "device", "alertType": "cpu-total", "alertCondition": "Greater Than", "alertField": "usage_system", "description": "last", "alertRange": "109", "active": true, "selected": false, "edit": false },{"headers": {"Accept": "application/json", "Content-Type": "application/json", "x-access-token": null}});

      select_input = await (0, _react2.waitForElement)(() => getAllByTitle('Edit')[0]);

      _react2.fireEvent.click(select_input);

      select_input_child = await (0, _react2.waitForElement)(() => getAllByTestId("SelectEditTag")[0]);

      _react2.fireEvent.click(select_input_child);

      spy = jest.spyOn(_axios.default, "post").mockReturnValue(200);

      _react2.fireEvent.click(getAllByTitle('Save')[0]);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toBeCalled(); //toHave('/api/v1.0/update_alerts/', { "_id":{"$oid":"5d5e67b7f082d4c68c98f58b"},"alertName": "NewAlert", "alertCluster": "cpu", "alertSubCluster": "device", "alertType": "cpu-total", "alertCondition": "Greater Than", "alertField": "usage_system", "description": "last", "alertRange": "109", "active": true, "selected": false, "edit": false },{"headers": {"Accept": "application/json", "Content-Type": "application/json", "x-access-token": null}});

      select_delete = await (0, _react2.waitForElement)(() => getAllByTitle('Delete')[0]);

      _react2.fireEvent.click(select_delete);

      spy = jest.spyOn(_axios.default, "post").mockReturnValue(200); //mock.onPost().reply(200);

      _react2.fireEvent.click(getAllByTitle('Save')[0]);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toBeCalled(); //toHave('/api/v1.0/update_alerts/', { "_id":{"$oid":"5d5e67b7f082d4c68c98f58b"},"alertName": "NewAlert", "alertCluster": "cpu", "alertSubCluster": "device", "alertType": "cpu-total", "alertCondition": "Greater Than", "alertField": "usage_system", "description": "last", "alertRange": "109", "active": true, "selected": false, "edit": false },{"headers": {"Accept": "application/json", "Content-Type": "application/json", "x-access-token": null}});

      _react2.fireEvent.click(getAllByTitle('Edit')[0]);

      spy = jest.spyOn(_axios.default, "post");

      _react2.fireEvent.click(getAllByTitle('Save')[0]);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toBeCalled();
    });
    const input = getByTestId("AlertsTableTag").querySelector('button');

    _react2.fireEvent.click(input);

    _react2.fireEvent.click(getAllByTestId("SwitchTag")[0].querySelector('input'));

    mock.onPost('/api/v1.0/toggle_alert_status/', {
      alertName: "ThisisAwesome",
      status: false
    }).reply({
      "status": 200
    });

    _react2.fireEvent.change(getAllByTestId("SwitchTag")[0].querySelector('input'), {
      target: {
        checked: true,
        value: "Samsung rocks #/"
      }
    });

    mock.onPost().reply({
      "status": 200
    });
    select_save = getAllByTitle('Save')[0];
    select_switch_tag = getAllByTestId("SwitchTag")[0];
    await (0, _testUtils.act)(async () => {
      _react2.fireEvent.click(select_input); //let spy = jest.spyOn(axios, "post");


      mock.onPost('/api/v1.0/update_alerts/').reply({
        "status": 200
      });

      _react2.fireEvent.click(select_save);

      await new Promise(resolve => setTimeout(resolve, 1000)); //expect(spy).toBeCalled();
    });
  });
  test('renders alert table component status 200', async () => {
    let mock = new _axiosMockAdapter.default(_axios.default);
    jest.setTimeout(30000);
    const _wrapper2 = wrapper,
          getByLabelText = _wrapper2.getByLabelText,
          queryAllByText = _wrapper2.queryAllByText,
          getByTitle = _wrapper2.getByTitle,
          getAllByTestId = _wrapper2.getAllByTestId,
          getAllByTitle = _wrapper2.getAllByTitle,
          getByTestId = _wrapper2.getByTestId,
          getByText = _wrapper2.getByText,
          getAllByText = _wrapper2.getAllByText,
          asFragment = _wrapper2.asFragment; //getByTestId("AlertManagementTag");

    getByTestId("AlertsTableTag");
    await (0, _testUtils.act)(async () => {
      //select_input = await waitForElement(() => getAllByTitle('Edit')[0]);
      _react2.fireEvent.click(select_input); // select_input = await waitForElement(() => getAllByTestId("SelectEditTag")[0]);
      // fireEvent.click(select_input);
      // select_input = await waitForElement(() => getAllByTestId("SelectEditMenuItemTag")[0]);
      // fireEvent.click(select_input);
      // select_input = await waitForElement(() => getAllByTestId("SelectEditMenuItemTag")[0]);
      // fireEvent.change(select_input, { target: { value: "Less Than" } });


      let spy = jest.spyOn(_axios.default, "post");
      mock.onPost().reply(200);

      _react2.fireEvent.click(select_save);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toBeCalled(); //toHave('/api/v1.0/update_alerts/', { "_id":{"$oid":"5d5e67b7f082d4c68c98f58b"},"alertName": "NewAlert", "alertCluster": "cpu", "alertSubCluster": "device", "alertType": "cpu-total", "alertCondition": "Greater Than", "alertField": "usage_system", "description": "last", "alertRange": "109", "active": true, "selected": false, "edit": false },{"headers": {"Accept": "application/json", "Content-Type": "application/json", "x-access-token": null}});
      //select_input = await waitForElement(() => getAllByTitle('Edit')[0]);

      _react2.fireEvent.click(select_input); //let select_input_child = await waitForElement(() => getAllByTestId("SelectEditTag")[0]);


      _react2.fireEvent.click(select_input_child);

      spy = jest.spyOn(_axios.default, "post");

      _react2.fireEvent.click(select_save);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toBeCalled(); //toHave('/api/v1.0/update_alerts/', { "_id":{"$oid":"5d5e67b7f082d4c68c98f58b"},"alertName": "NewAlert", "alertCluster": "cpu", "alertSubCluster": "device", "alertType": "cpu-total", "alertCondition": "Greater Than", "alertField": "usage_system", "description": "last", "alertRange": "109", "active": true, "selected": false, "edit": false },{"headers": {"Accept": "application/json", "Content-Type": "application/json", "x-access-token": null}});
      //select_delete = await waitForElement(() => getAllByTitle('Delete')[0]);

      _react2.fireEvent.click(select_delete);

      spy = jest.spyOn(_axios.default, "post");
      mock.onPost().reply(200);

      _react2.fireEvent.click(select_save);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toBeCalled(); //toHave('/api/v1.0/update_alerts/', { "_id":{"$oid":"5d5e67b7f082d4c68c98f58b"},"alertName": "NewAlert", "alertCluster": "cpu", "alertSubCluster": "device", "alertType": "cpu-total", "alertCondition": "Greater Than", "alertField": "usage_system", "description": "last", "alertRange": "109", "active": true, "selected": false, "edit": false },{"headers": {"Accept": "application/json", "Content-Type": "application/json", "x-access-token": null}});

      _react2.fireEvent.click(select_input);

      spy = jest.spyOn(_axios.default, "post");

      _react2.fireEvent.click(select_save);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toBeCalled();
    });
    const input = getByTestId("AlertsTableTag").querySelector('button');

    _react2.fireEvent.click(input);

    _react2.fireEvent.click(select_switch_tag.querySelector('input'));

    mock.onPost('/api/v1.0/toggle_alert_status/', {
      alertName: "ThisisAwesome",
      status: false
    }).reply(200);

    _react2.fireEvent.change(select_switch_tag.querySelector('input'), {
      target: {
        checked: true,
        value: "Samsung rocks #/"
      }
    });

    mock.onPost().reply(200);
  });
  test('renders alert types component', async () => {
    let mock = new _axiosMockAdapter.default(_axios.default);
    jest.setTimeout(30000);
    const _wrapper3 = wrapper,
          getByLabelText = _wrapper3.getByLabelText,
          queryAllByText = _wrapper3.queryAllByText,
          getAllByTestId = _wrapper3.getAllByTestId,
          getAllByRole = _wrapper3.getAllByRole,
          getByRole = _wrapper3.getByRole,
          getByTestId = _wrapper3.getByTestId,
          getByText = _wrapper3.getByText,
          getAllByText = _wrapper3.getAllByText,
          asFragment = _wrapper3.asFragment;
    getByTestId("AlertsTypesTag");
    getAllByTestId("ClusterTag")[0];
    let alert_input;
    let spy;
    let yesBtn;
    await (0, _testUtils.act)(async () => {
      //const tree_input =  await waitForElement(() => getAllByRole("treeitem")[0]);
      const tree_input = await (0, _react2.waitForElement)(() => getAllByRole("treeitem")[0].querySelector('div'));

      _react2.fireEvent.click(tree_input);

      const subtreeItem = await (0, _react2.waitForElement)(() => getAllByRole("subtreeitem")[0].querySelector('div'));

      _react2.fireEvent.click(subtreeItem);

      const formControl = await (0, _react2.waitForElement)(() => getAllByTestId("alertTypesCheckbox")[0]);

      _react2.fireEvent.click(formControl);

      _react2.fireEvent.change(formControl, {
        target: {
          checked: true
        }
      }); // let { getByLabelText, queryAllByText, getAllByTestId, getAllByRole, getByRole, getByTestId, getByText, getAllByText, asFragment } = render(
      //   <I18nextProvider i18n={i18n}>
      //       <Provider store={store}>
      //           <AlertFields alertClusterList={alertClusterList} radioindex={radioindex} alertClusterName={alertClusterName} selectedAlertSubCluster={selectedAlertSubCluster} alertType={alertType} />
      //       </Provider>
      //   </I18nextProvider>);
      //await waitForElement(() => getByLabelText(/usage_idle/i));
      // const input =  await waitForElement(() => getByRole(/radiogroup/i));


      const input = await (0, _react2.waitForElement)(() => getAllByTestId(/alertFieldRadioTag/i)[0]);

      _react2.fireEvent.click(input);

      alert_input = await (0, _react2.waitForElement)(() => getByLabelText(/Alert Name/i));

      _react2.fireEvent.click(alert_input);

      _react2.fireEvent.change(alert_input, {
        target: {
          value: "Alert"
        }
      });

      _react2.fireEvent.keyDown(alert_input, {
        key: 'Enter',
        keyCode: 13,
        charCode: 13
      });

      let dropdown_input = await (0, _react2.waitForElement)(() => getAllByTestId("selectAddNewAlertsTag")[0]);

      _react2.fireEvent.click(dropdown_input); // let dropdown_element = await waitForElement(() => getAllByTestId("selectMenuItemAddNewAlertsTag")[0]);
      // fireEvent.click(dropdown_element);
      // fireEvent.change(dropdown_element, { target: { value: "Less Than" } });
      //let value_input = await waitForElement(() => getByLabelText(/Value/i));


      let value_input = await (0, _react2.waitForElement)(() => getByTestId(/Alert_Range_TextField/i));

      _react2.fireEvent.click(value_input);

      _react2.fireEvent.change(value_input, {
        target: {
          value: "60"
        }
      });

      _react2.fireEvent.keyDown(value_input, {
        key: 'Enter',
        keyCode: 13,
        charCode: 13
      });

      let button_input = await (0, _react2.waitForElement)(() => getAllByTestId('ButtonTag')[0].querySelector('button'));
      spy = jest.spyOn(_axios.default, "post");
      mock.onPost('/api/v1.0/add_alert/').reply(200);

      _react2.fireEvent.click(button_input);

      yesBtn = await (0, _react2.waitForElement)(() => getByText('Yes'));
      spy = jest.spyOn(_axios.default, "post");
      mock.onPost('/api/v1.0/add_alert/').reply(200);

      _react2.fireEvent.click(yesBtn);

      expect(spy).toBeCalled();
    });

    _react2.fireEvent.click(getByTestId("AlertsTypesTag").querySelector('ul'));
  });
  test('renders add new alert component status 200', async () => {
    let mock = new _axiosMockAdapter.default(_axios.default);
    jest.setTimeout(30000);
    const _wrapper4 = wrapper,
          getByLabelText = _wrapper4.getByLabelText,
          queryAllByText = _wrapper4.queryAllByText,
          getByTitle = _wrapper4.getByTitle,
          getAllByTestId = _wrapper4.getAllByTestId,
          getAllByTitle = _wrapper4.getAllByTitle,
          getByTestId = _wrapper4.getByTestId,
          getByText = _wrapper4.getByText,
          getAllByText = _wrapper4.getAllByText,
          asFragment = _wrapper4.asFragment;
    getAllByTestId("addNewAlertsTag")[0];
    let alert_input;
    let spy;
    let yesBtn;
    await (0, _testUtils.act)(async () => {
      alert_input = await (0, _react2.waitForElement)(() => getByLabelText(/Alert Name/i));

      _react2.fireEvent.click(alert_input);

      _react2.fireEvent.change(alert_input, {
        target: {
          value: "Alert"
        }
      });

      _react2.fireEvent.keyDown(alert_input, {
        key: 'Enter',
        keyCode: 13,
        charCode: 13
      }); // alert_input = await waitForElement(() => getAllByTestId('ButtonTag')[0].querySelector('button'));
      // fireEvent.click(alert_input);
      // yesBtn = await waitForElement(() => getByText('Yes'));
      // spy = jest.spyOn(axios, "post");
      // mock.onPost('/api/v1.0/add_alert/').reply(200);
      // fireEvent.click(yesBtn);
      // expect(spy).toBeCalled();
      // alert_input = await waitForElement(() => getByLabelText(/Alert Name/i));
      // fireEvent.click(alert_input);
      // fireEvent.change(alert_input, { target: { value: "AlertName" } });
      // fireEvent.keyDown(alert_input, { key: 'Enter', keyCode: 13, charCode: 13 });
      // alert_input = await waitForElement(() => getAllByTestId("alertFieldRadioTag")[0]);
      // fireEvent.click(alert_input);


      let field_input = await (0, _react2.waitForElement)(() => getByLabelText(/Alert Field/i));

      _react2.fireEvent.click(field_input);

      _react2.fireEvent.change(field_input, {
        target: {
          value: "Usage_system"
        }
      });

      let dropdown_input = await (0, _react2.waitForElement)(() => getAllByTestId("selectAddNewAlertsTag")[0]);

      _react2.fireEvent.click(dropdown_input); // let dropdown_element = await waitForElement(() => getAllByTestId("selectMenuItemAddNewAlertsTag")[0]);
      // fireEvent.click(dropdown_element);
      // //let dropdown_element2 = await waitForElement(() => getAllByTestId("selectMenuItemAddNewAlertsTag")[0]);
      // fireEvent.change(dropdown_element, { target: { value: "Less Than" } });
      //let value_input = await waitForElement(() => getByLabelText(/Value/i));


      let value_input = await (0, _react2.waitForElement)(() => getByTestId(/Alert_Range_TextField/i));

      _react2.fireEvent.click(value_input);

      _react2.fireEvent.change(value_input, {
        target: {
          value: "60"
        }
      });

      _react2.fireEvent.keyDown(value_input, {
        key: 'Enter',
        keyCode: 13,
        charCode: 13
      });

      let button_input = await (0, _react2.waitForElement)(() => getAllByTestId('ButtonTag')[0].querySelector('button'));
      spy = jest.spyOn(_axios.default, "post");
      mock.onPost('/api/v1.0/add_alert/').reply(200);

      _react2.fireEvent.click(button_input);

      yesBtn = await (0, _react2.waitForElement)(() => getByText('Yes'));
      spy = jest.spyOn(_axios.default, "post");
      mock.onPost('/api/v1.0/add_alert/').reply(200);

      _react2.fireEvent.click(yesBtn);

      expect(spy).toBeCalled();
    });
  });
  test('renders alert management container', () => {
    const _wrapper5 = wrapper,
          getByTestId = _wrapper5.getByTestId,
          asFragment = _wrapper5.asFragment;
    expect(asFragment()).toMatchSnapshot();
    getByTestId('alertManagementTag');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsiamVzdCIsInVubW9jayIsImRlc2NyaWJlIiwic2VsZWN0X2lucHV0Iiwic2VsZWN0X3NhdmUiLCJzZWxlY3RfZGVsZXRlIiwic2VsZWN0X3N3aXRjaF90YWciLCJzZWxlY3RfaW5wdXRfY2hpbGQiLCJ3cmFwcGVyIiwic3RvcmUiLCJoaXN0b3J5IiwiYWxlcnRzIiwiYWxlcnRDbHVzdGVyTGlzdCIsImFsZXJ0RmllbGRzIiwicmFkaW9pbmRleCIsImFsZXJ0Q2x1c3Rlck5hbWUiLCJzZWxlY3RlZEFsZXJ0U3ViQ2x1c3RlciIsImFsZXJ0VHlwZSIsImJlZm9yZUVhY2giLCJzYWdhTWlkZGxld2FyZSIsImNvbXBvc2VFbmhhbmNlcnMiLCJ3aW5kb3ciLCJSRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRSIsImNvbXBvc2UiLCJyb290UmVkdWNlcnMiLCJhbGVydE1hbmFnZW1lbnRSZWR1Y2VyIiwiaGVhZGVyUmVkdWNlciIsImhlYWRlckxhbmd1YWdlUmVkdWNlciIsImNvbmZpZ3VyYXRpb25zZXR0aW5nUmVkdWNlciIsInJ1biIsInJvb3RTYWdhIiwicm91dGUiLCJpbml0aWFsRW50cmllcyIsImkxOG4iLCJhZnRlckVhY2giLCJjbGVhbnVwIiwiaXQiLCJtb2NrIiwiTW9ja0FkYXB0ZXIiLCJheGlvcyIsInJlc3BvbnNlIiwib25HZXQiLCJyZXBseSIsImRhdGEiLCJ0ZXN0Iiwic2V0VGltZW91dCIsImdldEJ5TGFiZWxUZXh0IiwicXVlcnlBbGxCeVRleHQiLCJnZXRCeVRpdGxlIiwiZ2V0QWxsQnlUZXN0SWQiLCJnZXRBbGxCeVRpdGxlIiwiZ2V0QnlUZXN0SWQiLCJnZXRCeVRleHQiLCJnZXRBbGxCeVRleHQiLCJhc0ZyYWdtZW50IiwiZmlyZUV2ZW50IiwiY2xpY2siLCJzcHkiLCJzcHlPbiIsIm1vY2tSZXR1cm5WYWx1ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZXhwZWN0IiwidG9CZUNhbGxlZCIsImlucHV0IiwicXVlcnlTZWxlY3RvciIsIm9uUG9zdCIsImFsZXJ0TmFtZSIsInN0YXR1cyIsImNoYW5nZSIsInRhcmdldCIsImNoZWNrZWQiLCJ2YWx1ZSIsImdldEFsbEJ5Um9sZSIsImdldEJ5Um9sZSIsImFsZXJ0X2lucHV0IiwieWVzQnRuIiwidHJlZV9pbnB1dCIsInN1YnRyZWVJdGVtIiwiZm9ybUNvbnRyb2wiLCJrZXlEb3duIiwia2V5Iiwia2V5Q29kZSIsImNoYXJDb2RlIiwiZHJvcGRvd25faW5wdXQiLCJ2YWx1ZV9pbnB1dCIsImJ1dHRvbl9pbnB1dCIsImZpZWxkX2lucHV0IiwidG9NYXRjaFNuYXBzaG90Il0sIm1hcHBpbmdzIjoiOztBQTZDQUEsSUFBSSxDQUFDQyxNQUFMLENBQVksT0FBWjs7OztBQW5CQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7O0FBSUFDLFFBQVEsQ0FBQyxrQkFBRCxFQUFxQixNQUFNO0FBQ2pDLE1BQUlDLFlBQUo7QUFDQSxNQUFJQyxXQUFKO0FBQ0EsTUFBSUMsYUFBSjtBQUNBLE1BQUlDLGlCQUFKO0FBQ0EsTUFBSUMsa0JBQUo7QUFDQSxNQUFJQyxPQUFKO0FBQ0EsTUFBSUMsS0FBSjtBQUNBLE1BQUlDLE9BQUo7QUFDQSxNQUFJQyxNQUFNLEdBQUcsQ0FBQztBQUFFLFdBQU87QUFBRSxjQUFRO0FBQVYsS0FBVDtBQUFpRCxpQkFBYSxVQUE5RDtBQUEwRSxvQkFBZ0IsS0FBMUY7QUFBaUcsdUJBQW1CLFFBQXBIO0FBQThILGlCQUFhLFdBQTNJO0FBQXdKLHNCQUFrQixJQUExSztBQUFnTCxrQkFBYyxjQUE5TDtBQUE4TSxtQkFBZSxNQUE3TjtBQUFxTyxrQkFBYyxLQUFuUDtBQUEwUCxjQUFVO0FBQXBRLEdBQUQsQ0FBYjtBQUNBLE1BQUlDLGdCQUFnQixHQUFHLENBQUM7QUFBRUMsSUFBQUEsV0FBVyxF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LENBQUMsb0NBQUQsRUFBdUMsTUFBTTtBQUFBLHNCQUNYcEMsT0FEVztBQUFBLFVBQ3ZDMkMsV0FEdUMsYUFDdkNBLFdBRHVDO0FBQUEsVUFDMUJHLFVBRDBCLGFBQzFCQSxVQUQwQjtBQUUvQ1EsSUFBQUEsTUFBTSxDQUFDUixVQUFVLEVBQVgsQ0FBTixDQUFxQmtDLGVBQXJCO0FBQ0FyQyxJQUFBQSxXQUFXLENBQUMsb0JBQUQsQ0FBWDtBQUNELEdBSkcsQ0FBSjtBQU9ELENBaDRCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICBDT1BZUklHSFQgKGMpIDIwMTkgU0FNU1VORyBFTEVDVFJPTklDUyBDTy4sIExURC4gICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgQUxMIFJJR0hUUyBSRVNFUlZFRCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkIHRvIGxpY2Vuc2VlcyBvZiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiAgICAgICAgL1xuLyAgIHByb2R1Y3RzIHRvIHVzZSBvciBhYnN0cmFjdCB0aGlzIGNvbXB1dGVyIHByb2dyYW0gZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgICAgICAgICAvXG4vICAgaW1wbGVtZW50aW5nIGEgcHJvZHVjdCBiYXNlZCBvbiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBwcm9kdWN0cy4gICAgICAgICAgIC9cbi8gICBObyBvdGhlciByaWdodHMgdG8gcmVwcm9kdWNlLCB1c2UsIG9yIGRpc3NlbWluYXRlIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgICAgICAgICAgL1xuLyAgIHdoZXRoZXIgaW4gcGFydCBvciBpbiB3aG9sZSwgYXJlIGdyYW50ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIFxuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gbWFrZXMgbm8gcmVwcmVzZW50YXRpb24gb3Igd2FycmFudGllcyB3aXRoICAgICAgICAgIC9cbi8gICByZXNwZWN0IHRvIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIGNvbXB1dGVyIHByb2dyYW0sIGFuZCBzcGVjaWZpY2FsbHkgZGlzY2xhaW1zICAgL1xuLyAgIGFueSByZXNwb25zaWJpbGl0eSBmb3IgYW55IGRhbWFnZXMsIHNwZWNpYWwgb3IgY29uc2VxdWVudGlhbCwgY29ubmVjdGVkICAgICAgICAgICAvXG4vICAgd2l0aCB0aGUgdXNlIG9mIHRoaXMgcHJvZ3JhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG5cblxuREVTQ1JJUFRJT046IEFsZXJ0IE1hbmFnZW1lbnQgQ29udGFpbmVyIFRlc3QgRmlsZVxuQE5BTUUgOiBpbmRleC50ZXN0LmpzXG5AQVVUSE9SUzogSmF5IEhpdGVzaCBTYW5naGF2aSBcbkBWZXJzaW9uIDogMS4wICpcbkBSRVZJU0lPTiBISVNUT1JZXG5bMDMvMDYvMjAxOV0gW0pheV0gOiBQcm90b3R5cGluZy4uLi4uLi4uLi4vLy8vLy8vLy8vLy8vLy8vLy8vL1xuKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEkxOG5leHRQcm92aWRlciB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMsIGNyZWF0ZVN0b3JlLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UgfSBmcm9tICdyZWR1eCdcbmltcG9ydCBjcmVhdGVTYWdhTWlkZGxld2FyZSBmcm9tICdyZWR1eC1zYWdhJ1xuaW1wb3J0IE1vY2tBZGFwdGVyIGZyb20gJ2F4aW9zLW1vY2stYWRhcHRlcidcbmltcG9ydCB7IGFjdCB9IGZyb20gJ3JlYWN0LWRvbS90ZXN0LXV0aWxzJ1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBjbGVhbnVwLCB3YWl0Rm9yRWxlbWVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IEFsZXJ0TWFuYWdlbWVudCBmcm9tICcuL2luZGV4JztcbmltcG9ydCBoZWFkZXJSZWR1Y2VyIGZyb20gXCIuLi8uLi8uLi9zdG9yZS9yZWR1Y2Vycy9oZWFkZXJSZWR1Y2VyXCJcbmltcG9ydCBoZWFkZXJMYW5ndWFnZVJlZHVjZXIgZnJvbSBcIi4uLy4uLy4uL3N0b3JlL3JlZHVjZXJzL2hlYWRlckxhbmd1YWdlUmVkdWNlclwiXG5pbXBvcnQgYWxlcnRNYW5hZ2VtZW50UmVkdWNlciBmcm9tIFwiLi4vLi4vLi4vc3RvcmUvcmVkdWNlcnMvYWxlcnRNYW5hZ2VtZW50UmVkdWNlclwiXG5pbXBvcnQgY29uZmlndXJhdGlvbnNldHRpbmdSZWR1Y2VyIGZyb20gXCIuLi8uLi8uLi9zdG9yZS9yZWR1Y2Vycy9jb25maWd1cmF0aW9uc2V0dGluZ1JlZHVjZXJcIlxuaW1wb3J0IHJvb3RTYWdhIGZyb20gXCIuLi8uLi8uLi9zYWdhcy9pbmRleFNhZ2FcIlxuaW1wb3J0IGkxOG4gZnJvbSBcIi4uLy4uLy4uL2kxOG5cIjtcblxuamVzdC51bm1vY2soJ2F4aW9zJyk7XG5cbmRlc2NyaWJlKFwiQWxlcnQgTWFuYWdlbWVudFwiLCAoKSA9PiB7XG4gIGxldCBzZWxlY3RfaW5wdXQ7XG4gIGxldCBzZWxlY3Rfc2F2ZTtcbiAgbGV0IHNlbGVjdF9kZWxldGU7XG4gIGxldCBzZWxlY3Rfc3dpdGNoX3RhZztcbiAgbGV0IHNlbGVjdF9pbnB1dF9jaGlsZDtcbiAgbGV0IHdyYXBwZXI7XG4gIGxldCBzdG9yZTtcbiAgbGV0IGhpc3Rvcnk7XG4gIGxldCBhbGVydHMgPSBbeyBcIl9pZFwiOiB7IFwiJG9pZFwiOiBcIjVkNWU2N2I3ZjA4MmQ0YzY4Yzk4ZjU4YlwiIH0sIFwiYWxlcnROYW1lXCI6IFwiTmV3QWxlcnRcIiwgXCJhbGVydENsdXN0ZXJcIjogXCJjcHVcIiwgXCJhbGVydFN1YkNsdXN0ZXJcIjogXCJkZXZpY2VcIiwgXCJhbGVydFR5cGVcIjogXCJjcHUtdG90YWxcIiwgXCJhbGVydENvbmRpdGlvblwiOiBudWxsLCBcImFsZXJ0RmllbGRcIjogXCJ1c2FnZV9zeXN0ZW1cIiwgXCJkZXNjcmlwdGlvblwiOiBcImxhc3RcIiwgXCJhbGVydFJhbmdlXCI6IFwiMTA5XCIsIFwiYWN0aXZlXCI6IHRydWUgfSxdXG4gIGxldCBhbGVydENsdXN0ZXJMaXN0ID0gW3sgYWxlcnRGaWVsZHM6IFsndXNhZ2VfaWRsZScsICd1c2FnZV9zeXN0ZW0nLCAnTkEnXSB9XTtcbiAgY29uc3QgcmFkaW9pbmRleCA9IDA7XG4gIGNvbnN0IGFsZXJ0Q2x1c3Rlck5hbWUgPSBcIlJhbmRvbVwiO1xuICBjb25zdCBzZWxlY3RlZEFsZXJ0U3ViQ2x1c3RlciA9ICdSYW5kb20nO1xuICBjb25zdCBhbGVydFR5cGUgPSAnUmFuZG9tJztcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjb25zdCBzYWdhTWlkZGxld2FyZSA9IGNyZWF0ZVNhZ2FNaWRkbGV3YXJlKCk7XG4gICAgY29uc3QgY29tcG9zZUVuaGFuY2VycyA9IHdpbmRvdy5SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRSB8fCBjb21wb3NlO1xuXG4gICAgY29uc3Qgcm9vdFJlZHVjZXJzID0gY29tYmluZVJlZHVjZXJzKHtcbiAgICAgIGFsZXJ0TWFuYWdlbWVudFJlZHVjZXIsXG4gICAgICBoZWFkZXJSZWR1Y2VyLFxuICAgICAgaGVhZGVyTGFuZ3VhZ2VSZWR1Y2VyLFxuICAgICAgY29uZmlndXJhdGlvbnNldHRpbmdSZWR1Y2VyXG4gICAgfSk7XG4gICAgc3RvcmUgPSBjcmVhdGVTdG9yZShyb290UmVkdWNlcnMsIGNvbXBvc2VFbmhhbmNlcnMoYXBwbHlNaWRkbGV3YXJlKHNhZ2FNaWRkbGV3YXJlKSkpXG5cbiAgICBzYWdhTWlkZGxld2FyZS5ydW4ocm9vdFNhZ2EpO1xuICAgIGNvbnN0IHJvdXRlID0gJy8nO1xuICAgIGhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KHsgaW5pdGlhbEVudHJpZXM6IFtyb3V0ZV0gfSlcbiAgICB3cmFwcGVyID0gcmVuZGVyKFxuICAgICAgPFJvdXRlciBoaXN0b3J5PXtoaXN0b3J5fT5cbiAgICAgICAgPEkxOG5leHRQcm92aWRlciBpMThuPXtpMThufT5cbiAgICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgICAgICAgIDxBbGVydE1hbmFnZW1lbnQgYWxlcnRzPXthbGVydHN9IC8+XG4gICAgICAgICAgPC9Qcm92aWRlcj5cbiAgICAgICAgPC9JMThuZXh0UHJvdmlkZXI+XG4gICAgICA8L1JvdXRlcj5cbiAgICApO1xuICB9KTtcbiAgYWZ0ZXJFYWNoKGNsZWFudXApO1xuXG4gIGl0KCdyZW5kZXJzIGFsZXJ0IG1hbmFnZW1lbnQgc2FnYScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrID0gbmV3IE1vY2tBZGFwdGVyKGF4aW9zKTtcbiAgICBsZXQgcmVzcG9uc2UgPSBtb2NrLm9uR2V0KCcvYXBpL3YxLjAvZ2V0X2FsZXJ0cy8nKS5yZXBseSgyMDAsIG51bGwpO1xuICAgIHJlc3BvbnNlID0gbW9jay5vbkdldCgnL2FwaS92MS4wL2dldF9hbGVydF90eXBlcy8nKS5yZXBseSgyMDAsIG51bGwpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyBhbGVydCBtYW5hZ2VtZW50IHNhZ2EnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9jayA9IG5ldyBNb2NrQWRhcHRlcihheGlvcyk7XG4gICAgbGV0IHJlc3BvbnNlID0gbW9jay5vbkdldCgnL2FwaS92MS4wL2dldF9hbGVydHMvJykucmVwbHkoNDAxLCBudWxsKTtcbiAgICByZXNwb25zZSA9IG1vY2sub25HZXQoJy9hcGkvdjEuMC9nZXRfYWxlcnRfdHlwZXMvJykucmVwbHkoNDAxLCBudWxsKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgYWxlcnQgbWFuYWdlbWVudCBzYWdhJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2sgPSBuZXcgTW9ja0FkYXB0ZXIoYXhpb3MpO1xuICAgIGxldCBkYXRhID0gW3sgXCJfaWRcIjogeyBcIiRvaWRcIjogXCI1ZDVlNjdiN2YwODJkNGM2OGM5OGY1OGJcIiB9LCBcImFsZXJ0TmFtZVwiOiBcIk5ld0FsZXJ0XCIsIFwiYWxlcnRDbHVzdGVyXCI6IFwiY3B1XCIsIFwiYWxlcnRTdWJDbHVzdGVyXCI6IFwiZGV2aWNlXCIsIFwiYWxlcnRUeXBlXCI6IFwiY3B1LXRvdGFsXCIsIFwiYWxlcnRDb25kaXRpb25cIjogXCJHcmVhdGVyIFRoYW5cIiwgXCJhbGVydEZpZWxkXCI6IFwidXNhZ2Vfc3lzdGVtXCIsIFwiZGVzY3JpcHRpb25cIjogXCJsYXN0XCIsIFwiYWxlcnRSYW5nZVwiOiBcIjEwOVwiLCBcImFjdGl2ZVwiOiB0cnVlIH0sIHsgXCJfaWRcIjogeyBcIiRvaWRcIjogXCI1ZDY2MGE0YmQ0YmY4NWIwYzg1MmVkMDNcIiB9LCBcImFsZXJ0TmFtZVwiOiBcIlRoaXNpc0F3ZXNvbWVcIiwgXCJhbGVydENsdXN0ZXJcIjogXCJjcHVcIiwgXCJhbGVydFN1YkNsdXN0ZXJcIjogXCJjcHUgXCIsIFwiYWxlcnRUeXBlXCI6IFwiY3B1LXRvdGFsXCIsIFwiYWxlcnRDb25kaXRpb25cIjogXCJFcXVhbCBUb1wiLCBcImFsZXJ0RmllbGRcIjogXCJ1c2FnZV91c2VyXCIsIFwiZGVzY3JpcHRpb25cIjogXCJIbW1tXCIsIFwiYWxlcnRSYW5nZVwiOiBcIjkzXCIsIFwiYWN0aXZlXCI6IHRydWUgfSwgeyBcIl9pZFwiOiB7IFwiJG9pZFwiOiBcIjVkNjY2ZTBiZDRiZjg1YjBjODUyZWQwNVwiIH0sIFwiYWxlcnROYW1lXCI6IFwiQWxlcnQxXCIsIFwiYWxlcnRDbHVzdGVyXCI6IFwiY3B1XCIsIFwiYWxlcnRTdWJDbHVzdGVyXCI6IFwiY3B1IFwiLCBcImFsZXJ0VHlwZVwiOiBcImNwdS10b3RhbFwiLCBcImFsZXJ0Q29uZGl0aW9uXCI6IFwiRXF1YWwgVG8gT3IgR3JlYXRlclwiLCBcImFsZXJ0RmllbGRcIjogXCJ1c2FnZV91c2VyXCIsIFwiZGVzY3JpcHRpb25cIjogXCJZYXl5eVwiLCBcImFsZXJ0UmFuZ2VcIjogXCIzNFwiLCBcImFjdGl2ZVwiOiB0cnVlIH1dO1xuICAgIGxldCByZXNwb25zZSA9IG1vY2sub25HZXQoJy9hcGkvdjEuMC9nZXRfYWxlcnRzLycpLnJlcGx5KDIwMCwgZGF0YSk7XG4gICAgZGF0YSA9IHtcbiAgICAgIFwiYWxlcnRfdHlwZXNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJfaWRcIjogMSxcbiAgICAgICAgICBcImFsZXJ0RmllbGRzXCI6IFtcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF9pZFwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMF9haWRfYXJyXzBfYWlkXCIsXG4gICAgICAgICAgICBcImxhdF9kYXRhXzBfdGlkX2Fycl8wX2FpZF9hcnJfMF9jbnRfbWlzc19sb3dcIixcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF90aWRfYXJyXzBfYWlkX2Fycl8wX2NudF9taXNzX3VwXCIsXG4gICAgICAgICAgICBcImxhdF9kYXRhXzBfdGlkX2Fycl8wX2FpZF9hcnJfMF9jbnRfc2FtcGxlXCIsXG4gICAgICAgICAgICBcImxhdF9kYXRhXzBfdGlkX2Fycl8wX2FpZF9hcnJfMF9sb3dfcXRcIixcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF90aWRfYXJyXzBfYWlkX2Fycl8wX21heFwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMF9haWRfYXJyXzBfbWVhblwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMF9haWRfYXJyXzBfbWluXCIsXG4gICAgICAgICAgICBcImxhdF9kYXRhXzBfdGlkX2Fycl8wX2FpZF9hcnJfMF9waGFzZVwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMF9haWRfYXJyXzBfcW9zXzJuaW5lXCIsXG4gICAgICAgICAgICBcImxhdF9kYXRhXzBfdGlkX2Fycl8wX2FpZF9hcnJfMF9xb3NfM25pbmVcIixcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF90aWRfYXJyXzBfYWlkX2Fycl8wX3Fvc180bmluZVwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMF9haWRfYXJyXzBfc3RkXCIsXG4gICAgICAgICAgICBcImxhdF9kYXRhXzBfdGlkX2Fycl8wX2FpZF9hcnJfMF91cF9xdFwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMF90aWRcIixcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX2FpZFwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfY250X21pc3NfbG93XCIsXG4gICAgICAgICAgICBcImxhdF9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9jbnRfbWlzc191cFwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfY250X3NhbXBsZVwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfbG93X3F0XCIsXG4gICAgICAgICAgICBcImxhdF9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9tYXhcIixcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX21lYW5cIixcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX21pblwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfcGhhc2VcIixcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX3Fvc18ybmluZVwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfcW9zXzNuaW5lXCIsXG4gICAgICAgICAgICBcImxhdF9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9xb3NfNG5pbmVcIixcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX3N0ZFwiLFxuICAgICAgICAgICAgXCJsYXRfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfdXBfcXRcIixcbiAgICAgICAgICAgIFwibGF0X2RhdGFfMF90aWRfYXJyXzFfdGlkXCIsXG4gICAgICAgICAgICBcInBlcmZfZGF0YV8wX2lkXCIsXG4gICAgICAgICAgICBcInBlcmZfZGF0YV8wX3RpZF9hcnJfMF90aWRcIixcbiAgICAgICAgICAgIFwicGVyZl9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9haWRcIixcbiAgICAgICAgICAgIFwicGVyZl9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9id19yZWFkXCIsXG4gICAgICAgICAgICBcInBlcmZfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfYndfdG90YWxcIixcbiAgICAgICAgICAgIFwicGVyZl9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9id193cml0ZVwiLFxuICAgICAgICAgICAgXCJwZXJmX2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX2NudF8xMjhrYlwiLFxuICAgICAgICAgICAgXCJwZXJmX2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX2NudF8xNmtiXCIsXG4gICAgICAgICAgICBcInBlcmZfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfY250XzFrYlwiLFxuICAgICAgICAgICAgXCJwZXJmX2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX2NudF8yNTZrYlwiLFxuICAgICAgICAgICAgXCJwZXJmX2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX2NudF8ya2JcIixcbiAgICAgICAgICAgIFwicGVyZl9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9jbnRfMzJrYlwiLFxuICAgICAgICAgICAgXCJwZXJmX2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX2NudF80a2JcIixcbiAgICAgICAgICAgIFwicGVyZl9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9jbnRfNTEyYlwiLFxuICAgICAgICAgICAgXCJwZXJmX2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX2NudF82NGtiXCIsXG4gICAgICAgICAgICBcInBlcmZfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfY250XzhrYlwiLFxuICAgICAgICAgICAgXCJwZXJmX2RhdGFfMF90aWRfYXJyXzFfYWlkX2Fycl8wX2NudF9iaWdcIixcbiAgICAgICAgICAgIFwicGVyZl9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9jbnRfbm9fYWxpZ25cIixcbiAgICAgICAgICAgIFwicGVyZl9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9pb3BzX3JlYWRcIixcbiAgICAgICAgICAgIFwicGVyZl9kYXRhXzBfdGlkX2Fycl8xX2FpZF9hcnJfMF9pb3BzX3RvdGFsXCIsXG4gICAgICAgICAgICBcInBlcmZfZGF0YV8wX3RpZF9hcnJfMV9haWRfYXJyXzBfaW9wc193cml0ZVwiLFxuICAgICAgICAgICAgXCJwZXJmX2RhdGFfMF90aWRfYXJyXzFfdGlkXCIsXG4gICAgICAgICAgICBcInN0cmVhbWluZ19pbnRlcnZhbFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImFsZXJ0U3ViQ2x1c3RlclwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDEsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiMjAzMDA0NTQxOFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJob3N0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDIsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiL2hvbWUvZGluZXNoL2lib2ZfZGV2ZWxfMTIwNi9pYm9mb3MvYWlyX3Jlc3VsdC5qc29uXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInBhdGhcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJuYW1lXCI6IFwiYWlyXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiX2lkXCI6IDIsXG4gICAgICAgICAgXCJhbGVydEZpZWxkc1wiOiBbXG4gICAgICAgICAgICBcInVzYWdlX2d1ZXN0XCIsXG4gICAgICAgICAgICBcInVzYWdlX2d1ZXN0X25pY2VcIixcbiAgICAgICAgICAgIFwidXNhZ2VfaWRsZVwiLFxuICAgICAgICAgICAgXCJ1c2FnZV9pb3dhaXRcIixcbiAgICAgICAgICAgIFwidXNhZ2VfaXJxXCIsXG4gICAgICAgICAgICBcInVzYWdlX25pY2VcIixcbiAgICAgICAgICAgIFwidXNhZ2Vfc29mdGlycVwiLFxuICAgICAgICAgICAgXCJ1c2FnZV9zdGVhbFwiLFxuICAgICAgICAgICAgXCJ1c2FnZV9zeXN0ZW1cIixcbiAgICAgICAgICAgIFwidXNhZ2VfdXNlclwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImFsZXJ0U3ViQ2x1c3RlclwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDEsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1LXRvdGFsXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTBcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxMFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxMVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxMlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxM1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxNFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxNVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxNlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxN1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxOFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUxOVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHUyXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTIwXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTIxXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTIyXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTIzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTI0XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTI1XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTI2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTI3XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTI4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTI5XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTNcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzBcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzNcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzVcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzdcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzhcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1MzlcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1NFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU0MFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU0MVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU0MlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU0M1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU0NFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU0NVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU0NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU0N1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU1XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiY3B1N1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJjcHU4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImNwdTlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY3B1XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDIsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiMjAzMDA0NTQxOFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJob3N0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwibmFtZVwiOiBcImNwdVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIl9pZFwiOiAzLFxuICAgICAgICAgIFwiYWxlcnRGaWVsZHNcIjogW1xuICAgICAgICAgICAgXCJmcmVlXCIsXG4gICAgICAgICAgICBcImlub2Rlc19mcmVlXCIsXG4gICAgICAgICAgICBcImlub2Rlc190b3RhbFwiLFxuICAgICAgICAgICAgXCJpbm9kZXNfdXNlZFwiLFxuICAgICAgICAgICAgXCJ0b3RhbFwiLFxuICAgICAgICAgICAgXCJ1c2VkXCIsXG4gICAgICAgICAgICBcInVzZWRfcGVyY2VudFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImFsZXJ0U3ViQ2x1c3RlclwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDEsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2RiMVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZGIyXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNkYjVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGV2aWNlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDIsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZXh0NFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJmc3R5cGVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJfaWRcIjogMyxcbiAgICAgICAgICAgICAgXCJhbGVydFR5cGVzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCIyMDMwMDQ1NDE4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcImhvc3RcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJfaWRcIjogNCxcbiAgICAgICAgICAgICAgXCJhbGVydFR5cGVzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJyd1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJtb2RlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDUsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiL1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCIvaG9tZVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCIvdXNyXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcInBhdGhcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGlza1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIl9pZFwiOiA0LFxuICAgICAgICAgIFwiYWxlcnRGaWVsZHNcIjogW1xuICAgICAgICAgICAgXCJpb190aW1lXCIsXG4gICAgICAgICAgICBcImlvcHNfaW5fcHJvZ3Jlc3NcIixcbiAgICAgICAgICAgIFwicmVhZF9ieXRlc1wiLFxuICAgICAgICAgICAgXCJyZWFkX3RpbWVcIixcbiAgICAgICAgICAgIFwicmVhZHNcIixcbiAgICAgICAgICAgIFwid2VpZ2h0ZWRfaW9fdGltZVwiLFxuICAgICAgICAgICAgXCJ3cml0ZV9ieXRlc1wiLFxuICAgICAgICAgICAgXCJ3cml0ZV90aW1lXCIsXG4gICAgICAgICAgICBcIndyaXRlc1wiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImFsZXJ0U3ViQ2x1c3RlclwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDEsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiMjAzMDA0NTQxOFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJob3N0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDIsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwibG9vcDBcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwibG9vcDFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwibG9vcDJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwibnZtZTBuMVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJudm1lMW4xXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm52bWUybjFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwibnZtZTNuMVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZGFcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2RhMVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZGEyXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNkYlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZGIxXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInNkYjJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic2RiM1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzZGI1XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcIm5hbWVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJuYW1lXCI6IFwiZGlza2lvXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiX2lkXCI6IDUsXG4gICAgICAgICAgXCJhbGVydEZpZWxkc1wiOiBbXG4gICAgICAgICAgICBcImJvb3RfdGltZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0X3N3aXRjaGVzXCIsXG4gICAgICAgICAgICBcImVudHJvcHlfYXZhaWxcIixcbiAgICAgICAgICAgIFwiaW50ZXJydXB0c1wiLFxuICAgICAgICAgICAgXCJwcm9jZXNzZXNfZm9ya2VkXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiYWxlcnRTdWJDbHVzdGVyXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJfaWRcIjogMSxcbiAgICAgICAgICAgICAgXCJhbGVydFR5cGVzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCIyMDMwMDQ1NDE4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcImhvc3RcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJuYW1lXCI6IFwia2VybmVsXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiX2lkXCI6IDYsXG4gICAgICAgICAgXCJhbGVydEZpZWxkc1wiOiBbXG4gICAgICAgICAgICBcImFjdGl2ZVwiLFxuICAgICAgICAgICAgXCJhdmFpbGFibGVcIixcbiAgICAgICAgICAgIFwiYXZhaWxhYmxlX3BlcmNlbnRcIixcbiAgICAgICAgICAgIFwiYnVmZmVyZWRcIixcbiAgICAgICAgICAgIFwiY2FjaGVkXCIsXG4gICAgICAgICAgICBcImNvbW1pdF9saW1pdFwiLFxuICAgICAgICAgICAgXCJjb21taXR0ZWRfYXNcIixcbiAgICAgICAgICAgIFwiZGlydHlcIixcbiAgICAgICAgICAgIFwiZnJlZVwiLFxuICAgICAgICAgICAgXCJoaWdoX2ZyZWVcIixcbiAgICAgICAgICAgIFwiaGlnaF90b3RhbFwiLFxuICAgICAgICAgICAgXCJodWdlX3BhZ2Vfc2l6ZVwiLFxuICAgICAgICAgICAgXCJodWdlX3BhZ2VzX2ZyZWVcIixcbiAgICAgICAgICAgIFwiaHVnZV9wYWdlc190b3RhbFwiLFxuICAgICAgICAgICAgXCJpbmFjdGl2ZVwiLFxuICAgICAgICAgICAgXCJsb3dfZnJlZVwiLFxuICAgICAgICAgICAgXCJsb3dfdG90YWxcIixcbiAgICAgICAgICAgIFwibWFwcGVkXCIsXG4gICAgICAgICAgICBcInBhZ2VfdGFibGVzXCIsXG4gICAgICAgICAgICBcInNoYXJlZFwiLFxuICAgICAgICAgICAgXCJzbGFiXCIsXG4gICAgICAgICAgICBcInN3YXBfY2FjaGVkXCIsXG4gICAgICAgICAgICBcInN3YXBfZnJlZVwiLFxuICAgICAgICAgICAgXCJzd2FwX3RvdGFsXCIsXG4gICAgICAgICAgICBcInRvdGFsXCIsXG4gICAgICAgICAgICBcInVzZWRcIixcbiAgICAgICAgICAgIFwidXNlZF9wZXJjZW50XCIsXG4gICAgICAgICAgICBcInZtYWxsb2NfY2h1bmtcIixcbiAgICAgICAgICAgIFwidm1hbGxvY190b3RhbFwiLFxuICAgICAgICAgICAgXCJ2bWFsbG9jX3VzZWRcIixcbiAgICAgICAgICAgIFwid2lyZWRcIixcbiAgICAgICAgICAgIFwid3JpdGVfYmFja1wiLFxuICAgICAgICAgICAgXCJ3cml0ZV9iYWNrX3RtcFwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImFsZXJ0U3ViQ2x1c3RlclwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IDEsXG4gICAgICAgICAgICAgIFwiYWxlcnRUeXBlc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiMjAzMDA0NTQxOFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBcIm5hbWVcIjogXCJob3N0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwibmFtZVwiOiBcIm1lbVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIl9pZFwiOiA3LFxuICAgICAgICAgIFwiYWxlcnRGaWVsZHNcIjogW1xuICAgICAgICAgICAgXCJibG9ja2VkXCIsXG4gICAgICAgICAgICBcImRlYWRcIixcbiAgICAgICAgICAgIFwiaWRsZVwiLFxuICAgICAgICAgICAgXCJwYWdpbmdcIixcbiAgICAgICAgICAgIFwicnVubmluZ1wiLFxuICAgICAgICAgICAgXCJzbGVlcGluZ1wiLFxuICAgICAgICAgICAgXCJzdG9wcGVkXCIsXG4gICAgICAgICAgICBcInRvdGFsXCIsXG4gICAgICAgICAgICBcInRvdGFsX3RocmVhZHNcIixcbiAgICAgICAgICAgIFwidW5rbm93blwiLFxuICAgICAgICAgICAgXCJ6b21iaWVzXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiYWxlcnRTdWJDbHVzdGVyXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJfaWRcIjogMSxcbiAgICAgICAgICAgICAgXCJhbGVydFR5cGVzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCIyMDMwMDQ1NDE4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcImhvc3RcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJuYW1lXCI6IFwicHJvY2Vzc2VzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiX2lkXCI6IDgsXG4gICAgICAgICAgXCJhbGVydEZpZWxkc1wiOiBbXG4gICAgICAgICAgICBcImZyZWVcIixcbiAgICAgICAgICAgIFwiaW5cIixcbiAgICAgICAgICAgIFwib3V0XCIsXG4gICAgICAgICAgICBcInRvdGFsXCIsXG4gICAgICAgICAgICBcInVzZWRcIixcbiAgICAgICAgICAgIFwidXNlZF9wZXJjZW50XCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiYWxlcnRTdWJDbHVzdGVyXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJfaWRcIjogMSxcbiAgICAgICAgICAgICAgXCJhbGVydFR5cGVzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCIyMDMwMDQ1NDE4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcImhvc3RcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJuYW1lXCI6IFwic3dhcFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIl9pZFwiOiA5LFxuICAgICAgICAgIFwiYWxlcnRGaWVsZHNcIjogW1xuICAgICAgICAgICAgXCJsb2FkMVwiLFxuICAgICAgICAgICAgXCJsb2FkMTVcIixcbiAgICAgICAgICAgIFwibG9hZDVcIixcbiAgICAgICAgICAgIFwibl9jcHVzXCIsXG4gICAgICAgICAgICBcIm5fdXNlcnNcIixcbiAgICAgICAgICAgIFwidXB0aW1lXCIsXG4gICAgICAgICAgICBcInVwdGltZV9mb3JtYXRcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJhbGVydFN1YkNsdXN0ZXJcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIl9pZFwiOiAxLFxuICAgICAgICAgICAgICBcImFsZXJ0VHlwZXNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIjIwMzAwNDU0MThcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaG9zdFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBcIm5hbWVcIjogXCJzeXN0ZW1cIlxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuXG4gICAgcmVzcG9uc2UgPSBtb2NrLm9uR2V0KCcvYXBpL3YxLjAvZ2V0X2FsZXJ0X3R5cGVzLycpLnJlcGx5KDIwMCwgZGF0YSk7XG4gIH0pO1xuXG5cbiAgdGVzdCgncmVuZGVycyBhbGVydCB0YWJsZSBjb21wb25lbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9jayA9IG5ldyBNb2NrQWRhcHRlcihheGlvcyk7XG4gICAgamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlMYWJlbFRleHQsIHF1ZXJ5QWxsQnlUZXh0LCBnZXRCeVRpdGxlLCBnZXRBbGxCeVRlc3RJZCwgZ2V0QWxsQnlUaXRsZSwgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCwgZ2V0QWxsQnlUZXh0LCBhc0ZyYWdtZW50IH0gPSB3cmFwcGVyO1xuXG4gICAgZ2V0QnlUZXN0SWQoXCJBbGVydHNUYWJsZVRhZ1wiKTtcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgc2VsZWN0X2lucHV0ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUaXRsZSgnRWRpdCcpWzBdKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzZWxlY3RfaW5wdXQpO1xuXG4gICAgICBzZWxlY3RfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRBbGxCeVRlc3RJZChcIlNlbGVjdEVkaXRUYWdcIilbMF0pO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHNlbGVjdF9pbnB1dCk7XG5cbiAgICAgIC8vIHNlbGVjdF9pbnB1dCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGVzdElkKFwiU2VsZWN0RWRpdE1lbnVJdGVtVGFnXCIpWzBdKTtcbiAgICAgIC8vIGZpcmVFdmVudC5jbGljayhzZWxlY3RfaW5wdXQpO1xuXG4gICAgICAvLyBzZWxlY3RfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRBbGxCeVRlc3RJZChcIlNlbGVjdEVkaXRNZW51SXRlbVRhZ1wiKVswXSk7XG4gICAgICAvLyBmaXJlRXZlbnQuY2hhbmdlKHNlbGVjdF9pbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiTGVzcyBUaGFuXCIgfSB9KTtcbiAgICAgIGxldCBzcHkgPSBqZXN0LnNweU9uKGF4aW9zLCBcInBvc3RcIikubW9ja1JldHVyblZhbHVlKDIwMCk7XG5cbiAgICAgIGZpcmVFdmVudC5jbGljayhnZXRBbGxCeVRpdGxlKCdTYXZlJylbMF0pO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWQoKTsvL3RvSGF2ZSgnL2FwaS92MS4wL3VwZGF0ZV9hbGVydHMvJywgeyBcIl9pZFwiOntcIiRvaWRcIjpcIjVkNWU2N2I3ZjA4MmQ0YzY4Yzk4ZjU4YlwifSxcImFsZXJ0TmFtZVwiOiBcIk5ld0FsZXJ0XCIsIFwiYWxlcnRDbHVzdGVyXCI6IFwiY3B1XCIsIFwiYWxlcnRTdWJDbHVzdGVyXCI6IFwiZGV2aWNlXCIsIFwiYWxlcnRUeXBlXCI6IFwiY3B1LXRvdGFsXCIsIFwiYWxlcnRDb25kaXRpb25cIjogXCJHcmVhdGVyIFRoYW5cIiwgXCJhbGVydEZpZWxkXCI6IFwidXNhZ2Vfc3lzdGVtXCIsIFwiZGVzY3JpcHRpb25cIjogXCJsYXN0XCIsIFwiYWxlcnRSYW5nZVwiOiBcIjEwOVwiLCBcImFjdGl2ZVwiOiB0cnVlLCBcInNlbGVjdGVkXCI6IGZhbHNlLCBcImVkaXRcIjogZmFsc2UgfSx7XCJoZWFkZXJzXCI6IHtcIkFjY2VwdFwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiwgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsIFwieC1hY2Nlc3MtdG9rZW5cIjogbnVsbH19KTtcblxuICAgICAgc2VsZWN0X2lucHV0ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUaXRsZSgnRWRpdCcpWzBdKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzZWxlY3RfaW5wdXQpO1xuXG4gICAgICBzZWxlY3RfaW5wdXRfY2hpbGQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRBbGxCeVRlc3RJZChcIlNlbGVjdEVkaXRUYWdcIilbMF0pO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHNlbGVjdF9pbnB1dF9jaGlsZCk7XG4gICAgICBzcHkgPSBqZXN0LnNweU9uKGF4aW9zLCBcInBvc3RcIikubW9ja1JldHVyblZhbHVlKDIwMCk7XG5cbiAgICAgIGZpcmVFdmVudC5jbGljayhnZXRBbGxCeVRpdGxlKCdTYXZlJylbMF0pO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWQoKTsvL3RvSGF2ZSgnL2FwaS92MS4wL3VwZGF0ZV9hbGVydHMvJywgeyBcIl9pZFwiOntcIiRvaWRcIjpcIjVkNWU2N2I3ZjA4MmQ0YzY4Yzk4ZjU4YlwifSxcImFsZXJ0TmFtZVwiOiBcIk5ld0FsZXJ0XCIsIFwiYWxlcnRDbHVzdGVyXCI6IFwiY3B1XCIsIFwiYWxlcnRTdWJDbHVzdGVyXCI6IFwiZGV2aWNlXCIsIFwiYWxlcnRUeXBlXCI6IFwiY3B1LXRvdGFsXCIsIFwiYWxlcnRDb25kaXRpb25cIjogXCJHcmVhdGVyIFRoYW5cIiwgXCJhbGVydEZpZWxkXCI6IFwidXNhZ2Vfc3lzdGVtXCIsIFwiZGVzY3JpcHRpb25cIjogXCJsYXN0XCIsIFwiYWxlcnRSYW5nZVwiOiBcIjEwOVwiLCBcImFjdGl2ZVwiOiB0cnVlLCBcInNlbGVjdGVkXCI6IGZhbHNlLCBcImVkaXRcIjogZmFsc2UgfSx7XCJoZWFkZXJzXCI6IHtcIkFjY2VwdFwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiwgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsIFwieC1hY2Nlc3MtdG9rZW5cIjogbnVsbH19KTtcblxuICAgICAgc2VsZWN0X2RlbGV0ZSA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGl0bGUoJ0RlbGV0ZScpWzBdKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzZWxlY3RfZGVsZXRlKTtcblxuICAgICAgc3B5ID0gamVzdC5zcHlPbihheGlvcywgXCJwb3N0XCIpLm1vY2tSZXR1cm5WYWx1ZSgyMDApO1xuICAgICAgLy9tb2NrLm9uUG9zdCgpLnJlcGx5KDIwMCk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soZ2V0QWxsQnlUaXRsZSgnU2F2ZScpWzBdKTtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkKCk7Ly90b0hhdmUoJy9hcGkvdjEuMC91cGRhdGVfYWxlcnRzLycsIHsgXCJfaWRcIjp7XCIkb2lkXCI6XCI1ZDVlNjdiN2YwODJkNGM2OGM5OGY1OGJcIn0sXCJhbGVydE5hbWVcIjogXCJOZXdBbGVydFwiLCBcImFsZXJ0Q2x1c3RlclwiOiBcImNwdVwiLCBcImFsZXJ0U3ViQ2x1c3RlclwiOiBcImRldmljZVwiLCBcImFsZXJ0VHlwZVwiOiBcImNwdS10b3RhbFwiLCBcImFsZXJ0Q29uZGl0aW9uXCI6IFwiR3JlYXRlciBUaGFuXCIsIFwiYWxlcnRGaWVsZFwiOiBcInVzYWdlX3N5c3RlbVwiLCBcImRlc2NyaXB0aW9uXCI6IFwibGFzdFwiLCBcImFsZXJ0UmFuZ2VcIjogXCIxMDlcIiwgXCJhY3RpdmVcIjogdHJ1ZSwgXCJzZWxlY3RlZFwiOiBmYWxzZSwgXCJlZGl0XCI6IGZhbHNlIH0se1wiaGVhZGVyc1wiOiB7XCJBY2NlcHRcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLCBcIngtYWNjZXNzLXRva2VuXCI6IG51bGx9fSk7XG5cbiAgICAgIGZpcmVFdmVudC5jbGljayhnZXRBbGxCeVRpdGxlKCdFZGl0JylbMF0pO1xuICAgICAgc3B5ID0gamVzdC5zcHlPbihheGlvcywgXCJwb3N0XCIpO1xuXG4gICAgICBmaXJlRXZlbnQuY2xpY2soZ2V0QWxsQnlUaXRsZSgnU2F2ZScpWzBdKTtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBpbnB1dCA9IGdldEJ5VGVzdElkKFwiQWxlcnRzVGFibGVUYWdcIikucXVlcnlTZWxlY3RvcignYnV0dG9uJylcbiAgICBmaXJlRXZlbnQuY2xpY2soaW5wdXQpO1xuXG4gICAgZmlyZUV2ZW50LmNsaWNrKGdldEFsbEJ5VGVzdElkKFwiU3dpdGNoVGFnXCIpWzBdLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykpO1xuICAgIG1vY2sub25Qb3N0KCcvYXBpL3YxLjAvdG9nZ2xlX2FsZXJ0X3N0YXR1cy8nLCB7IGFsZXJ0TmFtZTogXCJUaGlzaXNBd2Vzb21lXCIsIHN0YXR1czogZmFsc2UgfSkucmVwbHkoeyBcInN0YXR1c1wiOiAyMDAgfSk7XG4gICAgZmlyZUV2ZW50LmNoYW5nZShnZXRBbGxCeVRlc3RJZChcIlN3aXRjaFRhZ1wiKVswXS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLCB7IHRhcmdldDogeyBjaGVja2VkOiB0cnVlLCB2YWx1ZTogXCJTYW1zdW5nIHJvY2tzICMvXCIgfSB9KTtcbiAgICBtb2NrLm9uUG9zdCgpLnJlcGx5KHsgXCJzdGF0dXNcIjogMjAwIH0pO1xuICAgIHNlbGVjdF9zYXZlID0gZ2V0QWxsQnlUaXRsZSgnU2F2ZScpWzBdO1xuICAgIHNlbGVjdF9zd2l0Y2hfdGFnID0gZ2V0QWxsQnlUZXN0SWQoXCJTd2l0Y2hUYWdcIilbMF07XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzZWxlY3RfaW5wdXQpO1xuICAgICAgLy9sZXQgc3B5ID0gamVzdC5zcHlPbihheGlvcywgXCJwb3N0XCIpO1xuICAgICAgbW9jay5vblBvc3QoJy9hcGkvdjEuMC91cGRhdGVfYWxlcnRzLycpLnJlcGx5KHsgXCJzdGF0dXNcIjogMjAwIH0pO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHNlbGVjdF9zYXZlKTtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICAvL2V4cGVjdChzcHkpLnRvQmVDYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBhbGVydCB0YWJsZSBjb21wb25lbnQgc3RhdHVzIDIwMCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgbW9jayA9IG5ldyBNb2NrQWRhcHRlcihheGlvcyk7XG4gICAgamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcbiAgICBjb25zdCB7IGdldEJ5TGFiZWxUZXh0LCBxdWVyeUFsbEJ5VGV4dCwgZ2V0QnlUaXRsZSwgZ2V0QWxsQnlUZXN0SWQsIGdldEFsbEJ5VGl0bGUsIGdldEJ5VGVzdElkLCBnZXRCeVRleHQsIGdldEFsbEJ5VGV4dCwgYXNGcmFnbWVudCB9ID0gd3JhcHBlcjtcbiAgICAvL2dldEJ5VGVzdElkKFwiQWxlcnRNYW5hZ2VtZW50VGFnXCIpO1xuICAgIGdldEJ5VGVzdElkKFwiQWxlcnRzVGFibGVUYWdcIik7XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIC8vc2VsZWN0X2lucHV0ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUaXRsZSgnRWRpdCcpWzBdKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzZWxlY3RfaW5wdXQpO1xuXG4gICAgICAvLyBzZWxlY3RfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRBbGxCeVRlc3RJZChcIlNlbGVjdEVkaXRUYWdcIilbMF0pO1xuICAgICAgLy8gZmlyZUV2ZW50LmNsaWNrKHNlbGVjdF9pbnB1dCk7XG5cbiAgICAgIC8vIHNlbGVjdF9pbnB1dCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGVzdElkKFwiU2VsZWN0RWRpdE1lbnVJdGVtVGFnXCIpWzBdKTtcbiAgICAgIC8vIGZpcmVFdmVudC5jbGljayhzZWxlY3RfaW5wdXQpO1xuXG4gICAgICAvLyBzZWxlY3RfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRBbGxCeVRlc3RJZChcIlNlbGVjdEVkaXRNZW51SXRlbVRhZ1wiKVswXSk7XG4gICAgICAvLyBmaXJlRXZlbnQuY2hhbmdlKHNlbGVjdF9pbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiTGVzcyBUaGFuXCIgfSB9KTtcbiAgICAgIGxldCBzcHkgPSBqZXN0LnNweU9uKGF4aW9zLCBcInBvc3RcIik7XG4gICAgICBtb2NrLm9uUG9zdCgpLnJlcGx5KDIwMCk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soc2VsZWN0X3NhdmUpO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWQoKTsvL3RvSGF2ZSgnL2FwaS92MS4wL3VwZGF0ZV9hbGVydHMvJywgeyBcIl9pZFwiOntcIiRvaWRcIjpcIjVkNWU2N2I3ZjA4MmQ0YzY4Yzk4ZjU4YlwifSxcImFsZXJ0TmFtZVwiOiBcIk5ld0FsZXJ0XCIsIFwiYWxlcnRDbHVzdGVyXCI6IFwiY3B1XCIsIFwiYWxlcnRTdWJDbHVzdGVyXCI6IFwiZGV2aWNlXCIsIFwiYWxlcnRUeXBlXCI6IFwiY3B1LXRvdGFsXCIsIFwiYWxlcnRDb25kaXRpb25cIjogXCJHcmVhdGVyIFRoYW5cIiwgXCJhbGVydEZpZWxkXCI6IFwidXNhZ2Vfc3lzdGVtXCIsIFwiZGVzY3JpcHRpb25cIjogXCJsYXN0XCIsIFwiYWxlcnRSYW5nZVwiOiBcIjEwOVwiLCBcImFjdGl2ZVwiOiB0cnVlLCBcInNlbGVjdGVkXCI6IGZhbHNlLCBcImVkaXRcIjogZmFsc2UgfSx7XCJoZWFkZXJzXCI6IHtcIkFjY2VwdFwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiwgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsIFwieC1hY2Nlc3MtdG9rZW5cIjogbnVsbH19KTtcblxuICAgICAgLy9zZWxlY3RfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRBbGxCeVRpdGxlKCdFZGl0JylbMF0pO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHNlbGVjdF9pbnB1dCk7XG5cbiAgICAgIC8vbGV0IHNlbGVjdF9pbnB1dF9jaGlsZCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGVzdElkKFwiU2VsZWN0RWRpdFRhZ1wiKVswXSk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soc2VsZWN0X2lucHV0X2NoaWxkKTtcbiAgICAgIHNweSA9IGplc3Quc3B5T24oYXhpb3MsIFwicG9zdFwiKTtcblxuICAgICAgZmlyZUV2ZW50LmNsaWNrKHNlbGVjdF9zYXZlKTtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkKCk7Ly90b0hhdmUoJy9hcGkvdjEuMC91cGRhdGVfYWxlcnRzLycsIHsgXCJfaWRcIjp7XCIkb2lkXCI6XCI1ZDVlNjdiN2YwODJkNGM2OGM5OGY1OGJcIn0sXCJhbGVydE5hbWVcIjogXCJOZXdBbGVydFwiLCBcImFsZXJ0Q2x1c3RlclwiOiBcImNwdVwiLCBcImFsZXJ0U3ViQ2x1c3RlclwiOiBcImRldmljZVwiLCBcImFsZXJ0VHlwZVwiOiBcImNwdS10b3RhbFwiLCBcImFsZXJ0Q29uZGl0aW9uXCI6IFwiR3JlYXRlciBUaGFuXCIsIFwiYWxlcnRGaWVsZFwiOiBcInVzYWdlX3N5c3RlbVwiLCBcImRlc2NyaXB0aW9uXCI6IFwibGFzdFwiLCBcImFsZXJ0UmFuZ2VcIjogXCIxMDlcIiwgXCJhY3RpdmVcIjogdHJ1ZSwgXCJzZWxlY3RlZFwiOiBmYWxzZSwgXCJlZGl0XCI6IGZhbHNlIH0se1wiaGVhZGVyc1wiOiB7XCJBY2NlcHRcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLCBcIngtYWNjZXNzLXRva2VuXCI6IG51bGx9fSk7XG5cbiAgICAgIC8vc2VsZWN0X2RlbGV0ZSA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGl0bGUoJ0RlbGV0ZScpWzBdKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhzZWxlY3RfZGVsZXRlKTtcblxuICAgICAgc3B5ID0gamVzdC5zcHlPbihheGlvcywgXCJwb3N0XCIpO1xuICAgICAgbW9jay5vblBvc3QoKS5yZXBseSgyMDApO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHNlbGVjdF9zYXZlKTtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICBleHBlY3Qoc3B5KS50b0JlQ2FsbGVkKCk7Ly90b0hhdmUoJy9hcGkvdjEuMC91cGRhdGVfYWxlcnRzLycsIHsgXCJfaWRcIjp7XCIkb2lkXCI6XCI1ZDVlNjdiN2YwODJkNGM2OGM5OGY1OGJcIn0sXCJhbGVydE5hbWVcIjogXCJOZXdBbGVydFwiLCBcImFsZXJ0Q2x1c3RlclwiOiBcImNwdVwiLCBcImFsZXJ0U3ViQ2x1c3RlclwiOiBcImRldmljZVwiLCBcImFsZXJ0VHlwZVwiOiBcImNwdS10b3RhbFwiLCBcImFsZXJ0Q29uZGl0aW9uXCI6IFwiR3JlYXRlciBUaGFuXCIsIFwiYWxlcnRGaWVsZFwiOiBcInVzYWdlX3N5c3RlbVwiLCBcImRlc2NyaXB0aW9uXCI6IFwibGFzdFwiLCBcImFsZXJ0UmFuZ2VcIjogXCIxMDlcIiwgXCJhY3RpdmVcIjogdHJ1ZSwgXCJzZWxlY3RlZFwiOiBmYWxzZSwgXCJlZGl0XCI6IGZhbHNlIH0se1wiaGVhZGVyc1wiOiB7XCJBY2NlcHRcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLCBcIngtYWNjZXNzLXRva2VuXCI6IG51bGx9fSk7XG5cbiAgICAgIGZpcmVFdmVudC5jbGljayhzZWxlY3RfaW5wdXQpO1xuICAgICAgc3B5ID0gamVzdC5zcHlPbihheGlvcywgXCJwb3N0XCIpO1xuXG4gICAgICBmaXJlRXZlbnQuY2xpY2soc2VsZWN0X3NhdmUpO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGlucHV0ID0gZ2V0QnlUZXN0SWQoXCJBbGVydHNUYWJsZVRhZ1wiKS5xdWVyeVNlbGVjdG9yKCdidXR0b24nKVxuICAgIGZpcmVFdmVudC5jbGljayhpbnB1dCk7XG5cbiAgICBmaXJlRXZlbnQuY2xpY2soc2VsZWN0X3N3aXRjaF90YWcucXVlcnlTZWxlY3RvcignaW5wdXQnKSk7XG4gICAgbW9jay5vblBvc3QoJy9hcGkvdjEuMC90b2dnbGVfYWxlcnRfc3RhdHVzLycsIHsgYWxlcnROYW1lOiBcIlRoaXNpc0F3ZXNvbWVcIiwgc3RhdHVzOiBmYWxzZSB9KS5yZXBseSgyMDApO1xuICAgIGZpcmVFdmVudC5jaGFuZ2Uoc2VsZWN0X3N3aXRjaF90YWcucXVlcnlTZWxlY3RvcignaW5wdXQnKSwgeyB0YXJnZXQ6IHsgY2hlY2tlZDogdHJ1ZSwgdmFsdWU6IFwiU2Ftc3VuZyByb2NrcyAjL1wiIH0gfSk7XG4gICAgbW9jay5vblBvc3QoKS5yZXBseSgyMDApO1xuXG4gIH0pO1xuXG4gIFxuICB0ZXN0KCdyZW5kZXJzIGFsZXJ0IHR5cGVzIGNvbXBvbmVudCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgbW9jayA9IG5ldyBNb2NrQWRhcHRlcihheGlvcyk7XG4gICAgamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcblxuICAgIGNvbnN0IHsgZ2V0QnlMYWJlbFRleHQsIHF1ZXJ5QWxsQnlUZXh0LCBnZXRBbGxCeVRlc3RJZCwgZ2V0QWxsQnlSb2xlLCBnZXRCeVJvbGUsIGdldEJ5VGVzdElkLCBnZXRCeVRleHQsIGdldEFsbEJ5VGV4dCwgYXNGcmFnbWVudCB9ID0gd3JhcHBlcjtcbiAgICBnZXRCeVRlc3RJZChcIkFsZXJ0c1R5cGVzVGFnXCIpO1xuICAgIGdldEFsbEJ5VGVzdElkKFwiQ2x1c3RlclRhZ1wiKVswXTtcbiAgICBsZXQgYWxlcnRfaW5wdXQ7XG4gICAgbGV0IHNweTtcbiAgICBsZXQgeWVzQnRuO1xuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAvL2NvbnN0IHRyZWVfaW5wdXQgPSAgYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlSb2xlKFwidHJlZWl0ZW1cIilbMF0pO1xuICAgICAgY29uc3QgdHJlZV9pbnB1dCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5Um9sZShcInRyZWVpdGVtXCIpWzBdLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayh0cmVlX2lucHV0KTtcbiAgICAgIGNvbnN0IHN1YnRyZWVJdGVtID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlSb2xlKFwic3VidHJlZWl0ZW1cIilbMF0ucXVlcnlTZWxlY3RvcignZGl2JykpO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHN1YnRyZWVJdGVtKTtcbiAgICAgIGNvbnN0IGZvcm1Db250cm9sID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUZXN0SWQoXCJhbGVydFR5cGVzQ2hlY2tib3hcIilbMF0pO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGZvcm1Db250cm9sKTtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZm9ybUNvbnRyb2wsIHsgdGFyZ2V0OiB7IGNoZWNrZWQ6IHRydWUgfSB9KTtcblxuXG4gICAgICAvLyBsZXQgeyBnZXRCeUxhYmVsVGV4dCwgcXVlcnlBbGxCeVRleHQsIGdldEFsbEJ5VGVzdElkLCBnZXRBbGxCeVJvbGUsIGdldEJ5Um9sZSwgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCwgZ2V0QWxsQnlUZXh0LCBhc0ZyYWdtZW50IH0gPSByZW5kZXIoXG4gICAgICAvLyAgIDxJMThuZXh0UHJvdmlkZXIgaTE4bj17aTE4bn0+XG4gICAgICAvLyAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgIC8vICAgICAgICAgICA8QWxlcnRGaWVsZHMgYWxlcnRDbHVzdGVyTGlzdD17YWxlcnRDbHVzdGVyTGlzdH0gcmFkaW9pbmRleD17cmFkaW9pbmRleH0gYWxlcnRDbHVzdGVyTmFtZT17YWxlcnRDbHVzdGVyTmFtZX0gc2VsZWN0ZWRBbGVydFN1YkNsdXN0ZXI9e3NlbGVjdGVkQWxlcnRTdWJDbHVzdGVyfSBhbGVydFR5cGU9e2FsZXJ0VHlwZX0gLz5cbiAgICAgIC8vICAgICAgIDwvUHJvdmlkZXI+XG4gICAgICAvLyAgIDwvSTE4bmV4dFByb3ZpZGVyPik7XG4gICAgICAvL2F3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEJ5TGFiZWxUZXh0KC91c2FnZV9pZGxlL2kpKTtcbiAgICAgIC8vIGNvbnN0IGlucHV0ID0gIGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEJ5Um9sZSgvcmFkaW9ncm91cC9pKSk7XG4gICAgICBjb25zdCBpbnB1dCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGVzdElkKC9hbGVydEZpZWxkUmFkaW9UYWcvaSlbMF0pO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGlucHV0KTtcblxuICAgICAgYWxlcnRfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRCeUxhYmVsVGV4dCgvQWxlcnQgTmFtZS9pKSk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soYWxlcnRfaW5wdXQpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZShhbGVydF9pbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiQWxlcnRcIiB9IH0pO1xuICAgICAgZmlyZUV2ZW50LmtleURvd24oYWxlcnRfaW5wdXQsIHsga2V5OiAnRW50ZXInLCBrZXlDb2RlOiAxMywgY2hhckNvZGU6IDEzIH0pO1xuXG5cbiAgICAgIGxldCBkcm9wZG93bl9pbnB1dCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGVzdElkKFwic2VsZWN0QWRkTmV3QWxlcnRzVGFnXCIpWzBdKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhkcm9wZG93bl9pbnB1dCk7XG5cbiAgICAgIC8vIGxldCBkcm9wZG93bl9lbGVtZW50ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUZXN0SWQoXCJzZWxlY3RNZW51SXRlbUFkZE5ld0FsZXJ0c1RhZ1wiKVswXSk7XG4gICAgICAvLyBmaXJlRXZlbnQuY2xpY2soZHJvcGRvd25fZWxlbWVudCk7XG5cbiAgICAgIC8vIGZpcmVFdmVudC5jaGFuZ2UoZHJvcGRvd25fZWxlbWVudCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiTGVzcyBUaGFuXCIgfSB9KTtcblxuICAgICAgLy9sZXQgdmFsdWVfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRCeUxhYmVsVGV4dCgvVmFsdWUvaSkpO1xuICAgICAgbGV0IHZhbHVlX2lucHV0ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QnlUZXN0SWQoL0FsZXJ0X1JhbmdlX1RleHRGaWVsZC9pKSk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2sodmFsdWVfaW5wdXQpO1xuICAgICAgZmlyZUV2ZW50LmNoYW5nZSh2YWx1ZV9pbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiNjBcIiB9IH0pO1xuICAgICAgZmlyZUV2ZW50LmtleURvd24odmFsdWVfaW5wdXQsIHsga2V5OiAnRW50ZXInLCBrZXlDb2RlOiAxMywgY2hhckNvZGU6IDEzIH0pO1xuXG4gICAgICBsZXQgYnV0dG9uX2lucHV0ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUZXN0SWQoJ0J1dHRvblRhZycpWzBdLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpKTtcbiAgICAgIHNweSA9IGplc3Quc3B5T24oYXhpb3MsIFwicG9zdFwiKTtcbiAgICAgIG1vY2sub25Qb3N0KCcvYXBpL3YxLjAvYWRkX2FsZXJ0LycpLnJlcGx5KDIwMCk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soYnV0dG9uX2lucHV0KTtcbiAgICAgIHllc0J0biA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEJ5VGV4dCgnWWVzJykpO1xuICAgICAgc3B5ID0gamVzdC5zcHlPbihheGlvcywgXCJwb3N0XCIpO1xuICAgICAgbW9jay5vblBvc3QoJy9hcGkvdjEuMC9hZGRfYWxlcnQvJykucmVwbHkoMjAwKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayh5ZXNCdG4pO1xuICAgICAgZXhwZWN0KHNweSkudG9CZUNhbGxlZCgpO1xuXG4gICAgfSk7XG5cbiAgICBmaXJlRXZlbnQuY2xpY2soZ2V0QnlUZXN0SWQoXCJBbGVydHNUeXBlc1RhZ1wiKS5xdWVyeVNlbGVjdG9yKCd1bCcpKTtcblxuICB9KTtcblxuXG5cbiAgdGVzdCgncmVuZGVycyBhZGQgbmV3IGFsZXJ0IGNvbXBvbmVudCBzdGF0dXMgMjAwJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBtb2NrID0gbmV3IE1vY2tBZGFwdGVyKGF4aW9zKTtcbiAgICBqZXN0LnNldFRpbWVvdXQoMzAwMDApO1xuICAgIGNvbnN0IHsgZ2V0QnlMYWJlbFRleHQsIHF1ZXJ5QWxsQnlUZXh0LCBnZXRCeVRpdGxlLCBnZXRBbGxCeVRlc3RJZCwgZ2V0QWxsQnlUaXRsZSwgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCwgZ2V0QWxsQnlUZXh0LCBhc0ZyYWdtZW50IH0gPSB3cmFwcGVyO1xuICAgIGdldEFsbEJ5VGVzdElkKFwiYWRkTmV3QWxlcnRzVGFnXCIpWzBdO1xuICAgIGxldCBhbGVydF9pbnB1dDtcbiAgICBsZXQgc3B5O1xuICAgIGxldCB5ZXNCdG47XG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgIGFsZXJ0X2lucHV0ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QnlMYWJlbFRleHQoL0FsZXJ0IE5hbWUvaSkpO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGFsZXJ0X2lucHV0KTtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoYWxlcnRfaW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiBcIkFsZXJ0XCIgfSB9KTtcbiAgICAgIGZpcmVFdmVudC5rZXlEb3duKGFsZXJ0X2lucHV0LCB7IGtleTogJ0VudGVyJywga2V5Q29kZTogMTMsIGNoYXJDb2RlOiAxMyB9KTtcbiAgICAgIC8vIGFsZXJ0X2lucHV0ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUZXN0SWQoJ0J1dHRvblRhZycpWzBdLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpKTtcbiAgICAgIC8vIGZpcmVFdmVudC5jbGljayhhbGVydF9pbnB1dCk7XG4gICAgICAvLyB5ZXNCdG4gPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRCeVRleHQoJ1llcycpKTtcbiAgICAgIC8vIHNweSA9IGplc3Quc3B5T24oYXhpb3MsIFwicG9zdFwiKTtcbiAgICAgIC8vIG1vY2sub25Qb3N0KCcvYXBpL3YxLjAvYWRkX2FsZXJ0LycpLnJlcGx5KDIwMCk7XG4gICAgICAvLyBmaXJlRXZlbnQuY2xpY2soeWVzQnRuKTtcbiAgICAgIC8vIGV4cGVjdChzcHkpLnRvQmVDYWxsZWQoKTtcblxuICAgICAgLy8gYWxlcnRfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRCeUxhYmVsVGV4dCgvQWxlcnQgTmFtZS9pKSk7XG4gICAgICAvLyBmaXJlRXZlbnQuY2xpY2soYWxlcnRfaW5wdXQpO1xuICAgICAgLy8gZmlyZUV2ZW50LmNoYW5nZShhbGVydF9pbnB1dCwgeyB0YXJnZXQ6IHsgdmFsdWU6IFwiQWxlcnROYW1lXCIgfSB9KTtcbiAgICAgIC8vIGZpcmVFdmVudC5rZXlEb3duKGFsZXJ0X2lucHV0LCB7IGtleTogJ0VudGVyJywga2V5Q29kZTogMTMsIGNoYXJDb2RlOiAxMyB9KTtcblxuICAgICAgLy8gYWxlcnRfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRBbGxCeVRlc3RJZChcImFsZXJ0RmllbGRSYWRpb1RhZ1wiKVswXSk7XG4gICAgICAvLyBmaXJlRXZlbnQuY2xpY2soYWxlcnRfaW5wdXQpO1xuXG4gICAgICBsZXQgZmllbGRfaW5wdXQgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRCeUxhYmVsVGV4dCgvQWxlcnQgRmllbGQvaSkpO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGZpZWxkX2lucHV0KTtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmllbGRfaW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiBcIlVzYWdlX3N5c3RlbVwiIH0gfSk7XG5cbiAgICAgIGxldCBkcm9wZG93bl9pbnB1dCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGVzdElkKFwic2VsZWN0QWRkTmV3QWxlcnRzVGFnXCIpWzBdKTtcbiAgICAgIGZpcmVFdmVudC5jbGljayhkcm9wZG93bl9pbnB1dCk7XG5cbiAgICAgIC8vIGxldCBkcm9wZG93bl9lbGVtZW50ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUZXN0SWQoXCJzZWxlY3RNZW51SXRlbUFkZE5ld0FsZXJ0c1RhZ1wiKVswXSk7XG4gICAgICAvLyBmaXJlRXZlbnQuY2xpY2soZHJvcGRvd25fZWxlbWVudCk7XG5cbiAgICAgIC8vIC8vbGV0IGRyb3Bkb3duX2VsZW1lbnQyID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QWxsQnlUZXN0SWQoXCJzZWxlY3RNZW51SXRlbUFkZE5ld0FsZXJ0c1RhZ1wiKVswXSk7XG4gICAgICAvLyBmaXJlRXZlbnQuY2hhbmdlKGRyb3Bkb3duX2VsZW1lbnQsIHsgdGFyZ2V0OiB7IHZhbHVlOiBcIkxlc3MgVGhhblwiIH0gfSk7XG5cbiAgICAgIC8vbGV0IHZhbHVlX2lucHV0ID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT4gZ2V0QnlMYWJlbFRleHQoL1ZhbHVlL2kpKTtcbiAgICAgIGxldCB2YWx1ZV9pbnB1dCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEJ5VGVzdElkKC9BbGVydF9SYW5nZV9UZXh0RmllbGQvaSkpO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKHZhbHVlX2lucHV0KTtcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UodmFsdWVfaW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiBcIjYwXCIgfSB9KTtcbiAgICAgIGZpcmVFdmVudC5rZXlEb3duKHZhbHVlX2lucHV0LCB7IGtleTogJ0VudGVyJywga2V5Q29kZTogMTMsIGNoYXJDb2RlOiAxMyB9KTtcblxuICAgICAgbGV0IGJ1dHRvbl9pbnB1dCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+IGdldEFsbEJ5VGVzdElkKCdCdXR0b25UYWcnKVswXS5xdWVyeVNlbGVjdG9yKCdidXR0b24nKSk7XG4gICAgICBzcHkgPSBqZXN0LnNweU9uKGF4aW9zLCBcInBvc3RcIik7XG4gICAgICBtb2NrLm9uUG9zdCgnL2FwaS92MS4wL2FkZF9hbGVydC8nKS5yZXBseSgyMDApO1xuICAgICAgZmlyZUV2ZW50LmNsaWNrKGJ1dHRvbl9pbnB1dCk7XG4gICAgICB5ZXNCdG4gPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBnZXRCeVRleHQoJ1llcycpKTtcbiAgICAgIHNweSA9IGplc3Quc3B5T24oYXhpb3MsIFwicG9zdFwiKTtcbiAgICAgIG1vY2sub25Qb3N0KCcvYXBpL3YxLjAvYWRkX2FsZXJ0LycpLnJlcGx5KDIwMCk7XG4gICAgICBmaXJlRXZlbnQuY2xpY2soeWVzQnRuKTtcbiAgICAgIGV4cGVjdChzcHkpLnRvQmVDYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgncmVuZGVycyBhbGVydCBtYW5hZ2VtZW50IGNvbnRhaW5lcicsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBhc0ZyYWdtZW50IH0gPSB3cmFwcGVyO1xuICAgIGV4cGVjdChhc0ZyYWdtZW50KCkpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIGdldEJ5VGVzdElkKCdhbGVydE1hbmFnZW1lbnRUYWcnKVxuICB9KTtcblxuXG59KTsiXX0=