3f31fcac00706d90babe0240dac326f3
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateUsersInfo = updateUsersInfo;
exports.deleteUsersInfo = deleteUsersInfo;
exports.toggleUsersInfo = toggleUsersInfo;
exports.userManagementUserTableWatcher = userManagementUserTableWatcher;

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

var _userManagementSaga = require("./userManagementSaga");

/* -------------------------------------------------------------------------------------/
                                                                                    /
/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /
/                          ALL RIGHTS RESERVED                                        /
/                                                                                     /
/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /
/   products to use or abstract this computer program for the sole purpose of         /
/   implementing a product based on Samsung Electronics Co., Ltd. products.           /
/   No other rights to reproduce, use, or disseminate this computer program,          /
/   whether in part or in whole, are granted.                                         / 
/                                                                                     /
/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /
/   respect to the performance of this computer program, and specifically disclaims   /
/   any responsibility for any damages, special or consequential, connected           /
/   with the use of this program.                                                     /
/                                                                                     /
/-------------------------------------------------------------------------------------/


DESCRIPTION: <Contains Generator Functions for User Table component> *
@NAME : userManagementUserTableSaga.js
@AUTHORS: Jay Hitesh Sanghavi 
@Version : 1.0 *
@REVISION HISTORY
[03/06/2019] [Jay] : Prototyping..........////////////////////
*/
function* updateUsersInfo(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/update_user/', action.newUsers, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield (0, _userManagementSaga.fetchUsersInfo)();
    } else yield actionCreators.openAlertBox({
      alerttitle: 'Update User',
      alertOpen: true,
      alertdescription: 'User updation failed',
      alerttype: 'alert',
      istypealert: false
    });
  } catch (error) {
    ;
  }
}

function* deleteUsersInfo(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/delete_users/', action.deleteUsers, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status !== 200) {
      yield actionCreators.openAlertBox({
        alerttitle: 'Delete User',
        alertOpen: true,
        alertdescription: 'User deletion failed',
        alerttype: 'alert',
        istypealert: false
      });
    } else if (status === 200) yield (0, _userManagementSaga.fetchUsersInfo)();
  } catch (error) {
    ;
  }
}

function* toggleUsersInfo(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/toggle_status/', action.toggleUsers, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield (0, _userManagementSaga.fetchUsersInfo)();
    } else yield actionCreators.openAlertBox({
      alerttitle: 'Toggle User',
      alertOpen: true,
      alertdescription: 'Admin Cannot be Deactivated',
      alerttype: 'alert',
      istypealert: false
    });
  } catch (error) {
    ;
  }
}

function* userManagementUserTableWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_USER_MANAGEMENT_UPDATE_USERS, updateUsersInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_USER_MANAGEMENT_DELETE_USERS, deleteUsersInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_USER_MANAGEMENT_TOGGLE_USERS, toggleUsersInfo);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJNYW5hZ2VtZW50VXNlclRhYmxlU2FnYS5qcyJdLCJuYW1lcyI6WyJ1cGRhdGVVc2Vyc0luZm8iLCJhY3Rpb24iLCJyZXNwb25zZSIsImF4aW9zIiwicG9zdCIsIm5ld1VzZXJzIiwiaGVhZGVycyIsIkFjY2VwdCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzdGF0dXMiLCJhY3Rpb25DcmVhdG9ycyIsIm9wZW5BbGVydEJveCIsImFsZXJ0dGl0bGUiLCJhbGVydE9wZW4iLCJhbGVydGRlc2NyaXB0aW9uIiwiYWxlcnR0eXBlIiwiaXN0eXBlYWxlcnQiLCJlcnJvciIsImRlbGV0ZVVzZXJzSW5mbyIsImRlbGV0ZVVzZXJzIiwidG9nZ2xlVXNlcnNJbmZvIiwidG9nZ2xlVXNlcnMiLCJ1c2VyTWFuYWdlbWVudFVzZXJUYWJsZVdhdGNoZXIiLCJhY3Rpb25UeXBlcyIsIlNBR0FfVVNFUl9NQU5BR0VNRU5UX1VQREFURV9VU0VSUyIsIlNBR0FfVVNFUl9NQU5BR0VNRU5UX0RFTEVURV9VU0VSUyIsIlNBR0FfVVNFUl9NQU5BR0VNRU5UX1RPR0dMRV9VU0VSUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUEwQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBOUJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdDTyxVQUFVQSxlQUFWLENBQTBCQyxNQUExQixFQUFrQztBQUNyQyxNQUFJO0FBQ0EsVUFBTUMsUUFBUSxHQUFHLE1BQU0sbUJBQUssQ0FBQ0MsY0FBRCxFQUFRQSxlQUFNQyxJQUFkLENBQUwsRUFBMEIsd0JBQTFCLEVBQW9ESCxNQUFNLENBQUNJLFFBQTNELEVBQXFFO0FBQ3hGQyxNQUFBQSxPQUFPLEVBQUU7QUFDTEMsUUFBQUEsTUFBTSxFQUFFLGtCQURIO0FBRUwsd0JBQWdCLGtCQUZYO0FBR0wsMEJBQWtCQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsT0FBckI7QUFIYjtBQUQrRSxLQUFyRSxDQUF2QjtBQURBLFVBUVFD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TjtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICBDT1BZUklHSFQgKGMpIDIwMTkgU0FNU1VORyBFTEVDVFJPTklDUyBDTy4sIExURC4gICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgQUxMIFJJR0hUUyBSRVNFUlZFRCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkIHRvIGxpY2Vuc2VlcyBvZiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiAgICAgICAgL1xuLyAgIHByb2R1Y3RzIHRvIHVzZSBvciBhYnN0cmFjdCB0aGlzIGNvbXB1dGVyIHByb2dyYW0gZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgICAgICAgICAvXG4vICAgaW1wbGVtZW50aW5nIGEgcHJvZHVjdCBiYXNlZCBvbiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBwcm9kdWN0cy4gICAgICAgICAgIC9cbi8gICBObyBvdGhlciByaWdodHMgdG8gcmVwcm9kdWNlLCB1c2UsIG9yIGRpc3NlbWluYXRlIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgICAgICAgICAgL1xuLyAgIHdoZXRoZXIgaW4gcGFydCBvciBpbiB3aG9sZSwgYXJlIGdyYW50ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIFxuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gbWFrZXMgbm8gcmVwcmVzZW50YXRpb24gb3Igd2FycmFudGllcyB3aXRoICAgICAgICAgIC9cbi8gICByZXNwZWN0IHRvIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIGNvbXB1dGVyIHByb2dyYW0sIGFuZCBzcGVjaWZpY2FsbHkgZGlzY2xhaW1zICAgL1xuLyAgIGFueSByZXNwb25zaWJpbGl0eSBmb3IgYW55IGRhbWFnZXMsIHNwZWNpYWwgb3IgY29uc2VxdWVudGlhbCwgY29ubmVjdGVkICAgICAgICAgICAvXG4vICAgd2l0aCB0aGUgdXNlIG9mIHRoaXMgcHJvZ3JhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG5cblxuREVTQ1JJUFRJT046IDxDb250YWlucyBHZW5lcmF0b3IgRnVuY3Rpb25zIGZvciBVc2VyIFRhYmxlIGNvbXBvbmVudD4gKlxuQE5BTUUgOiB1c2VyTWFuYWdlbWVudFVzZXJUYWJsZVNhZ2EuanNcbkBBVVRIT1JTOiBKYXkgSGl0ZXNoIFNhbmdoYXZpIFxuQFZlcnNpb24gOiAxLjAgKlxuQFJFVklTSU9OIEhJU1RPUllcblswMy8wNi8yMDE5XSBbSmF5XSA6IFByb3RvdHlwaW5nLi4uLi4uLi4uLi8vLy8vLy8vLy8vLy8vLy8vLy8vXG4qL1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IGNhbGwsIHRha2VFdmVyeSB9IGZyb20gJ3JlZHV4LXNhZ2EvZWZmZWN0cyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25UeXBlcyBmcm9tIFwiLi4vc3RvcmUvYWN0aW9ucy9hY3Rpb25UeXBlc1wiO1xuaW1wb3J0ICogYXMgYWN0aW9uQ3JlYXRvcnMgZnJvbSBcIi4uL3N0b3JlL2FjdGlvbnMvZXhwb3J0QWN0aW9uQ3JlYXRvcnNcIjtcbmltcG9ydCB7IGZldGNoVXNlcnNJbmZvIH0gZnJvbSBcIi4vdXNlck1hbmFnZW1lbnRTYWdhXCJcblxuZXhwb3J0IGZ1bmN0aW9uKiB1cGRhdGVVc2Vyc0luZm8oYWN0aW9uKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBjYWxsKFtheGlvcywgYXhpb3MucG9zdF0sICcvYXBpL3YxLjAvdXBkYXRlX3VzZXIvJywgYWN0aW9uLm5ld1VzZXJzLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IHN0YXR1cyB9ID0gcmVzcG9uc2U7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgeWllbGQgZmV0Y2hVc2Vyc0luZm8oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHlpZWxkIGFjdGlvbkNyZWF0b3JzLm9wZW5BbGVydEJveCh7XG4gICAgICAgICAgICBhbGVydHRpdGxlOiAnVXBkYXRlIFVzZXInLFxuICAgICAgICAgICAgYWxlcnRPcGVuOiB0cnVlLFxuICAgICAgICAgICAgYWxlcnRkZXNjcmlwdGlvbjogJ1VzZXIgdXBkYXRpb24gZmFpbGVkJyxcbiAgICAgICAgICAgIGFsZXJ0dHlwZTogJ2FsZXJ0JyxcbiAgICAgICAgICAgIGlzdHlwZWFsZXJ0OiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICA7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24qIGRlbGV0ZVVzZXJzSW5mbyhhY3Rpb24pIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkIGNhbGwoW2F4aW9zLCBheGlvcy5wb3N0XSwgJy9hcGkvdjEuMC9kZWxldGVfdXNlcnMvJywgYWN0aW9uLmRlbGV0ZVVzZXJzLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IHN0YXR1cyB9ID0gcmVzcG9uc2U7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgeWllbGQgYWN0aW9uQ3JlYXRvcnMub3BlbkFsZXJ0Qm94KHtcbiAgICAgICAgICAgICAgICBhbGVydHRpdGxlOiAnRGVsZXRlIFVzZXInLFxuICAgICAgICAgICAgICAgIGFsZXJ0T3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGVydGRlc2NyaXB0aW9uOiAnVXNlciBkZWxldGlvbiBmYWlsZWQnLFxuICAgICAgICAgICAgICAgIGFsZXJ0dHlwZTogJ2FsZXJ0JyxcbiAgICAgICAgICAgICAgICBpc3R5cGVhbGVydDogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT09IDIwMClcbiAgICAgICAgICAgIHlpZWxkIGZldGNoVXNlcnNJbmZvKCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICA7XG4gICAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiogdG9nZ2xlVXNlcnNJbmZvKGFjdGlvbikge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgY2FsbChbYXhpb3MsIGF4aW9zLnBvc3RdLCAnL2FwaS92MS4wL3RvZ2dsZV9zdGF0dXMvJywgYWN0aW9uLnRvZ2dsZVVzZXJzLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IHN0YXR1cyB9ID0gcmVzcG9uc2U7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgeWllbGQgZmV0Y2hVc2Vyc0luZm8oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHlpZWxkIGFjdGlvbkNyZWF0b3JzLm9wZW5BbGVydEJveCh7XG4gICAgICAgICAgICBhbGVydHRpdGxlOiAnVG9nZ2xlIFVzZXInLFxuICAgICAgICAgICAgYWxlcnRPcGVuOiB0cnVlLFxuICAgICAgICAgICAgYWxlcnRkZXNjcmlwdGlvbjogJ0FkbWluIENhbm5vdCBiZSBEZWFjdGl2YXRlZCcsXG4gICAgICAgICAgICBhbGVydHR5cGU6ICdhbGVydCcsXG4gICAgICAgICAgICBpc3R5cGVhbGVydDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiB1c2VyTWFuYWdlbWVudFVzZXJUYWJsZVdhdGNoZXIoKSB7XG4gICAgeWllbGQgdGFrZUV2ZXJ5KGFjdGlvblR5cGVzLlNBR0FfVVNFUl9NQU5BR0VNRU5UX1VQREFURV9VU0VSUywgdXBkYXRlVXNlcnNJbmZvKTtcbiAgICB5aWVsZCB0YWtlRXZlcnkoYWN0aW9uVHlwZXMuU0FHQV9VU0VSX01BTkFHRU1FTlRfREVMRVRFX1VTRVJTLCBkZWxldGVVc2Vyc0luZm8pO1xuICAgIHlpZWxkIHRha2VFdmVyeShhY3Rpb25UeXBlcy5TQUdBX1VTRVJfTUFOQUdFTUVOVF9UT0dHTEVfVVNFUlMsIHRvZ2dsZVVzZXJzSW5mbyk7XG59XG4iXX0=