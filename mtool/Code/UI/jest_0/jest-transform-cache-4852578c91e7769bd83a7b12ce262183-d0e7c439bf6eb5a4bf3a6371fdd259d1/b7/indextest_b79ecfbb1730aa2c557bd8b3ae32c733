6e2d3064a65bde60cf1abe24ad267765
"use strict";

jest.unmock("axios");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactRedux = require("react-redux");

var _testUtils = require("react-dom/test-utils");

var _reactI18next = require("react-i18next");

var _axios = _interopRequireDefault(require("axios"));

require("@testing-library/jest-dom/extend-expect");

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _history = require("history");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _indexSaga = _interopRequireDefault(require("../../sagas/indexSaga"));

var _headerReducer = _interopRequireDefault(require("../../store/reducers/headerReducer"));

var _performanceReducer = _interopRequireDefault(require("../../store/reducers/performanceReducer"));

var _storageReducer = _interopRequireDefault(require("../../store/reducers/storageReducer"));

var _hardwareSensorReducer = _interopRequireDefault(require("../../store/reducers/hardwareSensorReducer"));

var _configurationsettingReducer = _interopRequireDefault(require("../../store/reducers/configurationsettingReducer"));

var _BMCAuthenticationReducer = _interopRequireDefault(require("../../store/reducers/BMCAuthenticationReducer"));

var _index = _interopRequireDefault(require("./index"));

var _i18n = _interopRequireDefault(require("../../i18n"));

var _performanceSaga = require("../../sagas/performanceSaga");

var _testingUtils = require("@redux-saga/testing-utils");

var actionTypes = _interopRequireWildcard(require("../../store/actions/actionTypes"));

var _effects = require("redux-saga/effects");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/Performance/index.test.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

describe("Performance", () => {
  let wrapper;
  let history;
  let store;
  let mock;
  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      // headerLanguageReducer,
      headerReducer: _headerReducer.default,
      performanceReducer: _performanceReducer.default,
      storageReducer: _storageReducer.default,
      configurationsettingReducer: _configurationsettingReducer.default,
      hardwareSensorReducer: _hardwareSensorReducer.default,
      BMCAuthenticationReducer: _BMCAuthenticationReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = "/";
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    });
    mock = new _axiosMockAdapter.default(_axios.default);
  });

  const renderComponent = () => {
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 106
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 107
      },
      __self: void 0
    }, " ", _react.default.createElement(_index.default, {
      level: "volume",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 109
      },
      __self: void 0
    })))));
  };

  afterEach(_react2.cleanup);
  it("renders array level graphs for last 1m", async () => {
    mock.onGet(`/api/v1.0/iops_read/1m/array`).reply(200, {
      res: [{
        time: 12345,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 0,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 0
      }, {
        time: 12346,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 0,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 0
      }, {
        time: 12347,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 0,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 0
      }, {
        time: 12348,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 0,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 0
      }],
      aid: [{
        perf_data_0_tid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid: 1
      }]
    }).onGet(`/api/v1.0/iops_write/1m/array`).reply(200, {
      res: [{
        time: 123456,
        perf_data_0_tid_arr_0_aid_arr_0_iops_write: 0,
        perf_data_1_tid_arr_1_aid_arr_1_iops_write: 0
      }],
      aid: [{
        perf_data_0_tid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid: 1
      }]
    }).onGet(`/api/v1.0/bw_read/1m/array`).reply(200, {
      res: [{
        time: 123456,
        perf_data_0_tid_arr_0_aid_arr_0_bw_read: 0,
        perf_data_1_tid_arr_1_aid_arr_1_bw_read: 0
      }],
      aid: [{
        perf_data_0_tid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid: 1
      }]
    }).onGet(`/api/v1.0/latency/1m/array`).reply(200, {
      res: [{
        time: 123456,
        lat_data_0_tid_arr_0_aid_arr_0_timelag_arr_0_mean: 0,
        lat_data_1_tid_arr_1_aid_arr_1_timelag_arr_0_mean: 0
      }],
      aid: [{
        lat_data_0_tid_arr_0_aid_arr_0_aid: 0,
        lat_data_1_tid_arr_1_aid_arr_1_aid: 1
      }]
    }).onGet(`/api/v1.0/bw_write/1m/array`).reply(200, {
      res: [{
        time: 123456,
        perf_data_0_tid_arr_0_aid_arr_0_bw_write: 0,
        perf_data_1_tid_arr_1_aid_arr_1_bw_write: 0
      }],
      aid: [{
        perf_data_0_tid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid: 1
      }]
    });
    renderComponent();
    const _wrapper = wrapper,
          asFragment = _wrapper.asFragment,
          getByTestId = _wrapper.getByTestId;
    await (0, _testUtils.act)(async () => {
      await (0, _react2.waitForElement)(() => getByTestId("readBandwidth")); //   global.document = {
      //       ...global.document,
      //     getElementsByTagName: () => {
      //         return [{
      //             getBoundingClientRect: () => {
      //                 return {
      //                     left: 100,
      //                     right: 500
      //                 }
      //             }
      //         }]
      //     }
      //   }

      const readBandwidthScatter = await (0, _react2.waitForElement)(() => getByTestId("readBandwidthScatter")); //  fireEvent.mouseOver(readBandwidthScatter, {target: { getBoundingClientRect: () => {return {left: 100}}}});

      _react2.fireEvent.mouseOver(readBandwidthScatter);

      _react2.fireEvent.mouseOut(readBandwidthScatter);

      await new Promise(resolve => setInterval(resolve, 2000));
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("displays array level details for last 7 days", async () => {
    mock.onGet(`/api/v1.0/iops_read/7d/array`).reply(200, {
      res: [{
        time: 12345,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 456,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 123
      }],
      aid: [{
        perf_data_0_tid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid: 1
      }]
    }).onGet(`/api/v1.0/iops_write/7d/array`).reply(200, {
      res: [{
        time: 123456,
        perf_data_0_tid_arr_0_aid_arr_0_iops_write: 872,
        perf_data_1_tid_arr_1_aid_arr_1_iops_write: 127
      }],
      aid: [{
        perf_data_0_tid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid: 1
      }]
    }).onGet(`/api/v1.0/bw_read/7d/array`).reply(200, {
      res: [{
        time: 123456,
        perf_data_0_tid_arr_0_aid_arr_0_bw_read: 122,
        perf_data_1_tid_arr_1_aid_arr_1_bw_read: 187
      }],
      aid: [{
        perf_data_0_tid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid: 1
      }]
    }).onGet(`/api/v1.0/latency/7d/array`).reply(200, {
      res: [{
        time: 12345,
        lat_data_0_tid_arr_0_aid_arr_0_timelag_arr_0_mean: 456,
        lat_data_1_tid_arr_1_aid_arr_1_timelag_arr_0_mean: 123
      }],
      aid: [{
        lat_data_0_tid_arr_0_aid_arr_0_aid: 0,
        lat_data_1_tid_arr_1_aid_arr_1_aid: 1
      }]
    }).onGet(`/api/v1.0/bw_write/7d/array`).reply(200, {
      res: [{
        time: 123456,
        perf_data_0_tid_arr_0_aid_arr_0_bw_write: 622,
        perf_data_1_tid_arr_1_aid_arr_1_bw_write: 197
      }],
      aid: [{
        perf_data_0_tid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid: 1
      }]
    });
    await (0, _testUtils.act)(async () => {
      renderComponent();
    });
    const _wrapper2 = wrapper,
          getByTestId = _wrapper2.getByTestId;
    await (0, _testUtils.act)(async () => {
      const intervalSelect = await (0, _react2.waitForElement)(() => getByTestId("intervalSelect"));

      _react2.fireEvent.click(intervalSelect); // const lastSevenDay = await waitForElement(() => getByTestId("7d"));
      // fireEvent.click(lastSevenDay);
      // const intervalInput = await waitForElement(() =>
      //   getByTestId("timeInput")
      // );
      // expect(intervalInput.value).toBe("7d");

    });
  });
  it("displays array level details 1", async () => {
    mock.onGet(`/api/v1.0/disk_used_percent/1m/array`).reply(200, [{
      used_percent: 10,
      time: 789
    }]).onGet(`/api/v1.0/disk_write_mbps/1m/array`).reply(200, [{
      write_megabytes_per_second: 100,
      time: 786
    }]).onGet(`/api/v1.0/usage_user/1m`).reply(200, [{
      mean_usage_user: 50,
      time: 886
    }]);
  });
  it("displays array level details 2", async () => {
    await (0, _testUtils.act)(async () => {
      renderComponent();
    });
    const _wrapper3 = wrapper,
          getByTestId = _wrapper3.getByTestId,
          getAllByText = _wrapper3.getAllByText;
    await (0, _testUtils.act)(async () => {
      const levelSelect = await (0, _react2.waitForElement)(() => getByTestId("levelSelect"));

      _react2.fireEvent.click(levelSelect);

      const arrayMenuItem = await (0, _react2.waitForElement)(() => getAllByText("Array")[0]);

      _react2.fireEvent.click(arrayMenuItem);

      const levelInput = await (0, _react2.waitForElement)(() => getByTestId("levelInput"));
      expect(levelInput.value).toBe("array");
    });
  });
  it("displays volume level details", async () => {
    mock.onGet(`/api/v1.0/iops_read/1m/1`).reply(200, {
      res: [{
        time: 12345,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 0,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 0,
        perf_data_0_tid_arr_0_aid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid_arr_1_aid: 1
      }, {
        time: 12346,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 0,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 0,
        perf_data_0_tid_arr_0_aid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid_arr_1_aid: 1
      }, {
        time: 12347,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 0,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 0,
        perf_data_0_tid_arr_0_aid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid_arr_1_aid: 1
      }, {
        time: 12348,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 0,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 0,
        perf_data_0_tid_arr_0_aid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid_arr_1_aid: 1
      }, {
        time: 12349,
        perf_data_0_tid_arr_0_aid_arr_0_iops_read: 111,
        perf_data_1_tid_arr_1_aid_arr_1_iops_read: 12,
        perf_data_0_tid_arr_0_aid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid_arr_1_aid: 1
      }],
      aid: [{
        perf_data_0_tid_arr_0_aid_arr_0_aid: 0,
        perf_data_1_tid_arr_1_aid_arr_1_aid: 1
      }]
    }).onGet(`/api/v1.0/iops_write/1m/1`).reply(200, {
      res: []
    }).onGet("/api/v1.0/get_volumes/").reply(200, [{
      name: "vol1",
      size: "10",
      unit: "GB",
      usedspace: 8,
      ip: "107.101.123.123",
      subnqn: "NA",
      status: "Active",
      id: 1
    }, {
      name: "vol2",
      size: "5",
      unit: "GB",
      usedspace: 8,
      ip: "108.101.123.123",
      subnqn: "NA",
      status: "Active",
      id: 2
    }]);
    await (0, _testUtils.act)(async () => {
      renderComponent();
    });
    const _wrapper4 = wrapper,
          getByTestId = _wrapper4.getByTestId;
    await (0, _testUtils.act)(async () => {
      const levelSelect = await (0, _react2.waitForElement)(() => getByTestId("levelSelect"));

      _react2.fireEvent.click(levelSelect); // const volumeMenuItem = await waitForElement(() =>
      //   getByTestId("volumeMenuItem")
      // );
      // fireEvent.click(volumeMenuItem);
      // const levelInput = await waitForElement(() => getByTestId("levelInput"));
      // expect(levelInput.value).toBe("volume");
      // const volumeSelect = await waitForElement(() =>
      //   getByTestId("volumeSelect")
      // );
      // fireEvent.click(volumeSelect);
      // const volumeId = await waitForElement(() => getByTestId("vol1"));
      // fireEvent.click(volumeId);
      // const volumeInput = await waitForElement(() =>
      //   getByTestId("volumeInput")
      // );
      // expect(volumeInput.value).toBe("1");

    });
  });
  it("displays system level details", async () => {
    global.document = _objectSpread({}, global.document, {
      getElementById: () => {
        return {
          clientWidth: 700
        };
      }
    });
    mock.onGet(`/api/v1.0/disk_used_percent/1m/array`).reply(200, [{
      used_percent: 10,
      time: 789
    }]).onGet(`/api/v1.0/disk_write_mbps/1m/array`).reply(200, [{
      write_megabytes_per_second: 100,
      time: 786
    }]).onGet(`/api/v1.0/usage_user/1m`).reply(200, [{
      mean_usage_user: 50,
      time: 886
    }]);
    await (0, _testUtils.act)(async () => {
      renderComponent();
    });
    const _wrapper5 = wrapper,
          getByTestId = _wrapper5.getByTestId;
    await (0, _testUtils.act)(async () => {
      const levelSelect = await (0, _react2.waitForElement)(() => getByTestId("levelSelect"));

      _react2.fireEvent.click(levelSelect); // const systemMenuItem = await waitForElement(() =>
      //   getByTestId("systemMenuItem")
      // );
      // fireEvent.click(systemMenuItem);
      // const levelInput = await waitForElement(() => getByTestId("levelInput"));
      // expect(levelInput.value).toBe("system");

    });
  });
  it("shouldn't display any array/volume level data", async () => {
    mock.onGet(`/api/v1.0/iops_read/1m/array`).reply(200, {
      message: 10
    }).onGet(`/api/v1.0/iops_write/1m/array`).reply(200, {
      message: 10
    }).onGet(`/api/v1.0/bw_read/1m/array`).reply(200, {
      message: 10
    }).onGet(`/api/v1.0/latency/1m/array`).reply(200, {
      message: 10
    }).onGet(`/api/v1.0/bw_write/1m/array`).reply(200, {
      message: 10
    });
    renderComponent(); //   await act(async () => {
    //   });

    const _wrapper6 = wrapper,
          asFragment = _wrapper6.asFragment,
          getByTestId = _wrapper6.getByTestId;
  });
  it("doesn't display system level details", async () => {
    global.document = _objectSpread({}, global.document, {
      getElementById: () => {
        return {
          clientWidth: 700
        };
      }
    });
    mock.onGet(`/api/v1.0/disk_used_percent/1m/array`).reply(200, {
      message: 10
    }).onGet(`/api/v1.0/disk_write_mbps/1m/array`).reply(200, {
      message: 10
    }).onGet(`/api/v1.0/usage_user/1m`).reply(200, {
      message: 10
    });
    await (0, _testUtils.act)(async () => {
      renderComponent();
    });
    const _wrapper7 = wrapper,
          getByTestId = _wrapper7.getByTestId;
    await (0, _testUtils.act)(async () => {
      const levelSelect = await (0, _react2.waitForElement)(() => getByTestId("levelSelect"));

      _react2.fireEvent.click(levelSelect); // const systemMenuItem = await waitForElement(() =>
      //   getByTestId("systemMenuItem")
      // );
      //fireEvent.click(systemMenuItem);
      // const levelInput = await waitForElement(() => getByTestId("levelInput"));
      // expect(levelInput.value).toBe("system");

    });
  }); // it("cancels the yield", async () => {
  //   let gen = fetchReadBandwidth({payload: {level: 'array', time: '1m'}});
  //   expect(gen.next().value).toEqual(
  //     call([axios, axios.get], '/api/v1.0/bw_read/1m/array')
  //   );
  //   expect(gen.return().value).toEqual(cancelled());
  //   expect(gen.next(true).value.payload.action).toEqual({
  //     bw: [],
  //     type: actionTypes.FETCH_READ_BANDWIDTH
  //   });
  //   console.log(fetchWriteBandwidth);
  //   gen = fetchWriteBandwidth({payload: {level: 'array', time: '1m'}});
  //   expect(gen.next().value).toEqual(
  //     put({
  //       bw: [],
  //       type: actionTypes.FETCH_WRITE_BANDWIDTH
  //     })
  //   );
  //   expect(gen.return().value).toEqual(cancelled());
  //   expect(gen.next(true).value.payload.action).toEqual({
  //     bw: [],
  //     type: actionTypes.FETCH_WRITE_BANDWIDTH
  //   });
  //   gen = fetchReadIops();
  //   expect(gen.next().value).toEqual(
  //     put({
  //       iops: [],
  //       type: actionTypes.FETCH_READ_IOPS
  //     })
  //   );
  //   expect(gen.return().value).toEqual(cancelled());
  //   expect(gen.next(true).value.payload.action).toEqual({
  //     iops: [],
  //     type: actionTypes.FETCH_READ_IOPS
  //   });
  //   gen = fetchWriteIops();
  //   expect(gen.next().value).toEqual(
  //     put({
  //       iops: [],
  //       type: actionTypes.FETCH_WRITE_IOPS
  //     })
  //   );
  //   expect(gen.return().value).toEqual(cancelled());
  //   expect(gen.next(true).value.payload.action).toEqual({
  //     iops: [],
  //     type: actionTypes.FETCH_WRITE_IOPS
  //   });
  //   gen = fetchCpuUsage();
  //   expect(gen.next().value).toEqual(
  //     put({
  //       cpuUsage: [],
  //       type: actionTypes.FETCH_CPU_USAGE
  //     })
  //   );
  //   expect(gen.return().value).toEqual(cancelled());
  //   expect(gen.next(true).value.payload.action).toEqual({
  //     cpuUsage: [],
  //     type: actionTypes.FETCH_CPU_USAGE
  //   });
  //   renderComponent();
  //   const { asFragment, getByTestId } = wrapper;
  // });

  it("should render button on resize", async () => {
    // Change the viewport to 500px.
    global.innerWidth = 500; // Trigger the window resize event.

    global.dispatchEvent(new Event("resize"));
    await (0, _testUtils.act)(async () => {
      renderComponent();
    });
    const _wrapper8 = wrapper,
          getByTestId = _wrapper8.getByTestId;
    expect(getByTestId("sidebar-toggle")).toBeDefined();

    _react2.fireEvent.click(getByTestId("sidebar-toggle"));

    expect(getByTestId("help-link")).toHaveTextContent("Help");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,