648f1735df4d6604d026ca32f1046abe
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchSoftwareDetails = fetchSoftwareDetails;
exports.fetchHardwareDetails = fetchHardwareDetails;
exports.fetchNetworkDetails = fetchNetworkDetails;
exports.hardwareHealthWatcher = hardwareHealthWatcher;

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

/* -------------------------------------------------------------------------------------/
                                                                                    /
/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /
/                          ALL RIGHTS RESERVED                                        /
/                                                                                     /
/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /
/   products to use or abstract this computer program for the sole purpose of         /
/   implementing a product based on Samsung Electronics Co., Ltd. products.           /
/   No other rights to reproduce, use, or disseminate this computer program,          /
/   whether in part or in whole, are granted.                                         / 
/                                                                                     /
/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /
/   respect to the performance of this computer program, and specifically disclaims   /
/   any responsibility for any damages, special or consequential, connected           /
/   with the use of this program.                                                     /
/                                                                                     /
/-------------------------------------------------------------------------------------/

DESCRIPTION: <Contains Generator Functions for hardware container> *
@NAME : hardwareHealthSaga.js
@AUTHORS: Jay Sanghavi 
@Version : 1.0 *
@REVISION HISTORY
[03/11/2019] [Jay] : Prototyping..........////////////////////
*/
function* fetchSoftwareDetails() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_software_health/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchSoftwareDetails(result.software_health));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.fetchSoftwareDetails([]));
  } finally {
    ;
  }
}

function* fetchHardwareDetails() {
  try {
    // yield put(actionCreators.startLoader('Fetching BMC Information'));
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_hardware_health/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    yield (0, _effects.put)(actionCreators.stopLoader());
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchHardwareDetails(result.hardware_health));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.stopLoader());
    yield (0, _effects.put)(actionCreators.fetchHardwareDetails([]));
  } finally {
    yield (0, _effects.put)(actionCreators.stopLoader());
    ;
  }
}

function* fetchNetworkDetails() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_network_health/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchNetworkDetails(result.network_health));
    }
  } catch (error) {
    yield (0, _effects.put)(actionCreators.fetchNetworkDetails([]));
  } finally {
    ;
  }
}

function* hardwareHealthWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_HEALTH_FETCH_SOFTWARE_DETAILS, fetchSoftwareDetails);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_HEALTH_FETCH_HARDWARE_DETAILS, fetchHardwareDetails);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_HARDWARE_HEALTH_FETCH_NETWORK_DETAILS, fetchNetworkDetails);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,