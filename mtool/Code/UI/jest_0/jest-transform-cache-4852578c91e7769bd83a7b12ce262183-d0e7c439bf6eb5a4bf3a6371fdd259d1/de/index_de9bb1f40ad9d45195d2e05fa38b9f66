fbb379ca0e40db188f1e253aac3e5bdd
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

require("react-dropdown/style.css");

var _Tooltip = _interopRequireDefault(require("@material-ui/core/Tooltip"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _core = require("@material-ui/core");

var _styles = require("@material-ui/core/styles");

var _formatBytes = _interopRequireDefault(require("../../../utils/format-bytes"));

var _MToolLoader = _interopRequireDefault(require("../../MToolLoader"));

var _Dialog = _interopRequireDefault(require("../../Dialog"));

var _DiskDetails = _interopRequireDefault(require("../../DiskDetails"));

require("./ArrayCreate.css");

var _theme = require("../../../theme");

var _Legend = _interopRequireDefault(require("../../Legend"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/ArrayManagement/ArrayCreate/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const defaultDiskDetails = {
  DevicePath: 'NA',
  SerialNumber: 'NA',
  Model: 'NA',
  PhysicalSize: 'NA',
  UsedBytes: 'NA',
  Firmware: 'NA',
  critical_warning: 'NA',
  temperature: 'NA',
  avail_spare: 'NA',
  spare_thresh: 'NA',
  precent_used: 'NA',
  data_units_read: 'NA',
  data_units_written: 'NA',
  critical_comp_time: 'NA',
  warning_temp_time: 'NA',
  percent_used: 'NA'
};

const styles = theme => ({
  root: {
    display: 'flex',
    flexWrap: 'wrap',
    width: '100%',
    padding: theme.spacing(0, 3),
    [theme.breakpoints.down('sm')]: {
      padding: theme.spacing(0, 1)
    }
  },
  tooltip: {
    backgroundColor: '#f5f5f9',
    opacity: 1,
    color: 'rgba(0, 0, 0, 1)',
    maxWidth: 220,
    fontSize: theme.typography.pxToRem(12),
    border: '1px solid #dadde9',
    '& b': {
      fontWeight: theme.typography.fontWeightMedium
    }
  },
  formControl: {
    margin: theme.spacing(0.5, 2),
    minWidth: 170,
    [theme.breakpoints.down('xs')]: {
      margin: theme.spacing(1, 0)
    }
  },
  gridList: {
    flexWrap: 'nowrap',
    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.
    transform: 'translateZ(0)',
    flexGrow: 1,
    padding: theme.spacing(1, 0)
  },
  gridTile: {
    width: 200,
    border: '2px solid lightgray',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    '&>div': {
      height: 'auto'
    }
  },
  gridTileDisabled: {
    backgroundColor: '#e2e1e1'
  },
  diskGridContainer: {
    width: '100%',
    overflowX: 'auto',
    [theme.breakpoints.down('xs')]: {
      width: 'calc(100% - 32px)'
    }
  },
  diskContainer: {
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-around',
    overflow: 'hidden',
    backgroundColor: theme.palette.background.paper,
    padding: theme.spacing(2, 2, 0, 2),
    minWidth: 800
  },
  legendButtonGrid: {
    marginBottom: theme.spacing(1)
  },
  legendContainer: {
    padding: theme.spacing(0, 2)
  },
  button: {
    textTransform: 'none'
  },
  buttonContainer: {
    justifyContent: 'flex-end',
    padding: theme.spacing(0, 2),
    marginTop: theme.spacing(0.5),
    [theme.breakpoints.down('xs')]: {
      justifyContent: 'center'
    }
  },
  legendItem: {
    display: 'flex',
    alignItems: 'center',
    marginTop: theme.spacing(0.5)
  },
  inputGrid: {
    [theme.breakpoints.down('xs')]: {
      display: 'flex',
      justifyContent: 'center'
    }
  },
  partOfArray: {
    backgroundColor: 'rgb(236, 219, 87)'
  },
  notSelectedShow: {
    backgroundColor: 'rgb(137, 163, 196)'
  },
  corrupted: {
    backgroundColor: 'rgb(232, 114, 114)'
  }
});

const removeA = (slot, disk) => {
  const arr = [];
  let size = 0;

  for (let i = 0; i < slot.length; i += 1) {
    if (slot[i].deviceName !== disk.name) {
      arr.push(slot[i]);
      size += disk.size;
    }
  }

  return {
    arr,
    size
  };
};

class ArrayCreate extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      arrayname: '',
      raids: [{
        label: 'RAID-5',
        minStorage: 3,
        minSpare: 1,
        minWriteBUffer: 1,
        value: '5'
      }],
      minStorage: 3,
      minSpare: 1,
      minWriteBUffer: 1,
      raid: '5',
      slots: {
        'Storage Disk': [],
        'Write Buffer Disk': [],
        'Spare Disk': []
      },
      diskType: 'Storage Disk',
      metaDisk: '',
      loading: false,
      errorMsg: '',
      alertOpen: false,
      popupOpen: false,
      totalSize: 0,
      alertType: 'error',
      diskDetails: _objectSpread({}, defaultDiskDetails)
    };
    this.toggleRowSelect = this.toggleRowSelect.bind(this);
    this.createArray = this.createArray.bind(this);
    this.onSelectRaid = this.onSelectRaid.bind(this);
    this.onSelectDiskType = this.onSelectDiskType.bind(this);
    this.onSelectWriteBuffer = this.onSelectWriteBuffer.bind(this);
    this.showPopup = this.showPopup.bind(this);
    this.closePopup = this.closePopup.bind(this);
    this.getDiskDetails = this.getDiskDetails.bind(this);
  }

  onSelectRaid(event) {
    for (let i = 0; i < this.state.raids.length; i += 1) {
      if (this.state.raids[i].value === event.target.value) {
        this.setState(_objectSpread({}, this.state, {
          raid: event.target.value,
          minStorage: this.state.raids[i].minStorage,
          minSpare: this.state.raids[i].minSpare,
          minWriteBUffer: this.state.raids[i].minWriteBUffer
        }));
        return;
      }
    }
  }

  onSelectDiskType(event) {
    this.setState(_objectSpread({}, this.state, {
      diskType: event && event.target ? event.target.value : ''
    }));
  }

  onSelectWriteBuffer(event) {
    this.setState(_objectSpread({}, this.state, {
      metaDisk: event.target.value
    }));
  }

  getDiskDetails(name) {
    this.props.getDiskDetails({
      name
    });
  }

  showPopup(name) {
    this.getDiskDetails(name);
    this.setState(_objectSpread({}, this.state, {
      popupOpen: true
    }));
  }

  closePopup() {
    this.setState(_objectSpread({}, this.state, {
      popupOpen: false,
      alertOpen: false
    }));
  }

  createArray(event) {
    event.preventDefault();
    console.log("Creating Array", this.state);

    if (this.state.minStorage > this.state.slots['Storage Disk'].length) {
      this.setState(_objectSpread({}, this.state, {
        alertType: 'alert',
        errorMsg: `Select at least ${this.state.minStorage} storage disk`,
        alertOpen: true
      }));
      return;
    }

    if (this.state.minSpare > this.state.slots['Spare Disk'].length) {
      this.setState(_objectSpread({}, this.state, {
        alertType: 'alert',
        errorMsg: `Select at least ${this.state.minSpare} Spare disk`,
        alertOpen: true
      }));
      return;
    }

    if (this.state.metaDisk === '') {
      this.setState(_objectSpread({}, this.state, {
        alertType: 'alert',
        errorMsg: 'Select a Write Buffer',
        alertOpen: true
      }));
      return;
    }

    this.setState(_objectSpread({}, this.state, {
      loading: true
    }));
    console.log("Calling Backend");
    this.props.createArray({
      size: this.state.totalSize,
      arrayname: this.state.arrayname,
      RAIDLevel: this.state.raid,
      storageDisks: this.state.slots['Storage Disk'],
      spareDisks: this.state.slots['Spare Disk'],
      writeBufferDisk: this.state.slots['Write Buffer Disk'],
      metaDisk: this.state.metaDisk
    });
  }

  toggleRowSelect(position, disk) {
    const diskColorMap = {
      'Storage Disk': '#51ce46',
      '': 'white',
      'Spare Disk': '#339EFF',
      'Write Buffer Disk': '#FFEC33'
    };
    console.log(disk, this.state);
    const el = document.getElementById(position);

    if ((el.style.backgroundColor === 'white' || el.style.backgroundColor === '') && this.state.diskType !== '') {
      if (this.state.diskType === 'Spare Disk' && this.state.slots[this.state.diskType].length < 1) {
        el.style.backgroundColor = diskColorMap[this.state.diskType];
        const spareSlots = [...this.state.slots[this.state.diskType]];
        spareSlots.push({
          deviceName: disk.name
        });
        this.setState(_objectSpread({}, this.state, {
          slots: _objectSpread({}, this.state.slots, {
            'Spare Disk': spareSlots
          })
        }));
      } else if (this.state.diskType === 'Storage Disk') {
        el.style.backgroundColor = diskColorMap[this.state.diskType];
        const storageSlots = [...this.state.slots[this.state.diskType]];
        storageSlots.push({
          deviceName: disk.name
        });
        this.setState(_objectSpread({}, this.state, {
          slots: _objectSpread({}, this.state.slots, {
            'Storage Disk': storageSlots
          }),
          totalSize: this.state.totalSize + disk.size
        })); // } else if (
        //   this.state.diskType === 'Write Buffer Disk' &&
        //   this.state.slots[this.state.diskType].length < 1 &&
        //   this.state.metaDisk === ''
        // ) {
        //   el.style.backgroundColor = diskColorMap[this.state.diskType];
        //   const joined = this.state.slots[this.state.diskType].push({
        //     deviceName: position,
        //   });
        //   this.setState({
        //     ...this.state,
        //     slots: {
        //       ...this.state.slots,
        //       'Write Disk Buffer': joined,
        //     },
        //   });
      }
    } else {
      el.style.backgroundColor = 'white';

      const updatedSlots = _objectSpread({}, this.state.slots);

      let size = this.state.totalSize;
      Object.keys(this.state.slots).forEach(key => {
        const x = removeA(this.state.slots[key], disk);
        updatedSlots[key] = x.arr;

        if (key === 'Storage Disk') {
          size = x.size;
        }
      });
      this.setState(_objectSpread({}, this.state, {
        slots: _objectSpread({}, updatedSlots),
        totalSize: size
      })); // }
    }
  }

  render() {
    const classes = this.props.classes;
    const diskTypes = ['Storage Disk', 'Spare Disk'];
    const freedisks = [];

    if (this.props.disks) {
      for (let i = this.props.disks.length; i < 32; i += 1) {
        freedisks.push(_react.default.createElement(_core.GridListTile, {
          className: `${classes.gridTile} ${classes.gridTileDisabled}`,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 401
          },
          __self: this
        }, _react.default.createElement(_core.Typography, {
          color: "secondary",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 402
          },
          __self: this
        }, i + 1)));
      }
    }

    return _react.default.createElement(_MuiThemeProvider.default, {
      theme: _theme.PageTheme,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 409
      },
      __self: this
    }, _react.default.createElement("form", {
      className: classes.root,
      "data-testid": "arraycreate",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 410
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      sm: 6,
      className: classes.inputGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 411
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 412
      },
      __self: this
    }, _react.default.createElement(_core.InputLabel, {
      htmlFor: "raid",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 413
      },
      __self: this
    }, "Fault tolerance Level"), _react.default.createElement(_core.Select, {
      value: this.state.raid,
      onChange: this.onSelectRaid,
      inputProps: {
        name: 'Fault Tolerance Type',
        id: 'raid',
        'data-testid': 'raid-select-input'
      },
      SelectDisplayProps: {
        'data-testid': 'raid-select'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 414
      },
      __self: this
    }, this.state.raids.map(raid => _react.default.createElement(_core.MenuItem, {
      value: raid.value,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 427
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      color: "secondary",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 427
      },
      __self: this
    }, raid.label)))))), _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      sm: 6,
      className: classes.inputGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 432
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 433
      },
      __self: this
    }, _react.default.createElement(_core.InputLabel, {
      htmlFor: "writebuffer",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 434
      },
      __self: this
    }, "Write Buffer Path"), _react.default.createElement(_core.Select, {
      value: this.state.metaDisk,
      onChange: this.onSelectWriteBuffer,
      inputProps: {
        name: 'Write Buffer Path',
        id: 'writebuffer',
        'data-testid': "writebuffer-input"
      },
      SelectDisplayProps: {
        'data-testid': 'writebuffer'
      },
      disabled: !this.props.metadisks,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 435
      },
      __self: this
    }, this.props.metadisks ? this.props.metadisks.map(disk => _react.default.createElement(_core.MenuItem, {
      value: disk,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 449
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      color: "secondary",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 449
      },
      __self: this
    }, disk))) : null))), _react.default.createElement(_core.Grid, {
      item: true,
      xs: 12,
      className: classes.inputGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 454
      },
      __self: this
    }, _react.default.createElement(_core.FormControl, {
      className: classes.formControl,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 455
      },
      __self: this
    }, _react.default.createElement(_core.InputLabel, {
      htmlFor: "disktype",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 456
      },
      __self: this
    }, "Disk Type"), _react.default.createElement(_core.Select, {
      value: this.state.diskType,
      onChange: this.onSelectDiskType,
      inputProps: {
        name: 'Disk Type',
        id: 'disktype',
        'data-testid': "disktype-input"
      },
      SelectDisplayProps: {
        'data-testid': 'disktype'
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 457
      },
      __self: this
    }, diskTypes ? diskTypes.map(type => _react.default.createElement(_core.MenuItem, {
      value: type,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 470
      },
      __self: this
    }, _react.default.createElement(_core.Typography, {
      color: "secondary",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 470
      },
      __self: this
    }, type))) : null))), _react.default.createElement("div", {
      className: classes.diskGridContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 475
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      container: true,
      className: classes.diskContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 476
      },
      __self: this
    }, _react.default.createElement(_core.GridList, {
      cellHeight: 110,
      className: classes.gridList,
      cols: 32,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 477
      },
      __self: this
    }, this.props.disks ? this.props.disks.map((disk, i) => {
      return _react.default.createElement(_Tooltip.default, {
        classes: {
          tooltip: classes.tooltip
        },
        title: _react.default.createElement(_react.default.Fragment, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 486
          },
          __self: this
        }, _react.default.createElement("div", {
          style: {
            margin: '10px'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 487
          },
          __self: this
        }, "Name:", disk.name), _react.default.createElement("div", {
          style: {
            margin: '10px'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 491
          },
          __self: this
        }, "Size: ", (0, _formatBytes.default)(disk.size * 4 * 1024)), _react.default.createElement("div", {
          onClick: () => this.showPopup(disk.name),
          "aria-hidden": "true",
          style: {
            cursor: 'pointer',
            textAlign: 'right',
            margin: '10px'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 494
          },
          __self: this
        }, _react.default.createElement("u", {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 503
          },
          __self: this
        }, "More Details"))),
        interactive: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 481
        },
        __self: this
      }, _react.default.createElement(_core.GridListTile, {
        className: classes.gridTile,
        id: i,
        onClick: () => {
          this.toggleRowSelect(i, disk);
        },
        "data-testid": `diskselect-${i}`,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 509
        },
        __self: this
      }, _react.default.createElement(_core.Typography, {
        color: "secondary",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 517
        },
        __self: this
      }, i + 1)));
    }) : null, freedisks))), _react.default.createElement(_core.Grid, {
      container: true,
      xs: 12,
      className: classes.legendButtonGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 527
      },
      __self: this
    }, _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      sm: 8,
      xs: 12,
      wrap: "wrap",
      className: classes.legendContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 528
      },
      __self: this
    }, _react.default.createElement(_Legend.default, {
      bgColor: "#51ce46",
      title: "Selected Storage disk",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 529
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "#339eff",
      title: "Selected Spare disk",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 530
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "#ffffff",
      title: "Not Selected",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 531
      },
      __self: this
    }), _react.default.createElement(_Legend.default, {
      bgColor: "#e2e1e1",
      title: "Empty Slot",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 532
      },
      __self: this
    })), _react.default.createElement(_core.Grid, {
      item: true,
      container: true,
      sm: 4,
      xs: 12,
      className: classes.buttonContainer,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 534
      },
      __self: this
    }, _react.default.createElement(_core.Button, {
      onClick: this.createArray,
      variant: "contained",
      color: "primary",
      "data-testid": "createarray-btn",
      className: classes.button,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 535
      },
      __self: this
    }, "Create Array"))), this.props.loading ? _react.default.createElement(_MToolLoader.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 546
      },
      __self: this
    }) : null, _react.default.createElement(_Dialog.default, {
      type: this.state.alertType,
      title: "Create Array",
      description: this.state.errorMsg,
      open: this.state.alertOpen,
      onConfirm: this.closePopup,
      handleClose: this.closePopup,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 547
      },
      __self: this
    }), _react.default.createElement(_DiskDetails.default, {
      title: "Disk Details",
      details: this.props.diskDetails,
      open: this.state.popupOpen,
      onConfirm: this.closePopup,
      handleClose: this.closePopup,
      note_msg: "Note: Currently SPDK NVME cli cannot retrieve disk details while Poseidon is running. Details will be displayed at a later stage.",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 555
      },
      __self: this
    })));
  }

}

var _default = (0, _styles.withStyles)(styles)(ArrayCreate);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,