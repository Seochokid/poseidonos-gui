f637d7871afd4c9356c0bbde1e013475
"use strict";

jest.unmock("axios");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactRedux = require("react-redux");

var _testUtils = require("react-dom/test-utils");

var _reactI18next = require("react-i18next");

var _axios = _interopRequireDefault(require("axios"));

require("@testing-library/jest-dom/extend-expect");

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _history = require("history");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _indexSaga = _interopRequireDefault(require("../../../sagas/indexSaga"));

var _headerReducer = _interopRequireDefault(require("../../../store/reducers/headerReducer"));

var _alertManagementReducer = _interopRequireDefault(require("../../../store/reducers/alertManagementReducer"));

var _userManagementReducer = _interopRequireDefault(require("../../../store/reducers/userManagementReducer"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _index = _interopRequireDefault(require("./index"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/ConfigurationSetting/User-Management/index.test.js";
describe("ConfigurationSetting", () => {
  let wrapper;
  let history;
  let store; // let mock;

  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      // headerLanguageReducer,
      //   headerReducer,
      alertManagementReducer: _alertManagementReducer.default,
      userManagementReducer: _userManagementReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = "/ConfigurationSetting/user";
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    }); // mock = new MockAdapter(axios);
  });

  const renderComponent = () => {
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 83
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 84
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 85
      },
      __self: void 0
    }, _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 86
      },
      __self: void 0
    })))));
  };

  afterEach(_react2.cleanup);
  it('renders user management', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, null);
    renderComponent();
    const _wrapper = wrapper,
          getByText = _wrapper.getByText,
          asFragment = _wrapper.asFragment;
    expect(getByText("User List")).toBeDefined();
  });
  it('should add a new user', () => {
    renderComponent();
    const _wrapper2 = wrapper,
          asFragment = _wrapper2.asFragment,
          getByTestId = _wrapper2.getByTestId,
          getByText = _wrapper2.getByText;
    const username = getByTestId('add-user-name');
    const password = getByTestId('add-user-password');
    const confirmPassword = getByTestId('add-user-confirm-password');
    const phno = getByTestId('add-user-phno');
    const email = getByTestId('add-user-email');
    const confirmBtn = getByText('Submit');

    _react2.fireEvent.keyDown(username, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.keyDown(username, {
      key: '+',
      code: 43,
      charCode: 43
    });

    _react2.fireEvent.change(username, {
      target: {
        value: 'abcd'
      }
    });

    _react2.fireEvent.keyDown(password, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.keyDown(username, {
      key: '+',
      code: 43,
      charCode: 43
    });

    _react2.fireEvent.change(password, {
      target: {
        value: 'test'
      }
    });

    _react2.fireEvent.keyDown(confirmPassword, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.keyDown(username, {
      key: '+',
      code: 43,
      charCode: 43
    });

    _react2.fireEvent.change(confirmPassword, {
      target: {
        value: 'test'
      }
    });

    _react2.fireEvent.keyDown(email, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.keyDown(username, {
      key: '+',
      code: 43,
      charCode: 43
    });

    _react2.fireEvent.change(email, {
      target: {
        value: 'abcd@abc.com'
      }
    });

    _react2.fireEvent.change(phno, {
      target: {
        value: '123457890'
      }
    });

    _react2.fireEvent.click(confirmBtn);

    expect(getByText('Yes')).toBeDefined();

    _react2.fireEvent.click(getByText('Yes')); // expect(username.value).toBe('');

  });
  it('should cancel adding a user', () => {
    renderComponent();
    const _wrapper3 = wrapper,
          asFragment = _wrapper3.asFragment,
          getByTestId = _wrapper3.getByTestId,
          getByText = _wrapper3.getByText;
    const username = getByTestId('add-user-name');
    const cancelBtn = getByText('Cancel');

    _react2.fireEvent.keyDown(username, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.change(username, {
      target: {
        value: 'abcd'
      }
    });

    _react2.fireEvent.click(cancelBtn);

    expect(getByText('Yes')).toBeDefined();

    _react2.fireEvent.click(getByText('No')); // expect(username.value).toBe('');

  });
  it('should throw error when username is not present', () => {
    renderComponent();
    const _wrapper4 = wrapper,
          getByText = _wrapper4.getByText;
    const confirmBtn = getByText('Submit');

    _react2.fireEvent.click(confirmBtn);

    expect(getByText("Please Enter a Valid Username")).toBeDefined();
  });
  it('should add list all the users', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper5 = wrapper,
          getByText = _wrapper5.getByText,
          asFragment = _wrapper5.asFragment;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      expect(asFragment()).toMatchSnapshot();
    });
  });
  it('should edit a user', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper6 = wrapper,
          getByText = _wrapper6.getByText,
          asFragment = _wrapper6.asFragment,
          getAllByTitle = _wrapper6.getAllByTitle,
          getAllByPlaceholderText = _wrapper6.getAllByPlaceholderText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      const editBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Edit")[0]);

      _react2.fireEvent.click(editBtn);

      const phno = await (0, _react2.waitForElement)(() => getAllByPlaceholderText("+1 (702) 123-4567")[0]);

      _react2.fireEvent.change(phno, {
        target: {
          value: "+1 (702) 123-4578"
        }
      });

      const email = await (0, _react2.waitForElement)(() => getAllByPlaceholderText("Email")[0]);

      _react2.fireEvent.change(email, {
        target: {
          value: "test@abc.com"
        }
      });

      let spy = jest.spyOn(_axios.default, "post").mockReturnValue(200);
      const saveBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Save")[0]);

      _react2.fireEvent.click(saveBtn);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toHaveBeenCalledTimes(1);
    });
  });
  it('should throw an error if the emailid is not valid', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper7 = wrapper,
          getByText = _wrapper7.getByText,
          asFragment = _wrapper7.asFragment,
          getAllByTitle = _wrapper7.getAllByTitle,
          getAllByPlaceholderText = _wrapper7.getAllByPlaceholderText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      const editBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Edit")[0]);

      _react2.fireEvent.click(editBtn);

      const phno = await (0, _react2.waitForElement)(() => getAllByPlaceholderText("+1 (702) 123-4567")[0]);

      _react2.fireEvent.change(phno, {
        target: {
          value: "+1 (702) 123-4578"
        }
      });

      const email = await (0, _react2.waitForElement)(() => getAllByPlaceholderText("Email")[0]);

      _react2.fireEvent.change(email, {
        target: {
          value: "test"
        }
      });

      let spy = jest.spyOn(_axios.default, "post").mockReturnValue(200);
      const saveBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Save")[0]);

      _react2.fireEvent.click(saveBtn);

      await new Promise(resolve => setTimeout(resolve, 1000));
      const alertText = await (0, _react2.waitForElement)(() => getByText("Please enter a valid input"));
      expect(alertText).toBeDefined();
    });
  });
  it('should delete a user', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper8 = wrapper,
          getByText = _wrapper8.getByText,
          asFragment = _wrapper8.asFragment,
          getAllByTitle = _wrapper8.getAllByTitle,
          getAllByPlaceholderText = _wrapper8.getAllByPlaceholderText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      const deleteBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Delete")[0]);

      _react2.fireEvent.click(deleteBtn);

      const saveBtn = await (0, _react2.waitForElement)(() => getAllByTitle("Save")[0]);

      _react2.fireEvent.click(saveBtn);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(asFragment()).toMatchSnapshot();
    });
  });
  it('should disable a user', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": "admin",
      "active": true,
      "privileges": "Create, Read, Edit, Delete"
    }]);
    renderComponent();
    const _wrapper9 = wrapper,
          getByText = _wrapper9.getByText,
          asFragment = _wrapper9.asFragment,
          getAllByTitle = _wrapper9.getAllByTitle,
          getAllByPlaceholderText = _wrapper9.getAllByPlaceholderText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      /*        const disableBtn = await waitForElement(() => getAllByTitle("api-enable")[0]);
              let spy = jest.spyOn(axios, "post").mockReturnValue(200);
              fireEvent.click(disableBtn);
              await new Promise(resolve => setTimeout(resolve, 1000));
              fireEvent.click(disableBtn);
              expect(spy).toBeCalled();
      */
    });
  });
  it('should not display role', async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    let response = mock.onGet('/api/v1.0/get_users/').reply(200, [{
      "_id": "abcd",
      "email": "abcd@corp.com",
      "password": "Defg",
      "phone_number": "xx",
      "role": null,
      "active": true,
      "privileges": ""
    }]);
    renderComponent();
    const _wrapper10 = wrapper,
          queryByText = _wrapper10.queryByText,
          getByText = _wrapper10.getByText;
    await (0, _testUtils.act)(async () => {
      const nameElement = await (0, _react2.waitForElement)(() => getByText("abcd"));
      expect(nameElement).toBeDefined();
      expect(queryByText("Create")).toBeNull();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,