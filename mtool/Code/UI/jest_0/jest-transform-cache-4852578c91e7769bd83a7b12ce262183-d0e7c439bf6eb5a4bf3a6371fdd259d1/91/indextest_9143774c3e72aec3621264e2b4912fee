436536340f1148d1ad7ef2a59f82f55e
"use strict";

jest.unmock("axios");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactRedux = require("react-redux");

var _testUtils = require("react-dom/test-utils");

var _reactI18next = require("react-i18next");

var _axios = _interopRequireDefault(require("axios"));

require("@testing-library/jest-dom/extend-expect");

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _history = require("history");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _indexSaga = _interopRequireDefault(require("../../../sagas/indexSaga"));

var _headerReducer = _interopRequireDefault(require("../../../store/reducers/headerReducer"));

var _index = _interopRequireDefault(require("./index"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/OverviewComponents/BmcLogTable/index.test.js";
describe("BmcLogTable", () => {
  let wrapper;
  let history;
  let store; // let mock;

  jest.spyOn(global, "fetch").mockImplementation(() => Promise.resolve({
    status: 200,
    json: () => Promise.resolve({
      resp: [{
        timestamp: "2019-12-17 21:35:58+09:00KST",
        source: "BMC Journal Entry",
        entryType: "Oem",
        severity: "Warning",
        description: "samplelog3"
      }, {
        timestamp: "2019-12-17 21:35:58+09:00KST",
        source: "BMC Journal Entry",
        entryType: "Oem",
        severity: "Warning",
        description: "samplelog2"
      }, {
        timestamp: "2019-12-17 22:35:59+09:00KST",
        source: "Journal Entry",
        entryType: "Oem",
        severity: "Warning",
        description: "xyz.openbmc_project.Chassis.Control.Power.service: Cannot add dependency job, ignoring: Unit xyz.openbmc_project.Chassis.Control.Power.service failed to load properly: File exists"
      }, {
        timestamp: "2019-12-17 21:35:59+09:00KST",
        source: "BMC Journal Entry",
        entryType: "Oem",
        severity: "Warning",
        description: "xyz.openbmc_project.Chassis.Control.Power.service: Cannot add dependency job, ignoring: Unit xyz.openbmc_project.Chassis.Control.Power.service failed to load properly: File exists"
      }, {
        timestamp: "2019-13-17 21:35:58+09:00KST",
        source: "Event Log",
        entryType: "Oem",
        severity: "Warning",
        description: "xyz.openbmc_project.Chassis.Control.Power.service: Cannot add dependency job, ignoring: Unit xyz.openbmc_project.Chassis.Control.Power.service failed to load properly: File exists"
      }, {
        timestamp: "2019-13-17 21:35:58+10:00KST",
        source: "Event Log",
        entryType: "Oem2",
        severity: "Warning",
        description: "xyz.openbmc_project.Chassis.Control.Power.service: Cannot add dependency job, ignoring: Unit xyz.openbmc_project.Chassis.Control.Power.service failed to load properly: File exists"
      }, {
        timestamp: "2019-12-17 21:35:58+09:00KST",
        source: "BMC Journal Entry",
        entryType: "Oem",
        severity: "Error",
        description: "samplelog4"
      }, {
        timestamp: "2019-13-17 21:35:58+09:00KST",
        source: "Event Log",
        entryType: "Oem",
        severity: "Warning",
        description: "xyz.openbmc_project.Chassis.Control.Power.service: Cannot add dependency job, ignoring: Unit xyz.openbmc_project.Chassis.Control.Power.service failed to load properly: File exists"
      }],
      count: 7,
      page: 0,
      source_filter_array: ["Event Log", "BMC Journal Entry", "Journal Entry"],
      entryType_filter_array: ["Oem", "Oem2"],
      severity_filter_array: ["Warning", "Error"]
    })
  }));
  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      // headerLanguageReducer,
      headerReducer: _headerReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = "/BmcLogTable/general";
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    }); // mock = new MockAdapter(axios);
  });

  const renderComponent = () => {
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 158
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 159
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 160
      },
      __self: void 0
    }, " ", _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 162
      },
      __self: void 0
    })))));
  };

  afterEach(_react2.cleanup);
  it("matches snapshot", () => {
    renderComponent();
    const _wrapper = wrapper,
          asFragment = _wrapper.asFragment;
    expect(asFragment()).toMatchSnapshot();
  });
  it("selects source select all filter", async () => {
    renderComponent();
    const _wrapper2 = wrapper,
          asFragment = _wrapper2.asFragment,
          getByTestId = _wrapper2.getByTestId;
    getByTestId("sourceSelect");

    _react2.fireEvent.click(getByTestId("sourceSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const sourceSelectAll = await (0, _react2.waitForElement)(() => // getByTestId("sourceSelectAll")
      getByTestId("sourceSelectAll").querySelector('input[type="checkbox"]'));
      const sourceSelectAll2 = getByTestId("sourceSelectAll").querySelector('input[type="checkbox"]');

      _react2.fireEvent.click(sourceSelectAll2);

      _react2.fireEvent.click(sourceSelectAll2, {
        target: {
          name: "source_select_all"
        }
      });
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("selects all source filters", async () => {
    renderComponent();
    const _wrapper3 = wrapper,
          asFragment = _wrapper3.asFragment,
          getByTestId = _wrapper3.getByTestId;
    getByTestId("sourceSelect");

    _react2.fireEvent.click(getByTestId("sourceSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const bmc_journal_entry = await (0, _react2.waitForElement)(() => getByTestId("BMC Journal Entry"));

      _react2.fireEvent.click(getByTestId("BMC Journal Entry"));

      const journal_entry = await (0, _react2.waitForElement)(() => getByTestId("Journal Entry"));

      _react2.fireEvent.click(getByTestId("Journal Entry"));
    });
    const event_log = await (0, _react2.waitForElement)(() => getByTestId("Event Log"));

    _react2.fireEvent.click(getByTestId("Event Log"));

    expect(asFragment()).toMatchSnapshot();
  });
  it("selects severity select all filter", async () => {
    renderComponent();
    const _wrapper4 = wrapper,
          asFragment = _wrapper4.asFragment,
          getByTestId = _wrapper4.getByTestId;
    getByTestId("severitySelect");

    _react2.fireEvent.click(getByTestId("severitySelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const sourceSelectAll = await (0, _react2.waitForElement)(() => // getByTestId("sourceSelectAll")
      getByTestId("severitySelectAll").querySelector('input[type="checkbox"]'));
      const severitySelectAll2 = getByTestId("severitySelectAll").querySelector('input[type="checkbox"]');

      _react2.fireEvent.click(severitySelectAll2);

      _react2.fireEvent.click(severitySelectAll2, {
        target: {
          name: "severity_select_all"
        }
      });
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("selects all severity filters", async () => {
    renderComponent();
    const _wrapper5 = wrapper,
          asFragment = _wrapper5.asFragment,
          getByTestId = _wrapper5.getByTestId;
    getByTestId("severitySelect");

    _react2.fireEvent.click(getByTestId("severitySelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const warning = await (0, _react2.waitForElement)(() => getByTestId("Warning"));

      _react2.fireEvent.click(getByTestId("Warning"));

      const error = await (0, _react2.waitForElement)(() => getByTestId("Error"));

      _react2.fireEvent.click(getByTestId("Error"));
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("selects entry type select all filter", async () => {
    renderComponent();
    const _wrapper6 = wrapper,
          asFragment = _wrapper6.asFragment,
          getByTestId = _wrapper6.getByTestId;
    getByTestId("entryTypeSelect");

    _react2.fireEvent.click(getByTestId("entryTypeSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const entryTypeSelectAll = await (0, _react2.waitForElement)(() => // getByTestId("sourceSelectAll")
      getByTestId("entryTypeSelectAll").querySelector('input[type="checkbox"]'));
      const entryTypeSelectAll2 = getByTestId("entryTypeSelectAll").querySelector('input[type="checkbox"]');

      _react2.fireEvent.click(entryTypeSelectAll2);

      _react2.fireEvent.click(entryTypeSelectAll2, {
        target: {
          name: "entrytype_select_all"
        }
      });
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("selects all entry type filters", async () => {
    renderComponent();
    const _wrapper7 = wrapper,
          asFragment = _wrapper7.asFragment,
          getByTestId = _wrapper7.getByTestId;
    getByTestId("entryTypeSelect");

    _react2.fireEvent.click(getByTestId("entryTypeSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const Oem = await (0, _react2.waitForElement)(() => getByTestId("Oem"));

      _react2.fireEvent.click(getByTestId("Oem"));

      const Oem2 = await (0, _react2.waitForElement)(() => getByTestId("Oem2"));

      _react2.fireEvent.click(getByTestId("Oem2"));
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("selects source BMC Journal Entry filter", async () => {
    renderComponent();
    const _wrapper8 = wrapper,
          asFragment = _wrapper8.asFragment,
          getByTestId = _wrapper8.getByTestId;
    getByTestId("sourceSelect");

    _react2.fireEvent.click(getByTestId("sourceSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const sourceSelectAll = await (0, _react2.waitForElement)(() => getByTestId("BMC Journal Entry"));

      _react2.fireEvent.click(getByTestId("BMC Journal Entry"));
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("selects severity Warning filter", async () => {
    renderComponent();
    const _wrapper9 = wrapper,
          asFragment = _wrapper9.asFragment,
          getByTestId = _wrapper9.getByTestId;
    getByTestId("severitySelect");

    _react2.fireEvent.click(getByTestId("severitySelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const severitySelectAll = await (0, _react2.waitForElement)(() => getByTestId("Warning"));

      _react2.fireEvent.click(getByTestId("Warning"));
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("selects entry type Oem filter", async () => {
    renderComponent();
    const _wrapper10 = wrapper,
          asFragment = _wrapper10.asFragment,
          getByTestId = _wrapper10.getByTestId;
    getByTestId("entryTypeSelect");

    _react2.fireEvent.click(getByTestId("entryTypeSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const entryTypeSelectAll = await (0, _react2.waitForElement)(() => getByTestId("Oem"));

      _react2.fireEvent.click(getByTestId("Oem"));
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("selects source, severity and entry type filters, ", async () => {
    renderComponent();
    const _wrapper11 = wrapper,
          asFragment = _wrapper11.asFragment,
          getByTestId = _wrapper11.getByTestId;

    _react2.fireEvent.click(getByTestId("sourceSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const sourceSelectAll = await (0, _react2.waitForElement)(() => getByTestId("BMC Journal Entry"));

      _react2.fireEvent.click(getByTestId("BMC Journal Entry"));
    });

    _react2.fireEvent.click(getByTestId("entryTypeSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot(); //const entryTypeSelectAll = await waitForElement(() => getByTestId("Oem"));
      //fireEvent.click(getByTestId("Oem"));

      const Oem2 = await (0, _react2.waitForElement)(() => getByTestId("Oem2"));

      _react2.fireEvent.click(getByTestId("Oem2"));
    });

    _react2.fireEvent.click(getByTestId("severitySelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const severitySelectAll = await (0, _react2.waitForElement)(() => getByTestId("Warning"));

      _react2.fireEvent.click(getByTestId("Warning"));
    });
  });
  it("checks source listsubheader functionality", async () => {
    renderComponent();
    const _wrapper12 = wrapper,
          asFragment = _wrapper12.asFragment,
          getByTestId = _wrapper12.getByTestId;
    getByTestId("sourceSelect");

    _react2.fireEvent.click(getByTestId("sourceSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const sourceSelectAllSubheader = await (0, _react2.waitForElement)(() => getByTestId("sourceSelectAllSubheader"));

      _react2.fireEvent.click(getByTestId("sourceSelectAllSubheader"));
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("checks entry type listsubheader functionality", async () => {
    renderComponent();
    const _wrapper13 = wrapper,
          asFragment = _wrapper13.asFragment,
          getByTestId = _wrapper13.getByTestId;
    getByTestId("entryTypeSelect");

    _react2.fireEvent.click(getByTestId("entryTypeSelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const entryTypeSelectAllSubheader = await (0, _react2.waitForElement)(() => getByTestId("entryTypeSelectAllSubheader"));

      _react2.fireEvent.click(getByTestId("entryTypeSelectAllSubheader"));
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("checks severity listsubheader functionality", async () => {
    renderComponent();
    const _wrapper14 = wrapper,
          asFragment = _wrapper14.asFragment,
          getByTestId = _wrapper14.getByTestId;
    getByTestId("severitySelect");

    _react2.fireEvent.click(getByTestId("severitySelect"));

    await (0, _testUtils.act)(async () => {
      expect(asFragment()).toMatchSnapshot();
      const severitySelectAllSubheader = await (0, _react2.waitForElement)(() => getByTestId("severitySelectAllSubheader"));

      _react2.fireEvent.click(getByTestId("severitySelectAllSubheader"));
    });
    expect(asFragment()).toMatchSnapshot();
  });
  it("refreshes the bmc logs", async () => {
    renderComponent();
    const _wrapper15 = wrapper,
          getByTitle = _wrapper15.getByTitle;

    _react2.fireEvent.click(getByTitle("Refresh Logs"));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,