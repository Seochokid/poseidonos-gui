dd37c4975fd5383c895b4bc458071087
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _styles = require("@material-ui/core/styles");

var _materialTable = _interopRequireDefault(require("material-table"));

var _core = require("@material-ui/core");

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _MuiThemeProvider = _interopRequireDefault(require("@material-ui/core/styles/MuiThemeProvider"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _SaveAlt = _interopRequireDefault(require("@material-ui/icons/SaveAlt"));

var _ChevronLeft = _interopRequireDefault(require("@material-ui/icons/ChevronLeft"));

var _ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var _FirstPage = _interopRequireDefault(require("@material-ui/icons/FirstPage"));

var _LastPage = _interopRequireDefault(require("@material-ui/icons/LastPage"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _FilterList = _interopRequireDefault(require("@material-ui/icons/FilterList"));

var _Remove = _interopRequireDefault(require("@material-ui/icons/Remove"));

var _Edit = _interopRequireDefault(require("@material-ui/icons/Edit"));

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _ArrowUpward = _interopRequireDefault(require("@material-ui/icons/ArrowUpward"));

var _Clear = _interopRequireDefault(require("@material-ui/icons/Clear"));

require("./Chassis.css");

var _Legend = _interopRequireDefault(require("../../Legend"));

var actionTypes = _interopRequireWildcard(require("../../../store/actions/actionTypes"));

var _DiskDetails = _interopRequireDefault(require("../../DiskDetails"));

var _ServerInformation = _interopRequireDefault(require("../ServerInformation"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/OverviewComponents/Chassis/index.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const styles = theme => ({
  multilineColor: {
    color: 'black'
  },
  root: {
    flexGrow: 1
  },
  overviewPaper: {
    marginTop: theme.spacing(2),
    width: '100%'
  },
  chassisOuterGrid: {
    // border: '1px solid gray',
    maxWidth: '100%',
    flexBasis: '100%',
    overflowY: 'auto',
    overflowX: 'hidden',
    background: '#fff'
  },
  chassisInnerGrid: {
    maxWidth: '100%'
  },
  label: {
    marginLeft: theme.spacing(1),
    marginTop: theme.spacing(3)
  },
  gridTile: {
    width: 450,
    minWidth: 10,
    border: '2px solid lightgray',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
    flexDirection: 'column',
    '&>div': {
      height: 'auto'
    }
  },
  gridTileDisabled: {
    backgroundColor: '#e2e1e1'
  },
  gridTileHealthy: {
    backgroundColor: 'green'
  },
  chassisGridContainer: {
    width: '100%',
    overflowX: 'auto',
    [theme.breakpoints.down('xs')]: {
      width: 'calc(100% - 32px)'
    }
  },
  chassisContainer: {
    margin: '20px',
    padding: '5px',
    border: '1px solid gray'
  },
  diskContainer: {
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-around',
    overflow: 'hidden',
    backgroundColor: theme.palette.background.paper,
    padding: theme.spacing(0, 2, 0, 2),
    minWidth: 120
  },
  gridList: {
    flexWrap: 'nowrap',
    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.
    transform: 'translateZ(0)',
    flexGrow: 1,
    padding: theme.spacing(0, 0)
  },
  legendContainer: {
    maxWidth: '100%',
    padding: theme.spacing(2, 2)
  },
  chassisLabel: {
    padding: '15px',
    width: '100%',
    textAlign: 'center'
  },
  powerParentGrid: {
    marginBottom: -theme.spacing(0.5)
  }
});

const defaultDiskDetails = {
  DevicePath: 'NA',
  BuildDate: 'NA',
  Manufacturer: 'NA',
  PartNumber: 'NA',
  SerialNumber: 'NA',
  Model: 'NA',
  PredictedMediaLifeLeftPercent: 'NA',
  PhysicalSize: 'NA',
  UsedBytes: 'NA',
  Firmware: 'NA',
  critical_warning: 'NA',
  temperature: 'NA',
  avail_spare: 'NA',
  spare_thresh: 'NA',
  precent_used: 'NA',
  data_units_read: 'NA',
  data_units_written: 'NA',
  critical_comp_time: 'NA',
  warning_temp_time: 'NA',
  percent_used: 'NA'
};

class Chassis extends _react.Component {
  constructor(props) {
    super(props);
    this.showPopup = this.showPopup.bind(this);
    this.closePopup = this.closePopup.bind(this);
    this.getDiskDetails = this.getDiskDetails.bind(this);
    this.theme = (0, _core.createMuiTheme)({
      overrides: {
        MuiSvgIcon: {
          //  stylesheet name
          root: {
            //  rule name
            color: '#808080'
          }
        },
        MuiTablePagination: {
          menuItem: {
            fontSize: "12px",
            minHeight: "0px"
          },
          select: {
            width: "45px"
          },
          toolbar: {
            maxHeight: '50px',
            minHeight: '20px'
          }
        }
      },
      palette: {
        primary: {
          main: '#4caf50'
        },
        secondary: {
          main: '#808080'
        }
      }
    });
    this.state = {
      disknameandslot: '',
      diskDetails: _objectSpread({}, defaultDiskDetails),
      popupOpen: false,
      columns: [{
        title: 'Name',
        field: 'chassisname',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        }
      }, {
        title: 'Status',
        field: 'chassisstatus',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        }
      }, {
        title: 'Serial',
        field: 'chassisserial',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        }
      }, {
        title: 'Other',
        field: 'chassisother',
        cellStyle: {
          fontFamily: 'Arial',
          fontSize: '12px'
        }
      }],
      data: [{
        'chassisname': 'ETH0',
        'chassisstatus': 'Healthy',
        'chassisserial': 'CNGODYTRNHD',
        'chassisother': 'SPEED Slot 40GB'
      }, {
        'chassisname': 'ETH1',
        'chassisstatus': 'Healthy',
        'chassisserial': 'CNGODYTRNHDH',
        'chassisother': 'SPEED Slot 50GB'
      }, {
        'chassisname': 'PSU1',
        'chassisstatus': 'Healthy',
        'chassisserial': 'POWERCNGODYTRNHDH',
        'chassisother': ' - '
      }]
    };
  }

  getDiskDetails(name, slot, disk) {
    this.setState(_objectSpread({}, this.state, {
      diskDetails: _objectSpread({}, defaultDiskDetails, {}, disk),
      disknameandslot: `Disk Details (Disk Name: ${name}${slot}, Slot Number: ${slot + 1})`,
      popupOpen: true
    }));
  }

  showPopup(name, slot, disk) {
    this.getDiskDetails(name, slot, disk);
  }

  closePopup() {
    this.setState(_objectSpread({}, this.state, {
      popupOpen: false
    }));
  }

  componentDidMount() {
    this.props.fetchChassisFrontInfo(); // this.props.fetchChassisRearInfo();
  }

  render() {
    const classes = this.props.classes;
    const freeSlots = [];

    if (this.props.chassis_front_list) {
      for (let i = this.props.chassis_front_list.length; i < 32; i += 1) {
        freeSlots.push(_react.default.createElement(_Grid.default, {
          className: `${classes.gridTile} ${classes.gridTileDisabled}`,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 290
          },
          __self: this
        }, _react.default.createElement(_core.Typography, {
          color: "secondary",
          className: classes.diskNo,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 291
          },
          __self: this
        }, i + 1)));
      }
    }

    return (// <Paper className={classes.overviewPaper}>
      _react.default.createElement(_Grid.default, {
        item: true,
        spacing: 2,
        container: true,
        className: classes.powerParentGrid,
        "data-testid": "Chassis_Component",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 299
        },
        __self: this
      }, _react.default.createElement(_Grid.default, {
        sm: 6,
        xs: 12,
        item: true,
        container: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 300
        },
        __self: this
      }, _react.default.createElement(_core.Paper, {
        xs: 12,
        item: true,
        className: classes.chassisOuterGrid,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 301
        },
        __self: this
      }, _react.default.createElement(_core.InputLabel, {
        className: classes.chassisLabel,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 302
        },
        __self: this
      }, "Chassis Front View"), _react.default.createElement(_Grid.default, {
        sm: 6,
        xs: 12,
        item: true,
        className: classes.chassisInnerGrid,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 303
        },
        __self: this
      }, _react.default.createElement("div", {
        className: classes.chassisGridContainer,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 305
        },
        __self: this
      }, _react.default.createElement(_Grid.default, {
        container: true,
        className: classes.diskContainer,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 309
        },
        __self: this
      }, _react.default.createElement(_core.GridList, {
        cellHeight: 150,
        className: classes.gridList,
        cols: 32,
        "data-testid": "ChassisDiskPopUp",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 311
        },
        __self: this
      }, this.props.chassis_front_list ? this.props.chassis_front_list.map((disk, index) => {
        return _react.default.createElement(_core.Tooltip, {
          "data-testid": "Tooltip",
          classes: {
            tooltip: classes.tooltip
          },
          title: _react.default.createElement(_react.default.Fragment, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 321
            },
            __self: this
          }, _react.default.createElement("div", {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 322
            },
            __self: this
          }, "Name:", `nvme${index}`), _react.default.createElement("div", {
            "data-testid": "POPUP",
            onClick: () => this.showPopup('nvme', index, disk),
            style: {
              cursor: 'pointer',
              textAlign: 'right',
              margin: '10px'
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 331
            },
            __self: this
          }, _react.default.createElement("u", {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 340
            },
            __self: this
          }, "More Details"))),
          interactive: true,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 315
          },
          __self: this
        }, _react.default.createElement(_Grid.default, {
          className: `${classes.gridTile} ${classes.gridTileHealthy}`,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 346
          },
          __self: this
        }, _react.default.createElement(_core.GridListTile, {
          id: index // onClick={() => {
          //   this.toggleRowSelect(index, slot);
          // }}
          ,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 347
          },
          __self: this
        }, _react.default.createElement(_core.Typography, {
          color: "secondary",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 354
          },
          __self: this
        }, index + 1))));
      }) : null, freeSlots))), _react.default.createElement(_Grid.default, {
        item: true,
        container: true,
        sm: 8,
        xs: 12,
        wrap: "wrap",
        className: classes.legendContainer,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 366
        },
        __self: this
      }, _react.default.createElement(_Legend.default, {
        bgColor: "green",
        title: "Healthy",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 367
        },
        __self: this
      }), _react.default.createElement(_Legend.default, {
        bgColor: "yellow",
        title: "Warning",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 368
        },
        __self: this
      }), _react.default.createElement(_Legend.default, {
        bgColor: "orange",
        title: "Corrupt",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 369
        },
        __self: this
      }), _react.default.createElement(_Legend.default, {
        bgColor: "#e2e1e1",
        title: "No Disk",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 370
        },
        __self: this
      }))))), _react.default.createElement(_Grid.default, {
        sm: 6,
        xs: 12,
        item: true,
        container: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 375
        },
        __self: this
      }, _react.default.createElement(_core.Paper, {
        xs: 12,
        item: true,
        className: classes.chassisOuterGrid,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 376
        },
        __self: this
      }, _react.default.createElement(_ServerInformation.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 377
        },
        __self: this
      }))), _react.default.createElement(_DiskDetails.default, {
        title: this.state.disknameandslot,
        details: this.state.diskDetails,
        open: this.state.popupOpen,
        onConfirm: this.closePopup,
        handleClose: this.closePopup,
        note_msg: "Note: SMART Information cannot be retrieved from the disk as NVMe MI functionality is not implemented in BMC.",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 432
        },
        __self: this
      })) // </Paper>

    );
  }

}

const mapStateToProps = state => {
  return {
    chassis_front_list: state.hardwareOverviewReducer.chassis_front_list,
    chassis_rear_list: state.hardwareOverviewReducer.chassis_rear_list
  };
};

const mapDispatchToProps = dispatch => {
  return {
    fetchChassisFrontInfo: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_CHASSIS_FRONT_INFORMATION
    }),
    fetchChassisRearInfo: () => dispatch({
      type: actionTypes.SAGA_HARDWARE_OVERVIEW_FETCH_CHASSIS_REAR_INFORMATION
    })
  };
};

var _default = (0, _styles.withStyles)(styles)((0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Chassis));

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,