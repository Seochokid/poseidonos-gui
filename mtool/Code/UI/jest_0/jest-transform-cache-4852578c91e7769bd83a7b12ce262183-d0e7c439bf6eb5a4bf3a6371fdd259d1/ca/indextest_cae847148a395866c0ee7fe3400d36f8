75c9b2c19625cf2bf0707dd557d1dd05
"use strict";

/* eslint-disable import/imports-first */

/* eslint-disable import/first */
jest.unmock('axios');

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _axios = _interopRequireDefault(require("axios"));

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _react2 = require("@testing-library/react");

var _history = require("history");

require("@testing-library/jest-dom/extend-expect");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _testUtils = require("react-dom/test-utils");

var _index = _interopRequireDefault(require("./index"));

var _headerReducer = _interopRequireDefault(require("../../store/reducers/headerReducer"));

var _configurationsettingReducer = _interopRequireDefault(require("../../store/reducers/configurationsettingReducer"));

var _indexSaga = _interopRequireDefault(require("../../sagas/indexSaga"));

var _q = require("q");

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/Header/index.test.js";
describe('<Header />', () => {
  let wrapper;
  let mock;
  let history;
  let store;
  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      headerReducer: _headerReducer.default,
      configurationsettingReducer: _configurationsettingReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = '/';
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    });
    mock = new _axiosMockAdapter.default(_axios.default);
  });

  const renderComponent = () => {
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 45
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 46
      },
      __self: void 0
    }, _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 47
      },
      __self: void 0
    }))));
  };

  afterEach(_react2.cleanup);
  it("should render Change Password dialogue", async () => {
    renderComponent();
    const _wrapper = wrapper,
          asFragment = _wrapper.asFragment,
          getByTestId = _wrapper.getByTestId,
          getByText = _wrapper.getByText,
          getByPlaceholderText = _wrapper.getByPlaceholderText;

    _react2.fireEvent.click(getByTestId('header-dropdown'));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Change Password'))));

    const oldPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter Old Password"));
    expect(oldPwd).toBeDefined(); // expect(asFragment()).toMatchSnapshot();

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Poseidon OS status:'))));
  });
  it("should change the Password", async () => {
    renderComponent();
    const _wrapper2 = wrapper,
          asFragment = _wrapper2.asFragment,
          getByTestId = _wrapper2.getByTestId,
          getByText = _wrapper2.getByText,
          getByPlaceholderText = _wrapper2.getByPlaceholderText;

    _react2.fireEvent.click(getByTestId('header-dropdown'));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Change Password'))));

    const oldPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter Old Password"));

    _react2.fireEvent.keyDown(oldPwd, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.change(oldPwd, {
      target: {
        value: "abcd"
      }
    });

    const newPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter New Password"));

    _react2.fireEvent.keyDown(newPwd, {
      key: 'D',
      code: 68,
      charCode: 68
    });

    _react2.fireEvent.change(newPwd, {
      target: {
        value: "defg"
      }
    });

    const confPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Confirm New Password"));

    _react2.fireEvent.keyDown(confPwd, {
      key: 'D',
      code: 68,
      charCode: 68
    });

    _react2.fireEvent.change(confPwd, {
      target: {
        value: "defg"
      }
    });

    jest.spyOn(global, 'fetch').mockImplementation(() => Promise.resolve({
      status: 200,
      json: () => Promise.resolve({
        value: ""
      })
    }));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId("change-pwd-submit"))));
  });
  it("should redirect if user session ended", async () => {
    renderComponent();
    const _wrapper3 = wrapper,
          asFragment = _wrapper3.asFragment,
          getByTestId = _wrapper3.getByTestId,
          getByText = _wrapper3.getByText,
          getByPlaceholderText = _wrapper3.getByPlaceholderText;

    _react2.fireEvent.click(getByTestId('header-dropdown'));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Change Password'))));

    const oldPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter Old Password"));

    _react2.fireEvent.keyDown(oldPwd, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.change(oldPwd, {
      target: {
        value: "abcd"
      }
    });

    const newPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter New Password"));

    _react2.fireEvent.keyDown(newPwd, {
      key: 'D',
      code: 68,
      charCode: 68
    });

    _react2.fireEvent.change(newPwd, {
      target: {
        value: "defg"
      }
    });

    const confPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Confirm New Password"));

    _react2.fireEvent.keyDown(confPwd, {
      key: 'D',
      code: 68,
      charCode: 68
    });

    _react2.fireEvent.change(confPwd, {
      target: {
        value: "defg"
      }
    });

    jest.spyOn(global, 'fetch').mockImplementation(() => Promise.resolve({
      status: 401,
      json: () => Promise.resolve({
        value: ""
      })
    }));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId("change-pwd-submit"))));
  });
  it("should throw error if password change failed", async () => {
    renderComponent();
    const _wrapper4 = wrapper,
          asFragment = _wrapper4.asFragment,
          getByTestId = _wrapper4.getByTestId,
          getByText = _wrapper4.getByText,
          getByPlaceholderText = _wrapper4.getByPlaceholderText;

    _react2.fireEvent.click(getByTestId('header-dropdown'));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Change Password'))));

    const oldPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter Old Password"));

    _react2.fireEvent.keyDown(oldPwd, {
      key: 'A',
      code: 65,
      charCode: 65
    });

    _react2.fireEvent.change(oldPwd, {
      target: {
        value: "abcd"
      }
    });

    const newPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter New Password"));

    _react2.fireEvent.keyDown(newPwd, {
      key: 'D',
      code: 68,
      charCode: 68
    });

    _react2.fireEvent.change(newPwd, {
      target: {
        value: "defg"
      }
    });

    const confPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Confirm New Password"));

    _react2.fireEvent.keyDown(confPwd, {
      key: 'D',
      code: 68,
      charCode: 68
    });

    _react2.fireEvent.change(confPwd, {
      target: {
        value: "defg"
      }
    });

    jest.spyOn(global, 'fetch').mockImplementation(() => Promise.resolve({
      status: 400,
      json: () => Promise.resolve({
        value: ""
      })
    }));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId("change-pwd-submit"))));

    expect((await (0, _react2.waitForElement)(() => getByText("Error in setting Password")))).toBeDefined();
  });
  it("should show error when old password is not entered", async () => {
    renderComponent();
    const _wrapper5 = wrapper,
          asFragment = _wrapper5.asFragment,
          getByTestId = _wrapper5.getByTestId,
          getByText = _wrapper5.getByText,
          getByPlaceholderText = _wrapper5.getByPlaceholderText;

    _react2.fireEvent.click(getByTestId('header-dropdown'));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Change Password'))));

    await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter Old Password"));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId("change-pwd-submit"))));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('OK'))));
  });
  it("should show error when new password is not entered", async () => {
    renderComponent();
    const _wrapper6 = wrapper,
          asFragment = _wrapper6.asFragment,
          getByTestId = _wrapper6.getByTestId,
          getByText = _wrapper6.getByText,
          getByPlaceholderText = _wrapper6.getByPlaceholderText;

    _react2.fireEvent.click(getByTestId('header-dropdown'));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Change Password'))));

    const oldPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter Old Password"));

    _react2.fireEvent.change(oldPwd, {
      target: {
        value: "abcd"
      }
    });

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId("change-pwd-submit"))));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('OK'))));
  });
  it("should show error when confirm password is not entered", async () => {
    renderComponent();
    const _wrapper7 = wrapper,
          asFragment = _wrapper7.asFragment,
          getByTestId = _wrapper7.getByTestId,
          getByText = _wrapper7.getByText,
          getByPlaceholderText = _wrapper7.getByPlaceholderText;

    _react2.fireEvent.click(getByTestId('header-dropdown'));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Change Password'))));

    const oldPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter Old Password"));

    _react2.fireEvent.change(oldPwd, {
      target: {
        value: "abcd"
      }
    });

    const newPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter New Password"));

    _react2.fireEvent.change(newPwd, {
      target: {
        value: "defg"
      }
    });

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId("change-pwd-submit"))));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('OK'))));
  });
  it("should show error when new password and confirm password do not match", async () => {
    renderComponent();
    const _wrapper8 = wrapper,
          asFragment = _wrapper8.asFragment,
          getByTestId = _wrapper8.getByTestId,
          getByText = _wrapper8.getByText,
          getByPlaceholderText = _wrapper8.getByPlaceholderText;

    _react2.fireEvent.click(getByTestId('header-dropdown'));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Change Password'))));

    const oldPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter Old Password"));

    _react2.fireEvent.change(oldPwd, {
      target: {
        value: "abcd"
      }
    });

    const newPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Enter New Password"));

    _react2.fireEvent.change(newPwd, {
      target: {
        value: "deg"
      }
    });

    const confPwd = await (0, _react2.waitForElement)(() => getByPlaceholderText("Confirm New Password"));

    _react2.fireEvent.change(confPwd, {
      target: {
        value: "defg"
      }
    });

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId("change-pwd-submit"))));

    expect((await (0, _react2.waitForElement)(() => getByText("Passwords do not match")))).toBeDefined();
  });
  it("should toggle the menu", async () => {
    window.innerWidth = 500;
    window.innerHeight = 200;
    window.dispatchEvent(new Event('resize'));
    renderComponent();
    const _wrapper9 = wrapper,
          getByText = _wrapper9.getByText,
          asFragment = _wrapper9.asFragment,
          getByTestId = _wrapper9.getByTestId;

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId('sidebar-toggle')))); // expect(await waitForElement(() => getByText('Dashboard'))).toBeDefined();


    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId('mobile-show-more'))));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByTestId('menu-expand'))));

    _react2.fireEvent.click((await (0, _react2.waitForElement)(() => getByText('Poseidon OS status:'))));

    expect(asFragment()).toMatchSnapshot(); // const dashboardLink = expect(await waitForElement(() => getByText('Poseidon OS status:')));
    // fireEvent.click(dashboardLink);
  }); //   it("should adjust the dropdown position", async () => {
  //     renderComponent();
  //     const { getByText, asFragment } = wrapper;
  //     window.innerWidth = 100
  //     window.innerHeight = 200
  //     window.dispatchEvent(new Event('resize'));
  //     expect(asFragment()).toMatchSnapshot();
  //     const dashboardLink = expect(await waitForElement(() => getByText('Poseidon OS status:')));
  //     fireEvent.click(dashboardLink);
  //   });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,