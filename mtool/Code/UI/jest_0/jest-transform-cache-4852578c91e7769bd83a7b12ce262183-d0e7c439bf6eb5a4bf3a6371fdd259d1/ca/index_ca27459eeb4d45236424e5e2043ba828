5d229b22d12937fb9ee9182a04f5a23b
/* istanbul ignore next */
"use strict";

var cov_2v74z2nsg = function () {
  var path = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AlertTypes/index.js";
  var hash = "27abe164fd2bac9842b6ca7356549d8c31013aed";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AlertTypes/index.js",
    statementMap: {
      "0": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 58,
          column: 1
        }
      },
      "1": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 57,
          column: 4
        }
      },
      "2": {
        start: {
          line: 59,
          column: 19
        },
        end: {
          line: 117,
          column: 1
        }
      },
      "3": {
        start: {
          line: 60,
          column: 22
        },
        end: {
          line: 60,
          column: 27
        }
      },
      "4": {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 116,
          column: 4
        }
      },
      "5": {
        start: {
          line: 68,
          column: 14
        },
        end: {
          line: 110,
          column: 16
        }
      },
      "6": {
        start: {
          line: 78,
          column: 22
        },
        end: {
          line: 78,
          column: 58
        }
      },
      "7": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 106,
          column: 26
        }
      },
      "8": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 86,
          column: 85
        }
      },
      "9": {
        start: {
          line: 91,
          column: 32
        },
        end: {
          line: 101,
          column: 34
        }
      },
      "10": {
        start: {
          line: 94,
          column: 99
        },
        end: {
          line: 94,
          column: 134
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 17
          }
        },
        loc: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 35
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 59,
            column: 19
          },
          end: {
            line: 59,
            column: 20
          }
        },
        loc: {
          start: {
            line: 59,
            column: 28
          },
          end: {
            line: 117,
            column: 1
          }
        },
        line: 59
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 67,
            column: 41
          },
          end: {
            line: 67,
            column: 42
          }
        },
        loc: {
          start: {
            line: 67,
            column: 57
          },
          end: {
            line: 111,
            column: 13
          }
        },
        line: 67
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 77,
            column: 29
          },
          end: {
            line: 77,
            column: 30
          }
        },
        loc: {
          start: {
            line: 77,
            column: 35
          },
          end: {
            line: 79,
            column: 21
          }
        },
        line: 77
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 83,
            column: 52
          },
          end: {
            line: 83,
            column: 53
          }
        },
        loc: {
          start: {
            line: 83,
            column: 71
          },
          end: {
            line: 107,
            column: 23
          }
        },
        line: 83
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 85,
            column: 135
          },
          end: {
            line: 85,
            column: 136
          }
        },
        loc: {
          start: {
            line: 85,
            column: 141
          },
          end: {
            line: 87,
            column: 27
          }
        },
        line: 85
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 90,
            column: 57
          },
          end: {
            line: 90,
            column: 58
          }
        },
        loc: {
          start: {
            line: 90,
            column: 65
          },
          end: {
            line: 103,
            column: 31
          }
        },
        line: 90
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 94,
            column: 93
          },
          end: {
            line: 94,
            column: 94
          }
        },
        loc: {
          start: {
            line: 94,
            column: 99
          },
          end: {
            line: 94,
            column: 134
          }
        },
        line: 94
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 66,
            column: 11
          },
          end: {
            line: 112,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 67,
            column: 14
          },
          end: {
            line: 111,
            column: 14
          }
        }, {
          start: {
            line: 112,
            column: 14
          },
          end: {
            line: 112,
            column: 18
          }
        }],
        line: 66
      },
      "1": {
        loc: {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 107,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 107,
            column: 24
          }
        }, {
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 107,
            column: 31
          }
        }],
        line: 82
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "27abe164fd2bac9842b6ca7356549d8c31013aed"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var
/* istanbul ignore next */
_react = _interopRequireDefault(require("react"));

var
/* istanbul ignore next */
_TreeView = _interopRequireDefault(require("@material-ui/lab/TreeView"));

var
/* istanbul ignore next */
_ExpandMore = _interopRequireDefault(require("@material-ui/icons/ExpandMore"));

var
/* istanbul ignore next */
_ChevronRight = _interopRequireDefault(require("@material-ui/icons/ChevronRight"));

var
/* istanbul ignore next */
_TreeItem = _interopRequireDefault(require("@material-ui/lab/TreeItem"));

var
/* istanbul ignore next */
_core = require("@material-ui/core");

/* istanbul ignore next */
require("./AlertTypes.css");

/* istanbul ignore next */
var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AlertTypes/index.js";
cov_2v74z2nsg.s[0]++;

const styles = () => {
  /* istanbul ignore next */
  cov_2v74z2nsg.f[0]++;
  cov_2v74z2nsg.s[1]++;
  return {
    alertTypesOuterGrid: {
      border: '1px solid gray',
      maxWidth: '100%',
      overflowY: 'auto',
      overflowX: 'hidden',
      minHeight: '130px',
      maxHeight: '130px',
      background: '#fff'
    },
    alertTypesInnerGrid: {
      maxWidth: '100%'
    },
    alertTypesHeader: {
      backgroundColor: '#788595',
      color: 'white',
      paddingLeft: '5px',
      paddingTop: '3px',
      fontSize: '14px',
      height: '25px'
    }
  };
};

/* istanbul ignore next */
cov_2v74z2nsg.s[2]++;

const AlertTypes = props => {
  /* istanbul ignore next */
  cov_2v74z2nsg.f[1]++;

  const _ref = (cov_2v74z2nsg.s[3]++, props),
        classes = _ref.classes;

  /* istanbul ignore next */
  cov_2v74z2nsg.s[4]++;
  return (
    /* istanbul ignore next */
    _react.default.createElement(
    /* istanbul ignore next */
    _core.
    /* istanbul ignore next */
    Grid,
    /* istanbul ignore next */
    {
      sm: 6,
      xs: 12,

      /* istanbul ignore next */
      "data-testid": "AlertsTypesTag",
      item:
      /* istanbul ignore next */
      true,
      container:
      /* istanbul ignore next */
      true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 62
      },
      __self: void 0
    },
    /* istanbul ignore next */
    _react.default.createElement(
    /* istanbul ignore next */
    _core.
    /* istanbul ignore next */
    Grid,
    /* istanbul ignore next */
    {
      xs: 12,
      item:
      /* istanbul ignore next */
      true,
      className: classes.alertTypesOuterGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 63
      },
      __self: void 0
    },
    /* istanbul ignore next */
    _react.default.createElement(
    /* istanbul ignore next */
    _core.
    /* istanbul ignore next */
    Typography,
    /* istanbul ignore next */
    {
      className: classes.alertTypesHeader,
      variant: "h6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 64
      },
      __self: void 0
    },
    /* istanbul ignore next */
    "Alert Types"),
    /* istanbul ignore next */
    _react.default.createElement(
    /* istanbul ignore next */
    _core.
    /* istanbul ignore next */
    Grid,
    /* istanbul ignore next */
    {
      sm: 6,
      xs: 12,
      item:
      /* istanbul ignore next */
      true,
      className: classes.alertTypesInnerGrid,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 65
      },
      __self: void 0
    }, props.alertClusterList ?
    /* istanbul ignore next */
    (cov_2v74z2nsg.b[0][0]++, props.alertClusterList.map((cluster, i) => {
      /* istanbul ignore next */
      cov_2v74z2nsg.f[2]++;
      cov_2v74z2nsg.s[5]++;
      return (
        /* istanbul ignore next */
        _react.default.createElement(
        /* istanbul ignore next */
        _TreeView.
        /* istanbul ignore next */
        default,
        /* istanbul ignore next */
        {
          key: cluster._id,
          defaultCollapseIcon:
          /* istanbul ignore next */
          _react.default.createElement(
          /* istanbul ignore next */
          _ExpandMore.
          /* istanbul ignore next */
          default,
          /* istanbul ignore next */
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 71
            },
            __self: void 0
          }),
          defaultExpandIcon:
          /* istanbul ignore next */
          _react.default.createElement(
          /* istanbul ignore next */
          _ChevronRight.
          /* istanbul ignore next */
          default,
          /* istanbul ignore next */
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 72
            },
            __self: void 0
          }),

          /* istanbul ignore next */
          "data-testid": "ClusterTag",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 69
          },
          __self: void 0
        },
        /* istanbul ignore next */
        _react.default.createElement(
        /* istanbul ignore next */
        _TreeItem.
        /* istanbul ignore next */
        default,
        /* istanbul ignore next */
        {
          nodeId: cluster.name,
          label: cluster.name,
          role: "treeitem",
          onClick: () => {
            /* istanbul ignore next */
            cov_2v74z2nsg.f[3]++;
            cov_2v74z2nsg.s[6]++;
            props.selectAlertCluster(cluster, i);
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 75
          },
          __self: void 0
        }, cluster.alertSubCluster ?
        /* istanbul ignore next */
        (cov_2v74z2nsg.b[1][0]++, cluster.alertSubCluster.map((subcluster, j) => {
          /* istanbul ignore next */
          cov_2v74z2nsg.f[4]++;
          cov_2v74z2nsg.s[7]++;
          return (
            /* istanbul ignore next */
            _react.default.createElement(
            /* istanbul ignore next */
            _TreeItem.
            /* istanbul ignore next */
            default,
            /* istanbul ignore next */
            {
              key: subcluster.name,
              nodeId: subcluster.name,
              label: subcluster.name,
              role: "subtreeitem",
              onClick: () => {
                /* istanbul ignore next */
                cov_2v74z2nsg.f[5]++;
                cov_2v74z2nsg.s[8]++;
                props.selectAlertSubCluster(cluster.name, subcluster, i);
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 85
              },
              __self: void 0
            },
            /* istanbul ignore next */
            _react.default.createElement(
            /* istanbul ignore next */
            _core.
            /* istanbul ignore next */
            FormGroup,
            /* istanbul ignore next */
            {
              row: false,
              root: classes.root,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 89
              },
              __self: void 0
            }, subcluster.alertTypes.map(type => {
              /* istanbul ignore next */
              cov_2v74z2nsg.f[6]++;
              cov_2v74z2nsg.s[9]++;
              return (
                /* istanbul ignore next */
                _react.default.createElement(
                /* istanbul ignore next */
                _core.
                /* istanbul ignore next */
                FormControlLabel,
                /* istanbul ignore next */
                {
                  key: type.type,
                  control:
                  /* istanbul ignore next */
                  _react.default.createElement(
                  /* istanbul ignore next */
                  _core.
                  /* istanbul ignore next */
                  Checkbox,
                  /* istanbul ignore next */
                  {
                    checked: !!type.selected,
                    onChange: () => {
                      /* istanbul ignore next */
                      cov_2v74z2nsg.f[7]++;
                      cov_2v74z2nsg.s[10]++;
                      return props.alertTypeSelected(type, i, j);
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 94
                    },
                    __self: void 0
                  }),
                  label: type.type,

                  /* istanbul ignore next */
                  "data-testid": "alertTypesCheckbox",
                  role: "formControl",
                  labelPlacement: "end",
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 92
                  },
                  __self: void 0
                })
              );
            })))
          );
        })) :
        /* istanbul ignore next */
        (cov_2v74z2nsg.b[1][1]++, null)))
      );
    })) :
    /* istanbul ignore next */
    (cov_2v74z2nsg.b[0][1]++, null))))
  );
};

/* istanbul ignore next */
var _default =
/* istanbul ignore next */
(0,
/* istanbul ignore next */
_core.
/* istanbul ignore next */
withStyles)(styles)(AlertTypes);

/* istanbul ignore next */
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,