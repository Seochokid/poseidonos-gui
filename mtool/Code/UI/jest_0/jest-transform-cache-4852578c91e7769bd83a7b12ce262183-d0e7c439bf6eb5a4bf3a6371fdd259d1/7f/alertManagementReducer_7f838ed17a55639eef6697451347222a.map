{"version":3,"sources":["alertManagementReducer.js"],"names":["initialState","selected","edit","alerts","alertClusters","_id","name","alertSubCluster","alertTypes","type","alertFields","istypealert","alerttype","alertOpen","addDeleteSend","alerttitle","alertdescription","alertManagementReducer","state","action","actionTypes","ALERT_MANAGEMENT_OPEN_ALERT_BOX","alertParam","ALERT_MANAGEMENT_SET_ALERTS","updatedAlerts","i","j","value1","value2","map","cluster","Citr","subcluster","subCitr","cip","ALERT_MANAGEMENT_FETCH_ALERTS","forEach","alert","push","ALERT_MANAGEMENT_FETCH_ALERTS_TYPE","alertTypesArray","length","filter","item","slice","resItem"],"mappings":"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\n\nDESCRIPTION: <Contains reducer function for Alert Management Container> *\n@NAME : alertManagementReducer.js\n@AUTHORS: Jay Hitesh Sanghavi \n@Version : 1.0 *\n@REVISION HISTORY\n[03/06/2019] [Jay] : Prototyping..........////////////////////\n*/\n\nimport * as actionTypes from \"../actions/actionTypes\"\n\nconst initialState = {\n    selected: false,\n    edit: false,\n    alerts: [], // For Alert Table\n    alertClusters: [\n        {\n            // For Alert Types\n            _id: '1',\n            name: 'CPU',\n            alertSubCluster: [\n                {\n                    _id: '1',\n                    name: 'cpu-host',\n                    alertTypes: [\n                        {\n                            type: 'cpu-idle',\n                        },\n                        {\n                            type: 'cpu-idle2',\n                        },\n                        {\n                            type: 'cpu-affinity',\n                        },\n                    ],\n                },\n                {\n                    _id: '2',\n                    name: 'cpu-host2',\n                    alertTypes: [\n                        {\n                            type: 'cpu-idle',\n                        },\n                        {\n                            type: 'cpu-affinity',\n                        },\n                        {\n                            type: 'cpu-time',\n                        },\n                    ],\n                },\n            ],\n            alertFields: [\"usage_idle\",\"usage_system\"],\n        },\n        {\n            _id: '2',\n            name: 'Array',\n            alertSubCluster: [\n                {\n                    name: 'array-disk0',\n                    alertTypes: [\n                        {\n                            type: 'array-name',\n                        },\n                        {\n                            type: 'array-size',\n                        },\n                    ],\n                },\n            ],\n        },\n    ],\n    istypealert: false,\n    alerttype: '',\n    alertOpen: false,\n    addDeleteSend: '',\n    alerttitle: '',\n    alertdescription: '',\n}\n\n\nconst alertManagementReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ALERT_MANAGEMENT_OPEN_ALERT_BOX:\n            {\n                return{\n                    ...state,\n                    ...action.alertParam\n                }\n            }\n        case actionTypes.ALERT_MANAGEMENT_SET_ALERTS:\n            {\n                const { type, i, j } = action.updatedAlerts;\n                const value1 = i;\n                const value2 = j;\n                const alertClusters = state.alertClusters.map((cluster, Citr) => {\n                    return {\n                        ...cluster,\n                        alertSubCluster: cluster.alertSubCluster.map((subcluster, subCitr) => {\n                            return {\n                                ...subcluster,\n                                alertTypes: subcluster.alertTypes.map(cip => {\n                                    if (type.type === cip.type && Citr === value1 && subCitr === value2) {\n                                        return {\n                                            ...cip,\n                                            selected: !cip.selected,\n                                        };\n                                    }\n                                    if (cip.selected === true && value1 === Citr && subCitr === value2) {\n                                        return {\n                                            ...cip,\n                                        };\n                                    }\n                                    return {\n                                        ...cip,\n                                        selected: false,\n                                    };\n                                }),\n                            };\n                        }),\n                    };\n                });\n                return {\n                    ...state,\n                    alertClusters,\n                };\n            }\n        case actionTypes.ALERT_MANAGEMENT_FETCH_ALERTS:\n            {\n                const alerts = [];\n                action.alerts.forEach(alert => {\n                    alerts.push({\n                        ...alert,\n                        selected: false,\n                        edit: false,\n                    });\n                });\n                return {\n                    ...state,\n                    alerts,\n                };\n            }\n\n        case actionTypes.ALERT_MANAGEMENT_FETCH_ALERTS_TYPE:\n            {\n                const alertTypesArray = [];\n                for (let i = 0; i < action.alertTypes.length; i += 1) {\n                    if (action.alertTypes[i].name === 'cpu') {\n                        action.alertTypes[i].alertFields = [\n                            // 'usage_idle',\n                            'usage_user',\n                            // 'usage_system',\n                        ];\n                        for (\n                            let j = 0;\n                            j < action.alertTypes[i].alertSubCluster.length;\n                            j += 1\n                        ) {\n                            if (action.alertTypes[i].alertSubCluster[j].name === 'cpu') {\n                                action.alertTypes[i].alertSubCluster = action.alertTypes[\n                                    i\n                                ].alertSubCluster.filter(item => item.name === 'cpu');\n                                action.alertTypes[i].alertSubCluster[\n                                    j\n                                ].alertTypes = action.alertTypes[i].alertSubCluster[\n                                    j\n                                ].alertTypes.filter(item => item.type === 'cpu-total');\n                                action.alertTypes[i].alertSubCluster[j].name = 'cpu ';\n                            }\n                        }\n                        alertTypesArray.push(action.alertTypes[i]);\n                    } else if (action.alertTypes[i].name === 'disk') {\n                        for (\n                            let j = 0;\n                            j < action.alertTypes[i].alertSubCluster.length;\n                            j += 1\n                        ) {\n                            if (action.alertTypes[i].alertSubCluster[j].name !== 'device') {\n                                action.alertTypes[i].alertSubCluster = action.alertTypes[\n                                    i\n                                ].alertSubCluster.filter(item => item.name === 'device');\n                            } else {\n                                action.alertTypes[i].alertSubCluster[\n                                    j\n                                ].alertTypes = action.alertTypes[i].alertSubCluster[\n                                    j\n                                ].alertTypes.slice(0, 1);\n                                action.alertTypes[i].alertSubCluster[j].alertTypes.map(\n                                    (item) => {\n                                        const resItem = { ...item }\n                                        resItem.type = 'NA';\n                                        return resItem;\n                                    }\n                                );\n                            }\n                        }\n                        action.alertTypes[i].alertFields = ['NA'];\n                        alertTypesArray.push(action.alertTypes[i]);\n                    }\n                }\n                return {\n                    ...state,\n                    alertClusters: alertTypesArray,\n                };\n            }\n        default:\n            return state;\n    }\n};\n\nexport default alertManagementReducer;\n"]}