aabd2115df56c71b852f68740620674e
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchVolLatency = exports.fetchVolWriteIops = exports.fetchVolReadIops = exports.fetchVolWriteBandwidth = exports.fetchVolReadBandwidth = exports.fetchInputPowerVariation = exports.fetchLatency = exports.fetchWriteIops = exports.fetchReadIops = exports.fetchWriteBandwidth = exports.fetchReadBandwidth = exports.fetchCpuUsage = exports.fetchDiskWrite = exports.fetchDiskUsed = void 0;

var actionTypes = _interopRequireWildcard(require("./actionTypes"));

/* -------------------------------------------------------------------------------------/
                                                                                    /
/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /
/                          ALL RIGHTS RESERVED                                        /
/                                                                                     /
/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /
/   products to use or abstract this computer program for the sole purpose of         /
/   implementing a product based on Samsung Electronics Co., Ltd. products.           /
/   No other rights to reproduce, use, or disseminate this computer program,          /
/   whether in part or in whole, are granted.                                         / 
/                                                                                     /
/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /
/   respect to the performance of this computer program, and specifically disclaims   /
/   any responsibility for any damages, special or consequential, connected           /
/   with the use of this program.                                                     /
/                                                                                     /
/-------------------------------------------------------------------------------------/


DESCRIPTION: <Contains pure actions for Performance Container> *
@NAME : performanceActions.js
@AUTHORS: Aswin K K 
@Version : 1.0 *
@REVISION HISTORY
[27/08/2019] [Aswin] : Prototyping..........////////////////////
*/
const fetchDiskUsed = diskUsed => {
  return {
    type: actionTypes.FETCH_DISK_USED,
    diskUsed
  };
};

exports.fetchDiskUsed = fetchDiskUsed;

const fetchDiskWrite = diskWrite => {
  return {
    type: actionTypes.FETCH_DISK_WRITE,
    diskWrite
  };
};

exports.fetchDiskWrite = fetchDiskWrite;

const fetchCpuUsage = cpuUsage => {
  return {
    type: actionTypes.FETCH_CPU_USAGE,
    cpuUsage
  };
};

exports.fetchCpuUsage = fetchCpuUsage;

const fetchReadBandwidth = bw => {
  return {
    type: actionTypes.FETCH_READ_BANDWIDTH,
    bw
  };
};

exports.fetchReadBandwidth = fetchReadBandwidth;

const fetchWriteBandwidth = bw => {
  return {
    type: actionTypes.FETCH_WRITE_BANDWIDTH,
    bw
  };
};

exports.fetchWriteBandwidth = fetchWriteBandwidth;

const fetchReadIops = iops => {
  return {
    type: actionTypes.FETCH_READ_IOPS,
    iops
  };
};

exports.fetchReadIops = fetchReadIops;

const fetchWriteIops = iops => {
  return {
    type: actionTypes.FETCH_WRITE_IOPS,
    iops
  };
};

exports.fetchWriteIops = fetchWriteIops;

const fetchLatency = latency => {
  return {
    type: actionTypes.FETCH_LATENCY,
    latency
  };
};

exports.fetchLatency = fetchLatency;

const fetchInputPowerVariation = watts => {
  return {
    type: actionTypes.FETCH_INPUT_POWER_VARIATION,
    watts
  };
};

exports.fetchInputPowerVariation = fetchInputPowerVariation;

const fetchVolReadBandwidth = payload => {
  return {
    type: actionTypes.FETCH_VOL_READ_BW,
    bw: payload.values,
    level: payload.level,
    name: payload.name,
    maxiops: payload.maxiops,
    maxbw: payload.maxbw
  };
};

exports.fetchVolReadBandwidth = fetchVolReadBandwidth;

const fetchVolWriteBandwidth = payload => {
  return {
    type: actionTypes.FETCH_VOL_WRITE_BW,
    bw: payload.values,
    level: payload.level,
    name: payload.name,
    maxiops: payload.maxiops,
    maxbw: payload.maxbw
  };
};

exports.fetchVolWriteBandwidth = fetchVolWriteBandwidth;

const fetchVolReadIops = payload => {
  return {
    type: actionTypes.FETCH_VOL_READ_IOPS,
    iops: payload.values,
    level: payload.level,
    name: payload.name,
    maxiops: payload.maxiops,
    maxbw: payload.maxiops
  };
};

exports.fetchVolReadIops = fetchVolReadIops;

const fetchVolWriteIops = payload => {
  return {
    type: actionTypes.FETCH_VOL_WRITE_IOPS,
    iops: payload.values,
    level: payload.level,
    name: payload.name,
    maxiops: payload.maxiops,
    maxbw: payload.maxiops
  };
};

exports.fetchVolWriteIops = fetchVolWriteIops;

const fetchVolLatency = payload => {
  return {
    type: actionTypes.FETCH_VOL_LATENCY,
    latency: payload.values,
    level: payload.level,
    name: payload.name,
    maxiops: payload.maxiops,
    maxbw: payload.maxiops
  };
};

exports.fetchVolLatency = fetchVolLatency;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,