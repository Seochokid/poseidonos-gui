9551098c0988597356d0d7fa0b840970
/* istanbul ignore next */
"use strict";

var cov_4umf4wdi8 = function () {
  var path = "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/alertManagementAddNewAlertsSaga.js";
  var hash = "c2754479340a52832b69c61263b3e109546c3ea0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ibof07/pk/ibofmgmt/Code/UI/src/sagas/alertManagementAddNewAlertsSaga.js",
    statementMap: {
      "0": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "1": {
        start: {
          line: 35,
          column: 25
        },
        end: {
          line: 41,
          column: 10
        }
      },
      "2": {
        start: {
          line: 42,
          column: 27
        },
        end: {
          line: 42,
          column: 35
        }
      },
      "3": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 70,
          column: 16
        }
      },
      "4": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 36
        }
      },
      "5": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 52,
          column: 16
        }
      },
      "6": {
        start: {
          line: 54,
          column: 13
        },
        end: {
          line: 70,
          column: 16
        }
      },
      "7": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 61,
          column: 16
        }
      },
      "8": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 70,
          column: 16
        }
      },
      "9": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 88
        }
      }
    },
    fnMap: {
      "0": {
        name: "addNewAlertsInfo",
        decl: {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 33,
            column: 33
          }
        },
        loc: {
          start: {
            line: 33,
            column: 42
          },
          end: {
            line: 75,
            column: 1
          }
        },
        line: 33
      },
      "1": {
        name: "alertManagementAddNewAlertsWatcher",
        decl: {
          start: {
            line: 77,
            column: 17
          },
          end: {
            line: 77,
            column: 51
          }
        },
        loc: {
          start: {
            line: 77,
            column: 54
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 77
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 70,
            column: 16
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 70,
            column: 16
          }
        }, {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 70,
            column: 16
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 54,
            column: 13
          },
          end: {
            line: 70,
            column: 16
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 13
          },
          end: {
            line: 70,
            column: 16
          }
        }, {
          start: {
            line: 54,
            column: 13
          },
          end: {
            line: 70,
            column: 16
          }
        }],
        line: 54
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "43e27e138ebf9cfc5966b082cf9a028302ed4184",
    hash: "c2754479340a52832b69c61263b3e109546c3ea0"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  return coverage[path] = coverageData;
}();

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addNewAlertsInfo = addNewAlertsInfo;
exports.alertManagementAddNewAlertsWatcher = alertManagementAddNewAlertsWatcher;

var
/* istanbul ignore next */
_axios = _interopRequireDefault(require("axios"));

var
/* istanbul ignore next */
_effects = require("redux-saga/effects");

var
/* istanbul ignore next */
actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var
/* istanbul ignore next */
_alertManagementSaga = require("./alertManagementSaga");

var
/* istanbul ignore next */
actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

function* addNewAlertsInfo(action) {
  /* istanbul ignore next */
  cov_4umf4wdi8.f[0]++;
  cov_4umf4wdi8.s[0]++;

  try {
    const response =
    /* istanbul ignore next */
    (cov_4umf4wdi8.s[1]++, yield (
      /* istanbul ignore next */
      (0,
      /* istanbul ignore next */
      _effects.
      /* istanbul ignore next */
      call)([
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default,
      /* istanbul ignore next */
      _axios.
      /* istanbul ignore next */
      default.post], '/api/v1.0/add_alert/', action.addNewAlert, {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'x-access-token': localStorage.getItem('token')
        }
      })
    ));

    /* istanbul ignore next */
    const _ref = (cov_4umf4wdi8.s[2]++, response),
          status = _ref.status;

    /* istanbul ignore next */
    cov_4umf4wdi8.s[3]++;

    if (status === 200) {
      /* istanbul ignore next */
      cov_4umf4wdi8.b[0][0]++;
      cov_4umf4wdi8.s[4]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _alertManagementSaga.
        /* istanbul ignore next */
        fetchAlertsInfo)()
      );

      /* istanbul ignore next */
      cov_4umf4wdi8.s[5]++;
      yield (
        /* istanbul ignore next */
        (0,
        /* istanbul ignore next */
        _effects.
        /* istanbul ignore next */
        put)(actionCreators.openAlertBox({
          alertOpen: true,
          istypealert: true,
          alerttype: 'info',
          // alerttitle: "Success",
          alerttitle: 'Add New Alert',
          alertdescription: 'Alert added successfully'
        }))
      );
    } else {
      /* istanbul ignore next */
      cov_4umf4wdi8.b[0][1]++;
      cov_4umf4wdi8.s[6]++;

      if (response === 400) {
        /* istanbul ignore next */
        cov_4umf4wdi8.b[1][0]++;
        cov_4umf4wdi8.s[7]++;
        yield (
          /* istanbul ignore next */
          (0,
          /* istanbul ignore next */
          _effects.
          /* istanbul ignore next */
          put)(actionCreators.openAlertBox({
            alertOpen: true,
            istypealert: true,
            alerttype: 'alert',
            alerttitle: 'Add New Alert',
            alertdescription: 'Alert already exists'
          }))
        );
      } else {
        /* istanbul ignore next */
        cov_4umf4wdi8.b[1][1]++;
        cov_4umf4wdi8.s[8]++;
        yield (
          /* istanbul ignore next */
          (0,
          /* istanbul ignore next */
          _effects.
          /* istanbul ignore next */
          put)(actionCreators.openAlertBox({
            alertOpen: true,
            istypealert: true,
            alerttype: 'alert',
            // alerttitle: "Failure",
            alerttitle: 'Add New Alert',
            alertdescription: 'Error in adding alert'
          }))
        );
      }
    }
  } catch (error) {
    ;
  }
}

function* alertManagementAddNewAlertsWatcher() {
  /* istanbul ignore next */
  cov_4umf4wdi8.f[1]++;
  cov_4umf4wdi8.s[9]++;
  yield (
    /* istanbul ignore next */
    (0,
    /* istanbul ignore next */
    _effects.
    /* istanbul ignore next */
    takeEvery)(actionTypes.SAGA_ALERT_MANAGEMENT_ADD_NEW_ALERTS, addNewAlertsInfo)
  );
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,