c50ca500a762202aa8eec1ad823a0865
"use strict";

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactDom = require("react-dom");

var _reactI18next = require("react-i18next");

var _redux = require("redux");

var _react2 = require("@testing-library/react");

var _alertManagementReducer = _interopRequireDefault(require("../../../store/reducers/alertManagementReducer"));

var _i18n = _interopRequireDefault(require("../../../i18n"));

var _index = _interopRequireDefault(require("./index"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/components/AlertManagementComponents/AlertFields/index.test.js";
let wrapper;
let alertClusterList = [{
  alertFields: ['usage_idle', 'usage_system', 'NA']
}];
const radioindex = 0;
const alertClusterName = "Random";
const selectedAlertSubCluster = 'Random';
const alertType = 'Random';
beforeEach(() => {
  const rootReducers = (0, _redux.combineReducers)({
    alertManagementReducer: _alertManagementReducer.default
  });
  const store = (0, _redux.createStore)(rootReducers);
  wrapper = (0, _react2.render)(_react.default.createElement(_reactI18next.I18nextProvider, {
    i18n: _i18n.default,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52
    },
    __self: void 0
  }, _react.default.createElement(_reactRedux.Provider, {
    store: store,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53
    },
    __self: void 0
  }, _react.default.createElement(_index.default, {
    alertClusterList: alertClusterList,
    radioindex: radioindex,
    alertClusterName: alertClusterName,
    selectedAlertSubCluster: selectedAlertSubCluster,
    alertType: alertType,
    alertRadioButton: "usage_idle",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54
    },
    __self: void 0
  }))));
  alertClusterList[0].alertFields = null;
  ;
});
test('renders alert fields component', () => {
  const _wrapper = wrapper,
        getByLabelText = _wrapper.getByLabelText,
        queryAllByText = _wrapper.queryAllByText,
        getByTestId = _wrapper.getByTestId,
        getAllByText = _wrapper.getAllByText,
        asFragment = _wrapper.asFragment;
  expect(asFragment()).toMatchSnapshot();
  getByTestId("AlertFieldsTag");
  const input = getByLabelText(/usage_idle/i);

  _react2.fireEvent.change(input, {
    target: {
      value: "Samsung # \n"
    }
  });
});
test('renders alert fields component will null for ternary operator', () => {
  const _wrapper2 = wrapper,
        getByLabelText = _wrapper2.getByLabelText,
        queryAllByText = _wrapper2.queryAllByText,
        getByTestId = _wrapper2.getByTestId,
        getAllByText = _wrapper2.getAllByText,
        asFragment = _wrapper2.asFragment;
  expect(asFragment()).toMatchSnapshot();
  getByTestId("AlertFieldsTag");
});
afterEach(_react2.cleanup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRlc3QuanMiXSwibmFtZXMiOlsid3JhcHBlciIsImFsZXJ0Q2x1c3Rlckxpc3QiLCJhbGVydEZpZWxkcyIsInJhZGlvaW5kZXgiLCJhbGVydENsdXN0ZXJOYW1lIiwic2VsZWN0ZWRBbGVydFN1YkNsdXN0ZXIiLCJhbGVydFR5cGUiLCJiZWZvcmVFYWNoIiwicm9vdFJlZHVjZXJzIiwiYWxlcnRNYW5hZ2VtZW50UmVkdWNlciIsInN0b3JlIiwiaTE4biIsInRlc3QiLCJnZXRCeUxhYmVsVGV4dCIsInF1ZXJ5QWxsQnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJnZXRBbGxCeVRleHQiLCJhc0ZyYWdtZW50IiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwiaW5wdXQiLCJmaXJlRXZlbnQiLCJjaGFuZ2UiLCJ0YXJnZXQiLCJ2YWx1ZSIsImFmdGVyRWFjaCIsImNsZWFudXAiXSwibWFwcGluZ3MiOiI7Ozs7QUEyQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7OztBQUVBLElBQUlBLE9BQUo7QUFDQSxJQUFJQyxnQkFBZ0IsR0FBQyxDQUFDO0FBQUNDLEVBQUFBLFdBQVcsRUFBQyxDQUFDLFlBQUQsRUFBYyxjQUFkLEVBQTZCLElBQTdCO0FBQWIsQ0FBRCxDQUFyQjtBQUNBLE1BQU1DLFVBQVUsR0FBQyxDQUFqQjtBQUNBLE1BQU1DLGdCQUFnQixHQUFHLFFBQXpCO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcsUUFBaEM7QUFDQSxNQUFNQyxTQUFTLEdBQUcsUUFBbEI7QUFFQUMsVUFBVSxDQUFDLE1BQU07QUFDYixRQUFNQyxZQUFZLEdBQUcsNEJBQWdCO0FBQ2pDQyxJQUFBQSxzQkFBc0IsRUFBdEJBO0FBRGlDLEdBQWhCLENBQXJCO0FBR0EsUUFBTUMsS0FBSyxHQUFHLHdCQUFZRixZQUFaLENBQWQ7QUFFQVIsRUFBQUEsT0FBTyxHQUFHLG9CQUNOLDZCQUFDLDZCQUFEO0FBQWlCLElBQUEsSUFBSSxFQUFFVyxhQUF2QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUNJLDZCQUFDLG9CQUFEO0FBQVUsSUFBQSxLQUFLLEVBQUVELEtBQWpCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ksNkJBQUMsY0FBRDtBQUFhLElBQUEsZ0JBQWdCLEVBQUVULGdCQUEvQjtBQUFpRCxJQUFBLFVBQVUsRUFBRUUsVUFBN0Q7QUFBeUUsSUFBQSxnQkFBZ0IsRUFBRUMsZ0JBQTNGO0FBQTZHLElBQUEsdUJBQXVCLEVBQUVDLHVCQUF0STtBQUErSixJQUFBLFNBQVMsRUFBRUMsU0FBMUs7QUFBcUwsSUFBQSxnQkFBZ0IsRUFBQyxZQUF0TTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQURKLENBREosQ0FETSxDQUFWO0FBTUFMLEVBQUFBLGdCQUFnQixDQUFDLENBQUQsQ0FBaEIsQ0FBb0JDLFdBQXBCLEdBQWtDLElBQWxDO0FBQXVDO0FBQzFDLENBYlMsQ0FBVjtBQWVBVSxJQUFJLENBQUMsZ0NBQUQsRUFBbUMsTUFBTTtBQUFBLG1CQUN5Q1osT0FEekM7QUFBQSxRQUNqQ2EsY0FEaUMsWUFDakNBLGNBRGlDO0FBQUEsUUFDakJDLGNBRGlCLFlBQ2pCQSxjQURpQjtBQUFBLFFBQ0RDLFdBREMsWUFDREEsV0FEQztBQUFBLFFBQ1lDLFlBRFosWUFDWUEsWUFEWjtBQUFBLFFBQzBCQyxVQUQxQixZQUMwQkEsVUFEMUI7QUFFekNDLEVBQUFBLE1BQU0sQ0FBQ0QsVUFBVSxFQUFYLENBQU4sQ0FBcUJFLGVBQXJCO0FBQ0FKLEVBQUFBLFdBQVcsQ0FBQyxnQkFBRCxDQUFYO0FBQ0EsUUFBTUssS0FBSyxHQUFHUCxjQUFjLENBQUMsYUFBRCxDQUE1Qjs7QUFFQVEsb0JBQVVDLE1BQVYsQ0FBaUJGLEtBQWpCLEVBQXdCO0FBQUVHLElBQUFBLE1BQU0sRUFBRTtBQUFFQyxNQUFBQSxLQUFLLEVBQUU7QUFBVDtBQUFWLEdBQXhCO0FBRUgsQ0FSRyxDQUFKO0FBVUFaLElBQUksQ0FBQywrREFBRCxFQUFrRSxNQUFNO0FBQUEsb0JBQ1VaLE9BRFY7QUFBQSxRQUNoRWEsY0FEZ0UsYUFDaEVBLGNBRGdFO0FBQUEsUUFDaERDLGNBRGdELGFBQ2hEQSxjQURnRDtBQUFBLFFBQ2hDQyxXQURnQyxhQUNoQ0EsV0FEZ0M7QUFBQSxRQUNuQkMsWUFEbUIsYUFDbkJBLFlBRG1CO0FBQUEsUUFDTEMsVUFESyxhQUNMQSxVQURLO0FBRXhFQyxFQUFBQSxNQUFNLENBQUNELFVBQVUsRUFBWCxDQUFOLENBQXFCRSxlQUFyQjtBQUNBSixFQUFBQSxXQUFXLENBQUMsZ0JBQUQsQ0FBWDtBQUVILENBTEcsQ0FBSjtBQU9BVSxTQUFTLENBQUNDLGVBQUQsQ0FBVCIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgQ09QWVJJR0hUIChjKSAyMDE5IFNBTVNVTkcgRUxFQ1RST05JQ1MgQ08uLCBMVEQuICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgIEFMTCBSSUdIVFMgUkVTRVJWRUQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCB0byBsaWNlbnNlZXMgb2YgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gICAgICAgIC9cbi8gICBwcm9kdWN0cyB0byB1c2Ugb3IgYWJzdHJhY3QgdGhpcyBjb21wdXRlciBwcm9ncmFtIGZvciB0aGUgc29sZSBwdXJwb3NlIG9mICAgICAgICAgL1xuLyAgIGltcGxlbWVudGluZyBhIHByb2R1Y3QgYmFzZWQgb24gU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gcHJvZHVjdHMuICAgICAgICAgICAvXG4vICAgTm8gb3RoZXIgcmlnaHRzIHRvIHJlcHJvZHVjZSwgdXNlLCBvciBkaXNzZW1pbmF0ZSB0aGlzIGNvbXB1dGVyIHByb2dyYW0sICAgICAgICAgIC9cbi8gICB3aGV0aGVyIGluIHBhcnQgb3IgaW4gd2hvbGUsIGFyZSBncmFudGVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBcbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLyAgIFNhbXN1bmcgRWxlY3Ryb25pY3MgQ28uLCBMdGQuIG1ha2VzIG5vIHJlcHJlc2VudGF0aW9uIG9yIHdhcnJhbnRpZXMgd2l0aCAgICAgICAgICAvXG4vICAgcmVzcGVjdCB0byB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyBjb21wdXRlciBwcm9ncmFtLCBhbmQgc3BlY2lmaWNhbGx5IGRpc2NsYWltcyAgIC9cbi8gICBhbnkgcmVzcG9uc2liaWxpdHkgZm9yIGFueSBkYW1hZ2VzLCBzcGVjaWFsIG9yIGNvbnNlcXVlbnRpYWwsIGNvbm5lY3RlZCAgICAgICAgICAgL1xuLyAgIHdpdGggdGhlIHVzZSBvZiB0aGlzIHByb2dyYW0uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tL1xuXG5cbkRFU0NSSVBUSU9OOiBBbGVydCBGaWVsZHMgVGVzdCBGaWxlXG5ATkFNRSA6IGluZGV4LnRlc3QuanNcbkBBVVRIT1JTOiBKYXkgSGl0ZXNoIFNhbmdoYXZpIFxuQFZlcnNpb24gOiAxLjAgKlxuQFJFVklTSU9OIEhJU1RPUllcblswMy8wNi8yMDE5XSBbSmF5XSA6IFByb3RvdHlwaW5nLi4uLi4uLi4uLi8vLy8vLy8vLy8vLy8vLy8vLy8vXG4qL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IFJlYWN0RE9NLCBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCB7IEkxOG5leHRQcm92aWRlciB9IGZyb20gXCJyZWFjdC1pMThuZXh0XCI7XG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMsIGNyZWF0ZVN0b3JlIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgY2xlYW51cCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IGFsZXJ0TWFuYWdlbWVudFJlZHVjZXIgZnJvbSBcIi4uLy4uLy4uL3N0b3JlL3JlZHVjZXJzL2FsZXJ0TWFuYWdlbWVudFJlZHVjZXJcIlxuaW1wb3J0IGkxOG4gZnJvbSBcIi4uLy4uLy4uL2kxOG5cIjtcbmltcG9ydCBBbGVydEZpZWxkcyBmcm9tICcuL2luZGV4JztcblxubGV0IHdyYXBwZXI7XG5sZXQgYWxlcnRDbHVzdGVyTGlzdD1be2FsZXJ0RmllbGRzOlsndXNhZ2VfaWRsZScsJ3VzYWdlX3N5c3RlbScsJ05BJ119XTtcbmNvbnN0IHJhZGlvaW5kZXg9MDtcbmNvbnN0IGFsZXJ0Q2x1c3Rlck5hbWUgPSBcIlJhbmRvbVwiO1xuY29uc3Qgc2VsZWN0ZWRBbGVydFN1YkNsdXN0ZXIgPSAnUmFuZG9tJztcbmNvbnN0IGFsZXJ0VHlwZSA9ICdSYW5kb20nO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjb25zdCByb290UmVkdWNlcnMgPSBjb21iaW5lUmVkdWNlcnMoe1xuICAgICAgICBhbGVydE1hbmFnZW1lbnRSZWR1Y2VyLFxuICAgIH0pO1xuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXJzKVxuXG4gICAgd3JhcHBlciA9IHJlbmRlcihcbiAgICAgICAgPEkxOG5leHRQcm92aWRlciBpMThuPXtpMThufT5cbiAgICAgICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICAgICAgICAgIDxBbGVydEZpZWxkcyBhbGVydENsdXN0ZXJMaXN0PXthbGVydENsdXN0ZXJMaXN0fSByYWRpb2luZGV4PXtyYWRpb2luZGV4fSBhbGVydENsdXN0ZXJOYW1lPXthbGVydENsdXN0ZXJOYW1lfSBzZWxlY3RlZEFsZXJ0U3ViQ2x1c3Rlcj17c2VsZWN0ZWRBbGVydFN1YkNsdXN0ZXJ9IGFsZXJ0VHlwZT17YWxlcnRUeXBlfSBhbGVydFJhZGlvQnV0dG9uPVwidXNhZ2VfaWRsZVwiIC8+XG4gICAgICAgICAgICA8L1Byb3ZpZGVyPlxuICAgICAgICA8L0kxOG5leHRQcm92aWRlcj4pO1xuICAgIGFsZXJ0Q2x1c3Rlckxpc3RbMF0uYWxlcnRGaWVsZHMgPSBudWxsOztcbn0pO1xuXG50ZXN0KCdyZW5kZXJzIGFsZXJ0IGZpZWxkcyBjb21wb25lbnQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeUxhYmVsVGV4dCwgcXVlcnlBbGxCeVRleHQsIGdldEJ5VGVzdElkLCBnZXRBbGxCeVRleHQsIGFzRnJhZ21lbnQgfSA9IHdyYXBwZXI7XG4gICAgZXhwZWN0KGFzRnJhZ21lbnQoKSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgZ2V0QnlUZXN0SWQoXCJBbGVydEZpZWxkc1RhZ1wiKVxuICAgIGNvbnN0IGlucHV0ID0gZ2V0QnlMYWJlbFRleHQoL3VzYWdlX2lkbGUvaSlcblxuICAgIGZpcmVFdmVudC5jaGFuZ2UoaW5wdXQsIHsgdGFyZ2V0OiB7IHZhbHVlOiBcIlNhbXN1bmcgIyBcXG5cIiB9IH0pO1xuICAgIFxufSk7XG5cbnRlc3QoJ3JlbmRlcnMgYWxlcnQgZmllbGRzIGNvbXBvbmVudCB3aWxsIG51bGwgZm9yIHRlcm5hcnkgb3BlcmF0b3InLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeUxhYmVsVGV4dCwgcXVlcnlBbGxCeVRleHQsIGdldEJ5VGVzdElkLCBnZXRBbGxCeVRleHQsIGFzRnJhZ21lbnQgfSA9IHdyYXBwZXI7XG4gICAgZXhwZWN0KGFzRnJhZ21lbnQoKSkudG9NYXRjaFNuYXBzaG90KCk7XG4gICAgZ2V0QnlUZXN0SWQoXCJBbGVydEZpZWxkc1RhZ1wiKTtcbiAgICBcbn0pO1xuXG5hZnRlckVhY2goY2xlYW51cCwpXG4iXX0=