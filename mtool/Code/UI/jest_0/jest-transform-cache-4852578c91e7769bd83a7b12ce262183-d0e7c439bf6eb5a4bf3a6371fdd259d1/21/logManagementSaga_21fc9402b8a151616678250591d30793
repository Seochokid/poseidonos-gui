38fb067b6263b4d81f63912a675fbbad
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIbofOsLogs = getIbofOsLogs;
exports.setLiveLogsDb = setLiveLogsDb;
exports.getLiveLogsDb = getLiveLogsDb;
exports.logManagementWatcher = logManagementWatcher;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function* getIbofOsLogs() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/get_Ibof_OS_Logs/?ts=${Date.now()}`, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      const logList = [];
      result.forEach(log => {
        logList.push(_objectSpread({}, log));
      });
      yield (0, _effects.put)(actionCreators.getIbofOsLogs(logList));
    }
  } catch (error) {//  console.log(error);
  }
}

function* setLiveLogsDb(action) {
  try {
    yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/set_live_logs/', {
      "liveLogs": action.payload
    }, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    yield (0, _effects.put)(actionCreators.setLiveLogs(action.payload));
  } catch (error) {
    yield (0, _effects.put)(actionCreators.setLiveLogs(action.payload));
  }
}

function* getLiveLogsDb() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], `/api/v1.0/get_live_logs/?ts=${Date.now()}`, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.setLiveLogs(result));
    }
  } catch (error) {// console.log(error);
  }
}

function* logManagementWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_GET_IBOFOS_LOGS, getIbofOsLogs);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_SET_LIVE_LOGS_DB, setLiveLogsDb);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_GET_LIVE_LOGS_DB, getLiveLogsDb);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,