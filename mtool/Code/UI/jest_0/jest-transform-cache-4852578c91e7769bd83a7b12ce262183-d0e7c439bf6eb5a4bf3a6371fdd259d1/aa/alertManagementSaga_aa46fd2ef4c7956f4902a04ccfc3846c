f9d752e30b54b8052945a5e10a79edc1
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchAlertsInfo = fetchAlertsInfo;
exports.fetchAlertsTypeInfo = fetchAlertsTypeInfo;
exports.alertManagementContainerWatcher = alertManagementContainerWatcher;

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

/* -------------------------------------------------------------------------------------/
                                                                                    /
/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /
/                          ALL RIGHTS RESERVED                                        /
/                                                                                     /
/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /
/   products to use or abstract this computer program for the sole purpose of         /
/   implementing a product based on Samsung Electronics Co., Ltd. products.           /
/   No other rights to reproduce, use, or disseminate this computer program,          /
/   whether in part or in whole, are granted.                                         / 
/                                                                                     /
/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /
/   respect to the performance of this computer program, and specifically disclaims   /
/   any responsibility for any damages, special or consequential, connected           /
/   with the use of this program.                                                     /
/                                                                                     /
/-------------------------------------------------------------------------------------/


DESCRIPTION: <Contains Generator Functions for Alert Management container> *
@NAME : alertManagementSaga.js
@AUTHORS: Jay Hitesh Sanghavi 
@Version : 1.0 *
@REVISION HISTORY
[03/06/2019] [Jay] : Prototyping..........////////////////////
*/
function* fetchAlertsInfo() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_alerts/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.fetchAlertsInfo(result));
    } else yield (0, _effects.put)(actionCreators.fetchAlertsInfo([]));
  } catch (error) {
    yield (0, _effects.put)(actionCreators.fetchAlertsInfo([]));
  } finally {
    if (yield (0, _effects.cancelled)()) {
      yield (0, _effects.put)(actionCreators.fetchAlertsInfo([]));
    }
  }
}

function* fetchAlertsTypeInfo() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], "/api/v1.0/get_alert_types/", {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result.alert_types) {
      yield (0, _effects.put)(actionCreators.fetchAlertsType(result.alert_types));
    }
  } catch (error) {
    ;
  }
}

function* alertManagementContainerWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_ALERT_MANAGEMENT_FETCH_ALERTS, fetchAlertsInfo);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_ALERT_MANAGEMENT_FETCH_ALERTS_TYPE, fetchAlertsTypeInfo);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsZXJ0TWFuYWdlbWVudFNhZ2EuanMiXSwibmFtZXMiOlsiZmV0Y2hBbGVydHNJbmZvIiwicmVzcG9uc2UiLCJheGlvcyIsImdldCIsImhlYWRlcnMiLCJBY2NlcHQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicmVzdWx0IiwiZGF0YSIsImFjdGlvbkNyZWF0b3JzIiwiZXJyb3IiLCJmZXRjaEFsZXJ0c1R5cGVJbmZvIiwiYWxlcnRfdHlwZXMiLCJmZXRjaEFsZXJ0c1R5cGUiLCJhbGVydE1hbmFnZW1lbnRDb250YWluZXJXYXRjaGVyIiwiYWN0aW9uVHlwZXMiLCJTQUdBX0FMRVJUX01BTkFHRU1FTlRfRkVUQ0hfQUxFUlRTIiwiU0FHQV9BTEVSVF9NQU5BR0VNRU5UX0ZFVENIX0FMRVJUU19UWVBFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBMEJBOztBQUNBOztBQUNBOztBQUNBOztBQTdCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQk8sVUFBVUEsZUFBVixHQUE0QjtBQUMvQixNQUFJO0FBQ0EsVUFBTUMsUUFBUSxHQUFHLE1BQU0sbUJBQUssQ0FBQ0MsY0FBRCxFQUFRQSxlQUFNQyxHQUFkLENBQUwsRUFBeUIsdUJBQXpCLEVBQWtEO0FBQ3JFQyxNQUFBQSxPQUFPLEVBQUU7QUFDTEMsUUFBQUEsTUFBTSxFQUFFLGtCQURIO0FBRUwsd0JBQWdCLGtCQUZYO0FBR0wsMEJBQWtCQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUIsT0FBckI7QUFIYjtBQUQ0RCxLQUFsRCxDQUF2QjtBQU9BLFVBQU1DLE1BQU0sR0FBR1AsUUFBUSxDQUFDUSxJQUF4Qjs7QUFDQSxRQUFJRCxNQUFKLEVBQVk7QUFDUixZQUFNLGtCQUFJRSxjQUFjLENBQUNWLGVBQWYsQ0FBK0JRLE1BQS9CLENBQUosQ0FBTjtBQUNILEtBRkQsTUFHSyxNQUFNLGtCQUFJRSxjQUFjLENBQUNWLGVBQWYsQ0FBK0IsRUFBL0IsQ0FBSixDQUFOO0FBQ1IsR0FiRCxDQWNBLE9BQU9XLEtBQVAsRUFBYztBQUNYLFVBQU0sa0JBQUlELGNBQWMsQ0FBQ1YsZUFBZixDQUErQixFQUEvQixDQUFKLENBQU47QUFDRixHQWhCRCxTQWlCUTtBQUNKLFFBQUcsTUFBTSx5QkFBVCxFQUNBO0FBQ0ksWUFBTSxrQkFBSVUsY0FBYyxDQUFDVixlQUFmLENBQStCLEVBQS9CLENBQUosQ0FBTjtBQUNIO0FBQ0o7QUFDSjs7QUFFTSxVQUFVWSxtQkFBVixHQUFnQztBQUNuQyxNQUFJO0FBQ0EsVUFBTVgsUUFBUSxHQUFHLE1BQU0sbUJBQUssQ0FBQ0MsY0FBRCxFQUFRQSxlQUFNQyxHQUFkLENBQUwsRUFBeUIsNEJBQXpCLEVBQXNEO0FBQUNDLE1BQUFBLE9BQU8sRUFBRTtBQUNuRkMsUUFBQUEsTUFBTSxFQUFFLGtCQUQyRTtBQUVuRix3QkFBZ0Isa0JBRm1FO0FBR25GLDBCQUFrQkMsWUFBWSxDQUFDQyxPQUFiLENBQXFCLE9BQXJCO0FBSGlFO0FBQVYsS0FBdEQsQ0FBdkI7QUFLQSxVQUFNQyxNQUFNLEdBQUdQLFFBQVEsQ0FBQ1EsSUFBeEI7O0FBQ0EsUUFBSUQsTUFBTSxDQUFDSyxXQUFYLEVBQXdCO0FBQ3BCLFlBQU0sa0JBQUlILGNBQWMsQ0FBQ0ksZUFBZixDQUErQk4sTUFBTSxDQUFDSyxXQUF0QyxDQUFKLENBQU47QUFDSDtBQUNKLEdBVkQsQ0FXQSxPQUFPRixLQUFQLEVBQWM7QUFDVjtBQUNIO0FBQ0o7O0FBR00sVUFBVUksK0JBQVYsR0FBNEM7QUFDL0MsUUFBTSx3QkFBVUMsV0FBVyxDQUFDQyxrQ0FBdEIsRUFBMERqQixlQUExRCxDQUFOO0FBQ0EsUUFBTSx3QkFBVWdCLFdBQVcsQ0FBQ0UsdUNBQXRCLEVBQStETixtQkFBL0QsQ0FBTjtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICBDT1BZUklHSFQgKGMpIDIwMTkgU0FNU1VORyBFTEVDVFJPTklDUyBDTy4sIExURC4gICAgICAgICAgICAgICAgICAgICAgL1xuLyAgICAgICAgICAgICAgICAgICAgICAgICAgQUxMIFJJR0hUUyBSRVNFUlZFRCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkIHRvIGxpY2Vuc2VlcyBvZiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiAgICAgICAgL1xuLyAgIHByb2R1Y3RzIHRvIHVzZSBvciBhYnN0cmFjdCB0aGlzIGNvbXB1dGVyIHByb2dyYW0gZm9yIHRoZSBzb2xlIHB1cnBvc2Ugb2YgICAgICAgICAvXG4vICAgaW1wbGVtZW50aW5nIGEgcHJvZHVjdCBiYXNlZCBvbiBTYW1zdW5nIEVsZWN0cm9uaWNzIENvLiwgTHRkLiBwcm9kdWN0cy4gICAgICAgICAgIC9cbi8gICBObyBvdGhlciByaWdodHMgdG8gcmVwcm9kdWNlLCB1c2UsIG9yIGRpc3NlbWluYXRlIHRoaXMgY29tcHV0ZXIgcHJvZ3JhbSwgICAgICAgICAgL1xuLyAgIHdoZXRoZXIgaW4gcGFydCBvciBpbiB3aG9sZSwgYXJlIGdyYW50ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvIFxuLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXG4vICAgU2Ftc3VuZyBFbGVjdHJvbmljcyBDby4sIEx0ZC4gbWFrZXMgbm8gcmVwcmVzZW50YXRpb24gb3Igd2FycmFudGllcyB3aXRoICAgICAgICAgIC9cbi8gICByZXNwZWN0IHRvIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIGNvbXB1dGVyIHByb2dyYW0sIGFuZCBzcGVjaWZpY2FsbHkgZGlzY2xhaW1zICAgL1xuLyAgIGFueSByZXNwb25zaWJpbGl0eSBmb3IgYW55IGRhbWFnZXMsIHNwZWNpYWwgb3IgY29uc2VxdWVudGlhbCwgY29ubmVjdGVkICAgICAgICAgICAvXG4vICAgd2l0aCB0aGUgdXNlIG9mIHRoaXMgcHJvZ3JhbS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbi8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xuLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vXG5cblxuREVTQ1JJUFRJT046IDxDb250YWlucyBHZW5lcmF0b3IgRnVuY3Rpb25zIGZvciBBbGVydCBNYW5hZ2VtZW50IGNvbnRhaW5lcj4gKlxuQE5BTUUgOiBhbGVydE1hbmFnZW1lbnRTYWdhLmpzXG5AQVVUSE9SUzogSmF5IEhpdGVzaCBTYW5naGF2aSBcbkBWZXJzaW9uIDogMS4wICpcbkBSRVZJU0lPTiBISVNUT1JZXG5bMDMvMDYvMjAxOV0gW0pheV0gOiBQcm90b3R5cGluZy4uLi4uLi4uLi4vLy8vLy8vLy8vLy8vLy8vLy8vL1xuKi9cbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBjYWxsLCB0YWtlRXZlcnksIHB1dCxjYW5jZWxsZWQgfSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuaW1wb3J0ICogYXMgYWN0aW9uVHlwZXMgZnJvbSBcIi4uL3N0b3JlL2FjdGlvbnMvYWN0aW9uVHlwZXNcIjtcbmltcG9ydCAqIGFzIGFjdGlvbkNyZWF0b3JzIGZyb20gXCIuLi9zdG9yZS9hY3Rpb25zL2V4cG9ydEFjdGlvbkNyZWF0b3JzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiogZmV0Y2hBbGVydHNJbmZvKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgY2FsbChbYXhpb3MsIGF4aW9zLmdldF0sICcvYXBpL3YxLjAvZ2V0X2FsZXJ0cy8nLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICB5aWVsZCBwdXQoYWN0aW9uQ3JlYXRvcnMuZmV0Y2hBbGVydHNJbmZvKHJlc3VsdCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeWllbGQgcHV0KGFjdGlvbkNyZWF0b3JzLmZldGNoQWxlcnRzSW5mbyhbXSkpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICB5aWVsZCBwdXQoYWN0aW9uQ3JlYXRvcnMuZmV0Y2hBbGVydHNJbmZvKFtdKSk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBpZih5aWVsZCBjYW5jZWxsZWQoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgeWllbGQgcHV0KGFjdGlvbkNyZWF0b3JzLmZldGNoQWxlcnRzSW5mbyhbXSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24qIGZldGNoQWxlcnRzVHlwZUluZm8oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBjYWxsKFtheGlvcywgYXhpb3MuZ2V0XSwgXCIvYXBpL3YxLjAvZ2V0X2FsZXJ0X3R5cGVzL1wiLHtoZWFkZXJzOiB7XG4gICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAneC1hY2Nlc3MtdG9rZW4nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSxcbiAgICAgICAgICB9fSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIGlmIChyZXN1bHQuYWxlcnRfdHlwZXMpIHtcbiAgICAgICAgICAgIHlpZWxkIHB1dChhY3Rpb25DcmVhdG9ycy5mZXRjaEFsZXJ0c1R5cGUocmVzdWx0LmFsZXJ0X3R5cGVzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIDtcbiAgICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uKiBhbGVydE1hbmFnZW1lbnRDb250YWluZXJXYXRjaGVyKCkge1xuICAgIHlpZWxkIHRha2VFdmVyeShhY3Rpb25UeXBlcy5TQUdBX0FMRVJUX01BTkFHRU1FTlRfRkVUQ0hfQUxFUlRTLCBmZXRjaEFsZXJ0c0luZm8pO1xuICAgIHlpZWxkIHRha2VFdmVyeShhY3Rpb25UeXBlcy5TQUdBX0FMRVJUX01BTkFHRU1FTlRfRkVUQ0hfQUxFUlRTX1RZUEUsIGZldGNoQWxlcnRzVHlwZUluZm8pO1xufVxuIl19