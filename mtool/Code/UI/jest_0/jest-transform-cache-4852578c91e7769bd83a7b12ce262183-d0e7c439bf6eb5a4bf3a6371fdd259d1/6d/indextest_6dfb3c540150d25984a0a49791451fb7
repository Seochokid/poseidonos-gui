7a72e2f18cf3eb5cbbccd44409f0e2d2
"use strict";

jest.unmock("axios");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _reactRedux = require("react-redux");

var _testUtils = require("react-dom/test-utils");

var _reactI18next = require("react-i18next");

var _axios = _interopRequireDefault(require("axios"));

require("@testing-library/jest-dom/extend-expect");

var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));

var _history = require("history");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _indexSaga = _interopRequireDefault(require("../../sagas/indexSaga"));

var _headerReducer = _interopRequireDefault(require("../../store/reducers/headerReducer"));

var _configurationsettingReducer = _interopRequireDefault(require("../../store/reducers/configurationsettingReducer"));

var _BMCAuthenticationReducer = _interopRequireDefault(require("../../store/reducers/BMCAuthenticationReducer"));

var _index = _interopRequireDefault(require("./index"));

var _i18n = _interopRequireDefault(require("../../i18n"));

var _jsxFileName = "/home/ibof07/pk/ibofmgmt/Code/UI/src/containers/ConfigurationSetting/index.test.js";
describe("ConfigurationSetting", () => {
  let wrapper;
  let history;
  let store; // let mock;

  beforeEach(() => {
    const sagaMiddleware = (0, _reduxSaga.default)();
    const rootReducers = (0, _redux.combineReducers)({
      // headerLanguageReducer,
      headerReducer: _headerReducer.default,
      configurationsettingReducer: _configurationsettingReducer.default,
      BMCAuthenticationReducer: _BMCAuthenticationReducer.default
    });
    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || _redux.compose;
    store = (0, _redux.createStore)(rootReducers, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware)));
    sagaMiddleware.run(_indexSaga.default);
    const route = "/ConfigurationSetting/general";
    history = (0, _history.createMemoryHistory)({
      initialEntries: [route]
    }); // mock = new MockAdapter(axios);
  });

  const renderComponent = () => {
    wrapper = (0, _react2.render)(_react.default.createElement(_reactRouterDom.Router, {
      history: history,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 81
      },
      __self: void 0
    }, _react.default.createElement(_reactI18next.I18nextProvider, {
      i18n: _i18n.default,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 82
      },
      __self: void 0
    }, _react.default.createElement(_reactRedux.Provider, {
      store: store,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 83
      },
      __self: void 0
    }, " ", _react.default.createElement(_index.default, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 85
      },
      __self: void 0
    })))));
  };

  afterEach(_react2.cleanup);
  it("matches snapshot", () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet("/api/v1.0/get_email_ids/").reply(200, [{
      active: 1,
      edit: false,
      email: "palak.k@samsung.com",
      selected: false
    }]);
    renderComponent();
    const _wrapper = wrapper,
          asFragment = _wrapper.asFragment;
    expect(asFragment()).toMatchSnapshot();
  });
  it("throws error on providing invalid smtp server details", async () => {
    renderComponent();
    const _wrapper2 = wrapper,
          getByTestId = _wrapper2.getByTestId;
    const smtpServerField = getByTestId("smtpServerField").querySelector("input");

    _react2.fireEvent.change(smtpServerField, {
      target: {
        value: "smtp.samsung.net:25"
      }
    });

    expect(smtpServerField.value).toBe("smtp.samsung.net:25");
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onPost().reply(500);

    _react2.fireEvent.click(getByTestId("applyButton"));

    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    expect(alertDescription.innerHTML).toBe("SMTP server is not working");
  });
  it("deletes configured smtp server", async () => {
    renderComponent();
    const _wrapper3 = wrapper,
          getByTestId = _wrapper3.getByTestId;
    const smtpServerField = getByTestId("smtpServerField").querySelector("input");

    _react2.fireEvent.change(smtpServerField, {
      target: {
        value: "smtp.samsung.net:25"
      }
    });

    expect(smtpServerField.value).toBe("smtp.samsung.net:25");
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onPost().reply(200);

    _react2.fireEvent.click(getByTestId("applyButton"));

    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    expect(alertDescription.innerHTML).toBe("SMTP server is working");
    const readOnlyField = getByTestId("readOnlyField").querySelector("input");
    expect(readOnlyField.value).toBe("smtp.samsung.net:25");

    _react2.fireEvent.click(getByTestId("deleteButton"));

    expect(readOnlyField.value).toBe("");
  });
  it("should delete one entry in the email list table", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet("/api/v1.0/get_email_ids/").reply(200, [{
      active: 1,
      edit: false,
      email: "palak.k@samsung.com",
      selected: false
    }, {
      active: 1,
      edit: false,
      email: "palak.kapoor1@gmail.com",
      selected: false
    }]);
    renderComponent();
    const _wrapper4 = wrapper,
          getByTestId = _wrapper4.getByTestId,
          getByText = _wrapper4.getByText,
          getAllByTitle = _wrapper4.getAllByTitle;
    const deleteElement = await (0, _react2.waitForElement)(() => getAllByTitle("Delete")[0]);

    _react2.fireEvent.click(deleteElement);

    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    const spy = jest.spyOn(_axios.default, "post");
    expect(alertDescription.innerHTML).toBe("Are you sure you want to Delete the email?");
    mock.onPost().reply(200);

    _react2.fireEvent.click(getByText("Yes"));

    expect(spy).toHaveBeenCalledWith("/api/v1.0/delete_emailids/", {
      ids: ["palak.k@samsung.com"]
    }, {
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "x-access-token": null
      }
    });
  });
  it("configures valid smtp server details and send a test email to a user", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet("/api/v1.0/get_email_ids/").reply(200, [{
      active: 1,
      edit: false,
      email: "palak.k@samsung.com",
      selected: true
    }]);
    renderComponent();
    const _wrapper5 = wrapper,
          getByTestId = _wrapper5.getByTestId,
          getByText = _wrapper5.getByText,
          getByTitle = _wrapper5.getByTitle;
    const smtpServerField = getByTestId("smtpServerField").querySelector("input");

    _react2.fireEvent.change(smtpServerField, {
      target: {
        value: "smtp.samsung.net:25"
      }
    });

    expect(smtpServerField.value).toBe("smtp.samsung.net:25");
    mock.onPost().reply(200);

    _react2.fireEvent.click(getByTestId("applyButton"));

    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    expect(alertDescription.innerHTML).toBe("SMTP server is working");
    const readOnlyField = getByTestId("readOnlyField").querySelector("input");
    expect(readOnlyField.value).toBe("smtp.samsung.net:25");

    _react2.fireEvent.click(getByText("OK"));
    /*
        const testEmailElement = await waitForElement(() =>
          getByTitle("Test Email")
        );
        fireEvent.click(testEmailElement);
        const errorDescription = await waitForElement(() =>
          getByTestId("alertDescription")
        );
        expect(errorDescription.innerHTML).toBe("Email sent successfully");
        fireEvent.click(getByTestId("alertCloseButton"));
    */

  });
  it("toggles the active status of the entry in the email list table", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet("/api/v1.0/get_email_ids/").reply(200, [{
      active: 0,
      edit: false,
      email: "palak.k@samsung.com",
      selected: false
    }]);
    renderComponent();
    const _wrapper6 = wrapper,
          getByTestId = _wrapper6.getByTestId,
          getByText = _wrapper6.getByText,
          getByTitle = _wrapper6.getByTitle;
    const smtpServerField = getByTestId("smtpServerField").querySelector("input");

    _react2.fireEvent.change(smtpServerField, {
      target: {
        value: "smtp.samsung.net:25"
      }
    });

    expect(smtpServerField.value).toBe("smtp.samsung.net:25");
    mock.onPost().reply(200);

    _react2.fireEvent.click(getByTestId("applyButton"));

    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    expect(alertDescription.innerHTML).toBe("SMTP server is working");
    const readOnlyField = getByTestId("readOnlyField").querySelector("input");
    expect(readOnlyField.value).toBe("smtp.samsung.net:25");

    _react2.fireEvent.click(getByText("OK"));

    const toggleButton = await (0, _react2.waitForElement)(() => getByTestId("toggleButton"));
    const spy = jest.spyOn(_axios.default, "post");

    _react2.fireEvent.click(toggleButton);

    expect(spy).toHaveBeenCalledWith("/api/v1.0/toggle_email_status/", {
      emailid: "palak.k@samsung.com",
      status: true
    }, {
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "x-access-token": null
      }
    });
    /*
        const testEmailElement = await waitForElement(() =>
          getByTitle("Test Email")
        );
        fireEvent.click(testEmailElement);
        const errorDescription = await waitForElement(() =>
          getByTestId("alertDescription")
        );
        expect(errorDescription.innerHTML).toBe(
          "Please select an email id to send"
        );
    */
  });
  /*
    it("throws error while trying to send an email when smtp server is not configured", async () => {
      const mock = new MockAdapter(axios);
      mock.onGet("/api/v1.0/get_email_ids/").reply(200, [
        {
          active: 1,
          edit: false,
          email: "palak.k@samsung.com",
          selected: false
        }
      ]);
      renderComponent();
      const { getByTestId, getByTitle } = wrapper;
      const testEmailElement = await waitForElement(() =>
        getByTitle("Test Email")
      );
      fireEvent.click(testEmailElement);
      const errorDescription = await waitForElement(() =>
        getByTestId("alertDescription")
      );
      expect(errorDescription.innerHTML).toBe("Please configure smtp server");
    });
  */

  it("throws an error if a duplicate entry is added in the email list", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet("/api/v1.0/get_email_ids/").reply(200, [{
      active: 1,
      edit: false,
      email: "palak.k@samsung.com",
      selected: false
    }]);
    renderComponent();
    const _wrapper7 = wrapper,
          asFragment = _wrapper7.asFragment,
          getByTitle = _wrapper7.getByTitle,
          getByPlaceholderText = _wrapper7.getByPlaceholderText,
          getByTestId = _wrapper7.getByTestId;
    const addElement = getByTitle("Add");

    _react2.fireEvent.click(addElement);

    await (0, _testUtils.act)(async () => {
      const saveElement = await (0, _react2.waitForElement)(() => getByTitle("Save"));
      expect(asFragment()).toMatchSnapshot();
      const inputNode = getByPlaceholderText("Email ID");

      _react2.fireEvent.change(inputNode, {
        target: {
          value: "palak.k@samsung.com"
        }
      });

      _react2.fireEvent.click(saveElement);

      const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
      expect(alertDescription.innerHTML).toBe("This email id exists");
    });
  });
  it("throws an error if a blank entry is added to the email list", async () => {
    renderComponent();
    const _wrapper8 = wrapper,
          asFragment = _wrapper8.asFragment,
          getByTitle = _wrapper8.getByTitle,
          getByTestId = _wrapper8.getByTestId;
    const addElement = getByTitle("Add");

    _react2.fireEvent.click(addElement); // await act(async () => {


    const saveElement = await (0, _react2.waitForElement)(() => getByTitle("Save"));
    expect(asFragment()).toMatchSnapshot();

    _react2.fireEvent.click(saveElement);

    await new Promise(resolve => setTimeout(resolve, 1000));
    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    expect(alertDescription.innerHTML).toBe("Please enter a valid email id"); // });
  });
  it("edits an email entry in the email list", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet("/api/v1.0/get_email_ids/").reply(200, [{
      active: 1,
      edit: false,
      email: "palak.k@samsung.com",
      selected: false
    }]);
    renderComponent();
    const _wrapper9 = wrapper,
          asFragment = _wrapper9.asFragment,
          getByTitle = _wrapper9.getByTitle,
          getByPlaceholderText = _wrapper9.getByPlaceholderText;
    await (0, _testUtils.act)(async () => {
      const editElement = await (0, _react2.waitForElement)(() => getByTitle("Edit"));

      _react2.fireEvent.click(editElement);

      expect(asFragment()).toMatchSnapshot();
      const saveElement = await (0, _react2.waitForElement)(() => getByTitle("Save"));
      const inputNode = getByPlaceholderText("Email ID");

      _react2.fireEvent.change(inputNode, {
        target: {
          value: "palak.k1@samsung.com"
        }
      });

      const spy = jest.spyOn(_axios.default, "post");

      _react2.fireEvent.click(saveElement);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toHaveBeenCalledWith("/api/v1.0/update_email/", {
        active: 1,
        edit: false,
        email: "palak.k1@samsung.com",
        oldid: "palak.k@samsung.com",
        selected: false
      }, {
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          "x-access-token": null
        }
      });
    });
  });
  it("should render button on resize", () => {
    // Change the viewport to 500px.
    global.innerWidth = 500; // Trigger the window resize event.

    global.dispatchEvent(new Event("resize"));
    renderComponent();
    const _wrapper10 = wrapper,
          getByTestId = _wrapper10.getByTestId;
    expect(getByTestId("sidebar-toggle")).toBeDefined();

    _react2.fireEvent.click(getByTestId("sidebar-toggle"));

    expect(getByTestId("help-link")).toHaveTextContent("Help");
  });
  it("adds a new entry to the email list", async () => {
    renderComponent();
    const _wrapper11 = wrapper,
          asFragment = _wrapper11.asFragment,
          getByTitle = _wrapper11.getByTitle,
          getByPlaceholderText = _wrapper11.getByPlaceholderText;
    const addElement = getByTitle("Add");

    _react2.fireEvent.click(addElement);

    await (0, _testUtils.act)(async () => {
      const saveElement = await (0, _react2.waitForElement)(() => getByTitle("Save"));
      expect(asFragment()).toMatchSnapshot();
      const inputNode = getByPlaceholderText("Email ID");

      _react2.fireEvent.change(inputNode, {
        target: {
          value: "palak@samsung.com"
        }
      });

      const spy = jest.spyOn(_axios.default, "post");
      const mock = new _axiosMockAdapter.default(_axios.default);
      mock.onPost("/api/v1.0/update_email/").reply(200);

      _react2.fireEvent.click(saveElement);

      await new Promise(resolve => setTimeout(resolve, 1000));
      expect(spy).toHaveBeenCalledWith("/api/v1.0/update_email/", {
        email: "palak@samsung.com",
        oldid: "palak@samsung.com"
      }, {
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
          "x-access-token": null
        }
      });
    });
  });
  it("toggle api throws error if failed", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet("/api/v1.0/get_email_ids/").reply(200, [{
      active: 0,
      edit: false,
      email: "palak.k@samsung.com",
      selected: false
    }]);
    renderComponent();
    const _wrapper12 = wrapper,
          getByTestId = _wrapper12.getByTestId,
          getByText = _wrapper12.getByText;
    const smtpServerField = getByTestId("smtpServerField").querySelector("input");

    _react2.fireEvent.change(smtpServerField, {
      target: {
        value: "smtp.samsung.net:25"
      }
    });

    expect(smtpServerField.value).toBe("smtp.samsung.net:25");
    mock.onPost().reply(200);

    _react2.fireEvent.click(getByTestId("applyButton"));

    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    expect(alertDescription.innerHTML).toBe("SMTP server is working");
    const readOnlyField = getByTestId("readOnlyField").querySelector("input");
    expect(readOnlyField.value).toBe("smtp.samsung.net:25");

    _react2.fireEvent.click(getByText("OK"));

    const toggleButton = await (0, _react2.waitForElement)(() => getByTestId("toggleButton"));
    mock.onPost().reply(500);
    const spy = jest.spyOn(_axios.default, "post");

    _react2.fireEvent.click(toggleButton);

    expect(spy).toHaveBeenCalledWith("/api/v1.0/toggle_email_status/", {
      emailid: "palak.k@samsung.com",
      status: true
    }, {
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "x-access-token": null
      }
    });
  });
  it("delete email api throws error", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet("/api/v1.0/get_email_ids/").reply(200, [{
      active: 1,
      edit: false,
      email: "palak.k@samsung.com",
      selected: false
    }, {
      active: 1,
      edit: false,
      email: "palak.kapoor1@gmail.com",
      selected: false
    }]);
    renderComponent();
    const _wrapper13 = wrapper,
          getByTestId = _wrapper13.getByTestId,
          getByText = _wrapper13.getByText,
          getAllByTitle = _wrapper13.getAllByTitle;
    const deleteElement = await (0, _react2.waitForElement)(() => getAllByTitle("Delete")[0]);

    _react2.fireEvent.click(deleteElement);

    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    const spy = jest.spyOn(_axios.default, "post");
    expect(alertDescription.innerHTML).toBe("Are you sure you want to Delete the email?");
    mock.onPost().reply(500);

    _react2.fireEvent.click(getByText("Yes"));

    expect(spy).toHaveBeenCalledWith("/api/v1.0/delete_emailids/", {
      ids: ["palak.k@samsung.com"]
    }, {
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        "x-access-token": null
      }
    });
    const errorDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    expect(errorDescription.innerHTML).toBe("Error in deleting email id");

    _react2.fireEvent.click(getByTestId("alertCloseButton"));
  });
  it("send email api fails", async () => {
    const mock = new _axiosMockAdapter.default(_axios.default);
    mock.onGet("/api/v1.0/get_email_ids/").reply(200, [{
      active: 1,
      edit: false,
      email: "palak.k@samsung.com",
      selected: false
    }]);
    renderComponent();
    const _wrapper14 = wrapper,
          getByTestId = _wrapper14.getByTestId,
          getByText = _wrapper14.getByText,
          getByTitle = _wrapper14.getByTitle;
    const smtpServerField = getByTestId("smtpServerField").querySelector("input");

    _react2.fireEvent.change(smtpServerField, {
      target: {
        value: "smtp.samsung.net:25"
      }
    });

    expect(smtpServerField.value).toBe("smtp.samsung.net:25");
    mock.onPost().reply(200);

    _react2.fireEvent.click(getByTestId("applyButton"));

    const alertDescription = await (0, _react2.waitForElement)(() => getByTestId("alertDescription"));
    expect(alertDescription.innerHTML).toBe("SMTP server is working");
    const readOnlyField = getByTestId("readOnlyField").querySelector("input");
    expect(readOnlyField.value).toBe("smtp.samsung.net:25");

    _react2.fireEvent.click(getByText("OK"));
    /*
        const testEmailElement = await waitForElement(() =>
          getByTitle("Test Email")
        );
        mock.onPost().reply(500);
        fireEvent.click(testEmailElement);
        const errorDescription = await waitForElement(() =>
          getByTestId("alertDescription")
        );
        expect(errorDescription.innerHTML).toBe("Email sending failed");
    */

  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,