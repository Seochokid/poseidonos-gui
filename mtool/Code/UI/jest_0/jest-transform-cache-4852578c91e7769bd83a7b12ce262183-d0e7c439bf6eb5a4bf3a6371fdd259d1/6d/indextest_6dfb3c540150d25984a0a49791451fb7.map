{"version":3,"sources":["index.test.js"],"names":["jest","unmock","describe","wrapper","history","store","beforeEach","sagaMiddleware","rootReducers","headerReducer","configurationsettingReducer","BMCAuthenticationReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","run","rootSaga","route","initialEntries","renderComponent","i18n","afterEach","cleanup","it","mock","MockAdapter","axios","onGet","reply","active","edit","email","selected","asFragment","expect","toMatchSnapshot","getByTestId","smtpServerField","querySelector","fireEvent","change","target","value","toBe","onPost","click","alertDescription","innerHTML","readOnlyField","getByText","getAllByTitle","deleteElement","spy","spyOn","toHaveBeenCalledWith","ids","headers","Accept","getByTitle","toggleButton","emailid","status","getByPlaceholderText","addElement","saveElement","inputNode","Promise","resolve","setTimeout","editElement","oldid","global","innerWidth","dispatchEvent","Event","toBeDefined","toHaveTextContent","errorDescription"],"mappings":"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","sourcesContent":["/* -------------------------------------------------------------------------------------/\n                                                                                    /\n/               COPYRIGHT (c) 2019 SAMSUNG ELECTRONICS CO., LTD.                      /\n/                          ALL RIGHTS RESERVED                                        /\n/                                                                                     /\n/   Permission is hereby granted to licensees of Samsung Electronics Co., Ltd.        /\n/   products to use or abstract this computer program for the sole purpose of         /\n/   implementing a product based on Samsung Electronics Co., Ltd. products.           /\n/   No other rights to reproduce, use, or disseminate this computer program,          /\n/   whether in part or in whole, are granted.                                         / \n/                                                                                     /\n/   Samsung Electronics Co., Ltd. makes no representation or warranties with          /\n/   respect to the performance of this computer program, and specifically disclaims   /\n/   any responsibility for any damages, special or consequential, connected           /\n/   with the use of this program.                                                     /\n/                                                                                     /\n/-------------------------------------------------------------------------------------/\n\n\nDESCRIPTION: Configuration Setting Container Test File\n@NAME : index.test.js\n@AUTHORS: Palak Kapoor\n@Version : 1.0 *\n@REVISION HISTORY\n[03/06/2019] [Palak] : Prototyping..........////////////////////\n*/\n\nimport React from \"react\";\nimport {\n  render,\n  fireEvent,\n  cleanup,\n  waitForElement\n} from \"@testing-library/react\";\nimport { Provider } from \"react-redux\";\nimport { act } from \"react-dom/test-utils\";\nimport { I18nextProvider } from \"react-i18next\";\nimport axios from \"axios\";\nimport \"@testing-library/jest-dom/extend-expect\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport { createMemoryHistory } from \"history\";\nimport { Router } from \"react-router-dom\";\nimport { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../../sagas/indexSaga\";\nimport headerReducer from \"../../store/reducers/headerReducer\";\nimport configurationsettingReducer from \"../../store/reducers/configurationsettingReducer\";\nimport BMCAuthenticationReducer from \"../../store/reducers/BMCAuthenticationReducer\";\nimport ConfigurationSetting from \"./index\";\nimport i18n from \"../../i18n\";\n\njest.unmock(\"axios\");\n\ndescribe(\"ConfigurationSetting\", () => {\n  let wrapper;\n  let history;\n  let store;\n  // let mock;\n  beforeEach(() => {\n    const sagaMiddleware = createSagaMiddleware();\n    const rootReducers = combineReducers({\n      // headerLanguageReducer,\n      headerReducer,\n      configurationsettingReducer,\n      BMCAuthenticationReducer\n    });\n    const composeEnhancers =\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    store = createStore(\n      rootReducers,\n      composeEnhancers(applyMiddleware(sagaMiddleware))\n    );\n    sagaMiddleware.run(rootSaga);\n    const route = \"/ConfigurationSetting/general\";\n    history = createMemoryHistory({ initialEntries: [route] });\n    // mock = new MockAdapter(axios);\n  });\n\n  const renderComponent = () => {\n    wrapper = render(\n      <Router history={history}>\n        <I18nextProvider i18n={i18n}>\n          <Provider store={store}>\n            {\" \"}\n            <ConfigurationSetting />\n          </Provider>\n        </I18nextProvider>\n      </Router>\n    );\n  };\n\n  afterEach(cleanup);\n\n  it(\"matches snapshot\", () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: false\n      }\n    ]);\n\n    renderComponent();\n    const { asFragment } = wrapper;\n    expect(asFragment()).toMatchSnapshot();\n  });\n\n  it(\"throws error on providing invalid smtp server details\", async () => {\n    renderComponent();\n    const { getByTestId } = wrapper;\n    const smtpServerField = getByTestId(\"smtpServerField\").querySelector(\n      \"input\"\n    );\n    fireEvent.change(smtpServerField, {\n      target: { value: \"smtp.samsung.net:25\" }\n    });\n    expect(smtpServerField.value).toBe(\"smtp.samsung.net:25\");\n    const mock = new MockAdapter(axios);\n    mock.onPost().reply(500);\n    fireEvent.click(getByTestId(\"applyButton\"));\n    const alertDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(alertDescription.innerHTML).toBe(\"SMTP server is not working\");\n  });\n\n  it(\"deletes configured smtp server\", async () => {\n    renderComponent();\n    const { getByTestId } = wrapper;\n    const smtpServerField = getByTestId(\"smtpServerField\").querySelector(\n      \"input\"\n    );\n    fireEvent.change(smtpServerField, {\n      target: { value: \"smtp.samsung.net:25\" }\n    });\n    expect(smtpServerField.value).toBe(\"smtp.samsung.net:25\");\n    const mock = new MockAdapter(axios);\n    mock.onPost().reply(200);\n    fireEvent.click(getByTestId(\"applyButton\"));\n    const alertDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(alertDescription.innerHTML).toBe(\"SMTP server is working\");\n    const readOnlyField = getByTestId(\"readOnlyField\").querySelector(\"input\");\n    expect(readOnlyField.value).toBe(\"smtp.samsung.net:25\");\n    fireEvent.click(getByTestId(\"deleteButton\"));\n    expect(readOnlyField.value).toBe(\"\");\n  });\n\n  it(\"should delete one entry in the email list table\", async () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: false\n      },\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.kapoor1@gmail.com\",\n        selected: false\n      }\n    ]);\n    renderComponent();\n    const { getByTestId, getByText, getAllByTitle } = wrapper;\n    const deleteElement = await waitForElement(\n      () => getAllByTitle(\"Delete\")[0]\n    );\n    fireEvent.click(deleteElement);\n    const alertDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    const spy = jest.spyOn(axios, \"post\");\n    expect(alertDescription.innerHTML).toBe(\n      \"Are you sure you want to Delete the email?\"\n    );\n    mock.onPost().reply(200);\n    fireEvent.click(getByText(\"Yes\"));\n    expect(spy).toHaveBeenCalledWith(\n      \"/api/v1.0/delete_emailids/\",\n      { ids: [\"palak.k@samsung.com\"] },\n      {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": null\n        }\n      }\n    );\n  });\n\n  it(\"configures valid smtp server details and send a test email to a user\", async () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: true\n      }\n    ]);\n    renderComponent();\n    const { getByTestId, getByText, getByTitle } = wrapper;\n    const smtpServerField = getByTestId(\"smtpServerField\").querySelector(\n      \"input\"\n    );\n    fireEvent.change(smtpServerField, {\n      target: { value: \"smtp.samsung.net:25\" }\n    });\n    expect(smtpServerField.value).toBe(\"smtp.samsung.net:25\");\n    mock.onPost().reply(200);\n    fireEvent.click(getByTestId(\"applyButton\"));\n    const alertDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(alertDescription.innerHTML).toBe(\"SMTP server is working\");\n    const readOnlyField = getByTestId(\"readOnlyField\").querySelector(\"input\");\n    expect(readOnlyField.value).toBe(\"smtp.samsung.net:25\");\n    fireEvent.click(getByText(\"OK\"));\n/*\n    const testEmailElement = await waitForElement(() =>\n      getByTitle(\"Test Email\")\n    );\n    fireEvent.click(testEmailElement);\n    const errorDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(errorDescription.innerHTML).toBe(\"Email sent successfully\");\n    fireEvent.click(getByTestId(\"alertCloseButton\"));\n*/\n  });\n\n  it(\"toggles the active status of the entry in the email list table\", async () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 0,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: false\n      }\n    ]);\n    renderComponent();\n    const { getByTestId, getByText, getByTitle } = wrapper;\n    const smtpServerField = getByTestId(\"smtpServerField\").querySelector(\n      \"input\"\n    );\n    fireEvent.change(smtpServerField, {\n      target: { value: \"smtp.samsung.net:25\" }\n    });\n    expect(smtpServerField.value).toBe(\"smtp.samsung.net:25\");\n    mock.onPost().reply(200);\n    fireEvent.click(getByTestId(\"applyButton\"));\n    const alertDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(alertDescription.innerHTML).toBe(\"SMTP server is working\");\n    const readOnlyField = getByTestId(\"readOnlyField\").querySelector(\"input\");\n    expect(readOnlyField.value).toBe(\"smtp.samsung.net:25\");\n    fireEvent.click(getByText(\"OK\"));\n    const toggleButton = await waitForElement(() =>\n      getByTestId(\"toggleButton\")\n    );\n    const spy = jest.spyOn(axios, \"post\");\n    fireEvent.click(toggleButton);\n    expect(spy).toHaveBeenCalledWith(\n      \"/api/v1.0/toggle_email_status/\",\n      { emailid: \"palak.k@samsung.com\", status: true },\n      {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": null\n        }\n      }\n    );\n/*\n    const testEmailElement = await waitForElement(() =>\n      getByTitle(\"Test Email\")\n    );\n    fireEvent.click(testEmailElement);\n    const errorDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(errorDescription.innerHTML).toBe(\n      \"Please select an email id to send\"\n    );\n*/\n  });\n/*\n  it(\"throws error while trying to send an email when smtp server is not configured\", async () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: false\n      }\n    ]);\n    renderComponent();\n    const { getByTestId, getByTitle } = wrapper;\n    const testEmailElement = await waitForElement(() =>\n      getByTitle(\"Test Email\")\n    );\n    fireEvent.click(testEmailElement);\n    const errorDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(errorDescription.innerHTML).toBe(\"Please configure smtp server\");\n  });\n*/\n  it(\"throws an error if a duplicate entry is added in the email list\", async () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: false\n      }\n    ]);\n    renderComponent();\n\n    const {\n      asFragment,\n      getByTitle,\n      getByPlaceholderText,\n      getByTestId\n    } = wrapper;\n    const addElement = getByTitle(\"Add\");\n    fireEvent.click(addElement);\n    await act(async () => {\n      const saveElement = await waitForElement(() => getByTitle(\"Save\"));\n      expect(asFragment()).toMatchSnapshot();\n      const inputNode = getByPlaceholderText(\"Email ID\");\n      fireEvent.change(inputNode, {\n        target: { value: \"palak.k@samsung.com\" }\n      });\n      fireEvent.click(saveElement);\n\n      const alertDescription = await waitForElement(() =>\n        getByTestId(\"alertDescription\")\n      );\n      expect(alertDescription.innerHTML).toBe(\"This email id exists\");\n    });\n  });\n\n  it(\"throws an error if a blank entry is added to the email list\", async () => {\n    renderComponent();\n    const { asFragment, getByTitle, getByTestId } = wrapper;\n    const addElement = getByTitle(\"Add\");\n    fireEvent.click(addElement);\n    // await act(async () => {\n    const saveElement = await waitForElement(() => getByTitle(\"Save\"));\n    expect(asFragment()).toMatchSnapshot();\n    fireEvent.click(saveElement);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const alertDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(alertDescription.innerHTML).toBe(\"Please enter a valid email id\");\n    // });\n  });\n\n  it(\"edits an email entry in the email list\", async () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: false\n      }\n    ]);\n    renderComponent();\n    const { asFragment, getByTitle, getByPlaceholderText } = wrapper;\n\n    await act(async () => {\n      const editElement = await waitForElement(() => getByTitle(\"Edit\"));\n      fireEvent.click(editElement);\n      expect(asFragment()).toMatchSnapshot();\n      const saveElement = await waitForElement(() => getByTitle(\"Save\"));\n      const inputNode = getByPlaceholderText(\"Email ID\");\n      fireEvent.change(inputNode, {\n        target: { value: \"palak.k1@samsung.com\" }\n      });\n      const spy = jest.spyOn(axios, \"post\");\n      fireEvent.click(saveElement);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      expect(spy).toHaveBeenCalledWith(\n        \"/api/v1.0/update_email/\",\n        {\n          active: 1,\n          edit: false,\n          email: \"palak.k1@samsung.com\",\n          oldid: \"palak.k@samsung.com\",\n          selected: false\n        },\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"x-access-token\": null\n          }\n        }\n      );\n    });\n  });\n\n  it(\"should render button on resize\", () => {\n    // Change the viewport to 500px.\n    global.innerWidth = 500;\n\n    // Trigger the window resize event.\n    global.dispatchEvent(new Event(\"resize\"));\n\n    renderComponent();\n    const { getByTestId } = wrapper;\n    expect(getByTestId(\"sidebar-toggle\")).toBeDefined();\n    fireEvent.click(getByTestId(\"sidebar-toggle\"));\n    expect(getByTestId(\"help-link\")).toHaveTextContent(\"Help\");\n  });\n\n  it(\"adds a new entry to the email list\", async () => {\n    renderComponent();\n    const { asFragment, getByTitle, getByPlaceholderText } = wrapper;\n    const addElement = getByTitle(\"Add\");\n    fireEvent.click(addElement);\n    await act(async () => {\n      const saveElement = await waitForElement(() => getByTitle(\"Save\"));\n      expect(asFragment()).toMatchSnapshot();\n      const inputNode = getByPlaceholderText(\"Email ID\");\n      fireEvent.change(inputNode, {\n        target: { value: \"palak@samsung.com\" }\n      });\n      const spy = jest.spyOn(axios, \"post\");\n      const mock = new MockAdapter(axios);\n      mock.onPost(\"/api/v1.0/update_email/\").reply(200);\n      fireEvent.click(saveElement);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      expect(spy).toHaveBeenCalledWith(\n        \"/api/v1.0/update_email/\",\n        { email: \"palak@samsung.com\", oldid: \"palak@samsung.com\" },\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"x-access-token\": null\n          }\n        }\n      );\n    });\n  });\n\n  it(\"toggle api throws error if failed\", async () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 0,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: false\n      }\n    ]);\n    renderComponent();\n    const { getByTestId, getByText } = wrapper;\n    const smtpServerField = getByTestId(\"smtpServerField\").querySelector(\n      \"input\"\n    );\n    fireEvent.change(smtpServerField, {\n      target: { value: \"smtp.samsung.net:25\" }\n    });\n    expect(smtpServerField.value).toBe(\"smtp.samsung.net:25\");\n    mock.onPost().reply(200);\n    fireEvent.click(getByTestId(\"applyButton\"));\n    const alertDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(alertDescription.innerHTML).toBe(\"SMTP server is working\");\n    const readOnlyField = getByTestId(\"readOnlyField\").querySelector(\"input\");\n    expect(readOnlyField.value).toBe(\"smtp.samsung.net:25\");\n    fireEvent.click(getByText(\"OK\"));\n    const toggleButton = await waitForElement(() =>\n      getByTestId(\"toggleButton\")\n    );\n    mock.onPost().reply(500);\n    const spy = jest.spyOn(axios, \"post\");\n    fireEvent.click(toggleButton);\n    expect(spy).toHaveBeenCalledWith(\n      \"/api/v1.0/toggle_email_status/\",\n      { emailid: \"palak.k@samsung.com\", status: true },\n      {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": null\n        }\n      }\n    );\n  });\n\n  it(\"delete email api throws error\", async () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: false\n      },\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.kapoor1@gmail.com\",\n        selected: false\n      }\n    ]);\n    renderComponent();\n    const { getByTestId, getByText, getAllByTitle } = wrapper;\n    const deleteElement = await waitForElement(\n      () => getAllByTitle(\"Delete\")[0]\n    );\n    fireEvent.click(deleteElement);\n    const alertDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    const spy = jest.spyOn(axios, \"post\");\n    expect(alertDescription.innerHTML).toBe(\n      \"Are you sure you want to Delete the email?\"\n    );\n    mock.onPost().reply(500);\n    fireEvent.click(getByText(\"Yes\"));\n    expect(spy).toHaveBeenCalledWith(\n      \"/api/v1.0/delete_emailids/\",\n      { ids: [\"palak.k@samsung.com\"] },\n      {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": null\n        }\n      }\n    );\n    const errorDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(errorDescription.innerHTML).toBe(\"Error in deleting email id\");\n    fireEvent.click(getByTestId(\"alertCloseButton\"));\n  });\n\n  it(\"send email api fails\", async () => {\n    const mock = new MockAdapter(axios);\n    mock.onGet(\"/api/v1.0/get_email_ids/\").reply(200, [\n      {\n        active: 1,\n        edit: false,\n        email: \"palak.k@samsung.com\",\n        selected: false\n      }\n    ]);\n    renderComponent();\n    const { getByTestId, getByText, getByTitle } = wrapper;\n    const smtpServerField = getByTestId(\"smtpServerField\").querySelector(\n      \"input\"\n    );\n    fireEvent.change(smtpServerField, {\n      target: { value: \"smtp.samsung.net:25\" }\n    });\n    expect(smtpServerField.value).toBe(\"smtp.samsung.net:25\");\n    mock.onPost().reply(200);\n    fireEvent.click(getByTestId(\"applyButton\"));\n    const alertDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(alertDescription.innerHTML).toBe(\"SMTP server is working\");\n    const readOnlyField = getByTestId(\"readOnlyField\").querySelector(\"input\");\n    expect(readOnlyField.value).toBe(\"smtp.samsung.net:25\");\n    fireEvent.click(getByText(\"OK\"));\n/*\n    const testEmailElement = await waitForElement(() =>\n      getByTitle(\"Test Email\")\n    );\n    mock.onPost().reply(500);\n    fireEvent.click(testEmailElement);\n    const errorDescription = await waitForElement(() =>\n      getByTestId(\"alertDescription\")\n    );\n    expect(errorDescription.innerHTML).toBe(\"Email sending failed\");\n*/\n  });\n});\n"]}