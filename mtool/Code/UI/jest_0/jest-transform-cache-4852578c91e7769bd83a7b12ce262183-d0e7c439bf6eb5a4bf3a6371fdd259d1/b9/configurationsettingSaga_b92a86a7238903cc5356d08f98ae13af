2429a39f6a5781a5fa0aec9c04bb42cb
"use strict";

var _interopRequireWildcard = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchEmailList = fetchEmailList;
exports.updateEmail = updateEmail;
exports.toggleActiveStatus = toggleActiveStatus;
exports.deleteEmailIds = deleteEmailIds;
exports.sendEmail = sendEmail;
exports.testEmail = testEmail;
exports.getIbofOSTimeInterval = getIbofOSTimeInterval;
exports.setIbofOSTimeInterval = setIbofOSTimeInterval;
exports.configurationsettingWatcher = configurationsettingWatcher;

var _defineProperty2 = _interopRequireDefault(require("/home/ibof07/pk/ibofmgmt/Code/UI/node_modules/@babel/runtime/helpers/defineProperty"));

var _axios = _interopRequireDefault(require("axios"));

var _effects = require("redux-saga/effects");

var actionTypes = _interopRequireWildcard(require("../store/actions/actionTypes"));

var actionCreators = _interopRequireWildcard(require("../store/actions/exportActionCreators"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function* fetchEmailList() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_email_ids/', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;
    const emailList = [];

    if (result) {
      result.forEach(email => {
        emailList.push(_objectSpread({}, email, {
          selected: false,
          edit: false
        }));
      });
    }

    yield (0, _effects.put)(actionCreators.fetchEmailList(emailList));
  } catch (error) {
    ;
  }
}

function* updateEmail(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/update_email/', action.payload, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      yield fetchEmailList();
    }
  } catch (error) {//  console.log(error);
  }
}

function* toggleActiveStatus(action) {
  try {
    yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/toggle_email_status/', action.payload, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    yield fetchEmailList();
  } catch (error) {
    yield fetchEmailList();
  }
}

function* deleteEmailIds(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/delete_emailids/', action.payload, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;

    if (status === 200) {
      const payload = {
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        alerttitle: 'Delete Email',
        alertdescription: 'Email ID deleted successfully'
      };
      yield (0, _effects.put)(actionCreators.setAlertBox(payload));
      yield fetchEmailList();
    }
  } catch (error) {
    const payload = {
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Delete Email',
      alertdescription: 'Error in deleting email id'
    };
    yield (0, _effects.put)(actionCreators.setAlertBox(payload));
  }
}

function* sendEmail(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/send_email/', action.payload, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;
    document.getElementsByTagName('body')[0].style.cursor = 'default';

    if (status === 200) {
      const payload = {
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        alerttitle: 'Send Email',
        alertdescription: 'Email sent successfully'
      };
      yield (0, _effects.put)(actionCreators.setAlertBox(payload));
    }
  } catch (error) {
    document.getElementsByTagName('body')[0].style.cursor = 'default';
    const payload = {
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Send Email',
      alertdescription: 'Email sending failed'
    };
    yield (0, _effects.put)(actionCreators.setAlertBox(payload));
  }
}

function* testEmail(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/test_smtpserver/', action.payload, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const status = response.status;
    document.getElementsByTagName('body')[0].style.cursor = 'default';

    if (status === 200) {
      yield (0, _effects.put)(actionCreators.changeSmtpServer());
      const payload = {
        alertOpen: true,
        istypealert: true,
        alerttype: 'info',
        alerttitle: 'Test SMTP Server',
        alertdescription: 'SMTP server is working'
      };
      yield (0, _effects.put)(actionCreators.setAlertBox(payload));
    }
  } catch (error) {
    document.getElementsByTagName('body')[0].style.cursor = 'default';
    const payload = {
      alertOpen: true,
      istypealert: true,
      alerttype: 'alert',
      alerttitle: 'Test SMTP Server',
      alertdescription: 'SMTP server is not working'
    };
    yield (0, _effects.put)(actionCreators.setAlertBox(payload));
  }
}

function* downloadLogs(action) {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/download_logs', {
      headers: {
        'x-access-token': localStorage.getItem('token')
      },
      params: action.payload,
      responseType: 'blob'
    });
    const status = response.status;

    if (status === 200) {
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'log.zip'); // 3. Append to html page

      document.body.appendChild(link); // 4. Force download

      link.click(); // 5. Clean up and remove the link

      link.parentNode.removeChild(link);
    }
  } catch (error) {
    ;
  }
}

function* getIbofOSTimeInterval() {
  try {
    const response = yield (0, _effects.call)([_axios.default, _axios.default.get], '/api/v1.0/get_ibofos_time_interval', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    const result = response.data;

    if (result) {
      yield (0, _effects.put)(actionCreators.setIbofOSTimeInterval(result));
    } else yield (0, _effects.put)(actionCreators.setIbofOSTimeInterval(4)); // Default Value should be 4 seconds

  } catch (error) {
    ;
  }
}

function* setIbofOSTimeInterval(action) {
  try {
    yield (0, _effects.call)([_axios.default, _axios.default.post], '/api/v1.0/set_ibofos_time_interval', action.payload, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'x-access-token': localStorage.getItem('token')
      }
    });
    yield getIbofOSTimeInterval();
  } catch (error) {
    yield getIbofOSTimeInterval();
  }
}

function* configurationsettingWatcher() {
  yield (0, _effects.takeEvery)(actionTypes.SAGA_FETCH_EMAIL_LIST, fetchEmailList);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_UPDATE_EMAIL, updateEmail);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_TOGGLE_ACTIVE_STATUS, toggleActiveStatus);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_SEND_EMAIL, sendEmail);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_TEST_EMAIL, testEmail);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_DELETE_EMAIL_IDS, deleteEmailIds);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_DOWNLOAD_LOGS, downloadLogs);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_GET_IBOFOS_TIME_INTERVAL, getIbofOSTimeInterval);
  yield (0, _effects.takeEvery)(actionTypes.SAGA_SET_IBOFOS_TIME_INTERVAL, setIbofOSTimeInterval);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,